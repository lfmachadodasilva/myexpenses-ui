{"version":3,"sources":["models/config.ts","helpers/util.ts","configurations/configManager.ts","pages/routes.ts","components/header/header.tsx","pages/auth/auth.tsx","pages/expense/expense.tsx","pages/group/group.tsx","pages/label/label.tsx","pages/settings/settings.tsx","pages/app.tsx","serviceWorker.ts","index.tsx"],"names":["ApiType","hasValue","value","undefined","Array","isArray","length","getValueOrDefault","values","find","x","ConfigModel","apiUrl","buildVersion","ConfigManager","configurationObject","config","get","configurationSettings","Object","assign","set","ApplicationConfiguration","freeze","Routes","home","auth","settings","group","label","expense","HeaderComponent","React","memo","props","to","AuthPage","ExpensePage","GroupPage","LabelPage","SettingsPage","AppPage","useState","basename","key","path","component","exact","Boolean","window","location","hostname","match","overrides","configDefault","process","REACT_APP_API_URL","console","log","setConfiguration","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fbe9cab8.chunk.js","sourcesContent":["export enum ApiType {\r\n    FIREBASE = 'FIREBASE',\r\n    LOCAL_STORAGE = 'LOCAL_STORAGE',\r\n    TOTAL_FAKE = 'TOTAL_FAKE'\r\n}\r\n\r\nexport class ConfigModel {\r\n    /** api backend url */\r\n    apiUrl: string = 'localhost';\r\n    /** build version */\r\n    buildVersion: string = 'local';\r\n}\r\n","export const hasValue = (value: any): boolean => {\r\n    if (value === null || value === undefined) {\r\n        return false;\r\n    }\r\n\r\n    if (typeof value === 'string' || Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n// export const getValueOrDefault = (value?: string, defaultValue?: string) => {\r\n//     return hasValue(value) ? value : defaultValue;\r\n// };\r\n\r\nexport const getValueOrDefault = (...values: any[]) => {\r\n    return values.find(x => hasValue(x));\r\n};\r\n","import config, { Options } from 'react-global-configuration';\r\n\r\nimport { getValueOrDefault } from '../helpers/util';\r\nimport { ConfigModel } from '../models/config';\r\n\r\nexport class ConfigManager {\r\n    static set = (configurationSettings: ConfigModel) => {\r\n        config.set({ ApplicationConfiguration: configurationSettings }, { freeze: false } as Options);\r\n    };\r\n\r\n    static get(): ConfigModel {\r\n        const configurationObject = config.get('ApplicationConfiguration');\r\n\r\n        const configurationSettings = new ConfigModel();\r\n        Object.assign(configurationSettings, configurationObject);\r\n\r\n        return configurationSettings;\r\n    }\r\n}\r\n\r\nexport const setConfiguration = (overrides: Partial<ConfigModel> = {}) => {\r\n    let configDefault: ConfigModel = new ConfigModel();\r\n\r\n    configDefault = {\r\n        ...configDefault,\r\n        buildVersion: getValueOrDefault(\r\n            process.env.REACT_APP_BUILD_VERSION,\r\n            overrides.buildVersion,\r\n            configDefault.buildVersion\r\n        ),\r\n        apiUrl: getValueOrDefault(process.env.REACT_APP_API_URL, overrides.apiUrl, configDefault.apiUrl)\r\n    };\r\n    console.log(configDefault);\r\n\r\n    ConfigManager.set({ ...configDefault, ...overrides });\r\n};\r\n","export class Routes {\r\n    static home = '/';\r\n    static auth = '/auth';\r\n    static settings = '/settings';\r\n    static group = '/group';\r\n    static label = '/label';\r\n    static expense = '/expense';\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Routes } from '../../pages/routes';\r\n\r\nexport type HeaderProps = {};\r\n\r\nexport const HeaderComponent: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\r\n    return (\r\n        <>\r\n            Header Component\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <Link to={Routes.home}>Home</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to={Routes.group}>Group</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to={Routes.label}>Label</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to={Routes.expense}>Expense</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to={Routes.settings}>Settings</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to={Routes.auth}>Auth</Link>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\n\r\nexport type AuthProps = {};\r\n\r\nexport const AuthPage: React.FC<AuthProps> = React.memo((props: AuthProps) => {\r\n    return <>Auth page</>;\r\n});\r\n","import React from 'react';\r\n\r\nexport type ExpenseProps = {};\r\n\r\nexport const ExpensePage: React.FC<ExpenseProps> = React.memo((props: ExpenseProps) => {\r\n    return <>Expense page</>;\r\n});\r\n","import React from 'react';\r\n\r\nexport type GroupProps = {};\r\n\r\nexport const GroupPage: React.FC<GroupProps> = React.memo((props: GroupProps) => {\r\n    return <>Group page</>;\r\n});\r\n","import React from 'react';\r\n\r\nexport type LabelProps = {};\r\n\r\nexport const LabelPage: React.FC<LabelProps> = React.memo((props: LabelProps) => {\r\n    return <>Label page</>;\r\n});\r\n","import React from 'react';\r\n\r\nexport type SettingsProps = {};\r\n\r\nexport const SettingsPage: React.FC<SettingsProps> = React.memo((props: SettingsProps) => {\r\n    return <>Settings page</>;\r\n});\r\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nimport { HeaderComponent } from '../components/header/header';\nimport { ConfigManager } from '../configurations/configManager';\nimport { ConfigModel } from '../models/config';\nimport { AuthPage } from './auth/auth';\nimport { ExpensePage } from './expense/expense';\nimport { GroupPage } from './group/group';\nimport { LabelPage } from './label/label';\nimport { Routes } from './routes';\nimport { SettingsPage } from './settings/settings';\n\nexport type AppProps = {};\n\nexport const AppPage: React.FC<AppProps> = React.memo((props: AppProps) => {\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\n\n    return (\n        <>\n            <HashRouter basename=\"/\">\n                <HeaderComponent />\n                <Switch>\n                    <Route key={Routes.group} path={Routes.group} component={GroupPage} />\n                    <Route key={Routes.label} path={Routes.label} component={LabelPage} />\n                    <Route key={Routes.expense} path={Routes.expense} component={ExpensePage} />\n                    <Route key={Routes.settings} path={Routes.settings} component={SettingsPage} />\n                    <Route key={Routes.auth} path={Routes.auth} component={AuthPage} />\n                    <Route key={Routes.home} exact path={Routes.home}>\n                        <>\n                            <h3>HOME</h3>\n                            <h6>Build Version: {config.buildVersion}</h6>\n                        </>\n                    </Route>\n                    <Route key={'*'} path=\"*\">\n                        <h1> 404 </h1>\n                    </Route>\n                </Switch>\n            </HashRouter>\n        </>\n    );\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { setConfiguration } from './configurations/configManager';\nimport './index.scss';\nimport { AppPage } from './pages/app';\nimport * as serviceWorker from './serviceWorker';\n\nsetConfiguration();\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppPage />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}