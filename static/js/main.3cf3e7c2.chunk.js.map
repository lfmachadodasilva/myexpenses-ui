{"version":3,"sources":["configurations/i18n.ts","contexts/userContext.ts","helpers/utilHelper.ts","services/authService.ts","pages/routes.ts","components/header/header.tsx","configurations/appConfig.ts","configurations/configurationManager.ts","services/serviceBase.ts","components/loading/loading.tsx","services/userService.ts","components/item/item.tsx","services/groupService.ts","helpers/privateRouter.tsx","models/expense.ts","components/dialog/dialog.tsx","components/avatar/avatar.tsx","pages/groups/groupsManage.tsx","pages/groups/groups.tsx","contexts/globalContext.ts","components/search/search.tsx","services/labelService.ts","pages/labels/labelsManage.tsx","pages/labels/labels.tsx","services/expenseService.ts","pages/auth/loginPage.tsx","pages/expenses/expensesManage.tsx","pages/expenses/expenses.tsx","pages/auth/facebookPage.tsx","pages/auth/authPage.tsx","pages/main.tsx","pages/App.tsx","serviceWorker.ts","configurations/firebase.ts","index.tsx"],"names":["resources","en","translation","i18n","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","userContext","React","createContext","user","initialising","isReady","hasValue","value","undefined","Array","isArray","length","getValueOrDefault","values","find","x","facebook","auth","FacebookAuthProvider","loginWithFacebook","a","firebase","signInWithPopup","console","error","loginWithEmail","email","password","signInWithEmailAndPassword","createUserWithEmail","createUserWithEmailAndPassword","resetPassword","sendPasswordResetEmail","Routes","home","groups","labels","expenses","useStyles","makeStyles","theme","root","flexGrow","display","appBar","zIndex","drawer","breakpoints","up","title","cursor","buttons","color","menu","paper","width","sectionMobile","sectionDesktop","flexShrink","drawerPaper","drawerContainer","overflow","container","padding","small","spacing","height","Header","memo","useContext","history","useHistory","location","useLocation","useTranslation","t","useState","open","setOpen","classes","anchorEl","setAnchorEl","handleClose","useCallback","handleOpen","handleGoToHome","push","handleGoToGroups","handleGoToLabels","search","pathname","handleGoToExpenses","handleGoToAuth","handleLogout","signOut","setTimeout","avatarIcon","useMemo","photoURL","Avatar","alt","src","className","displayName","split","AppBar","Container","maxWidth","Toolbar","IconButton","edge","aria-label","onClick","Typography","variant","Button","size","startIcon","data-testid","aria-controls","aria-haspopup","event","currentTarget","Menu","id","keepMounted","Boolean","onClose","MenuItem","ListItemIcon","ListItemText","primary","fontSize","SwipeableDrawer","concat","onOpen","List","ListItem","button","key","Divider","AppConfig","apiUrl","buildVersion","ConfigurationManager","configurationObject","config","get","configurationSettings","Object","assign","set","ApplicationConfiguration","freeze","StatusCodes","LoadingType","handleError","response","status","OK","data","headers","Promise","reject","ServiceBase","url","params","axios","baseURL","this","withCredentials","process","Accept","Authorization","defaults","common","post","put","delete","UserService","ItemType","createStyles","linear","marginTop","LoadingComponent","props","Grid","justify","alignItems","Alert","severity","AlertTitle","showLoading","type","circular","CircularProgress","LinearProgress","children","GroupService","baseUrl","group","groupId","PrivateRoute","Component","component","path","to","cards","flex","header","paddingBottom","content","deleteButton","marginLeft","moreButton","menuButton","ExpenseType","ItemComponent","isLoadingEdit","setLoadingEdit","isLoadingDelete","setLoadingDelete","handleEdit","onEdit","action","then","finally","handleDelete","onDelete","divider","disableGutters","secondary","ListItemSecondaryAction","disableRipple","direction","Row","item","disabled","DialogTitle","withStyles","closeButton","palette","grey","other","disableTypography","DialogContent","MuiDialogContent","DialogActions","margin","MuiDialogActions","DialogComponent","useTheme","fullScreen","useMediaQuery","down","isLoading","setLoading","setError","handleAction","onAction","catch","useEffect","show","Dialog","aria-labelledby","autoFocus","endIcon","disableAction","actionText","getDisplayName","currentUserId","youText","chip","AvatarChipComponent","Chip","label","uid","avatar","photoUrl","AvatarMenuComponent","formControl","minWidth","chips","flexWrap","noLabel","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","GroupsManageDialog","setTitle","setButton","name","setName","selectedUsers","setSelectedUsers","isLoadingUsers","setLoadingUsers","users","setUsers","errorUsers","setErrorUsers","selectedUsersId","map","handleChangeName","target","handleChange","us","userId","u","update","add","usersElement","renderValues","selected","getAll","g","xs","FormControl","fullWidth","InputLabel","htmlFor","Input","required","onChange","Select","labelId","multiple","input","renderValue","list","GroupsPage","setData","setShow","setGroup","reload","setReload","resolve","remove","handleAdd","getFullAll","globalContext","years","Date","getFullYear","month","getMonth","year","details","SearchComponent","isExpanded","setExpanded","setGroups","months","setYears","selectedGroup","setSelectedGroup","selectedGroupName","selectedMonth","setSelectedMonth","selectedYear","setSelectedYear","groupsMenuItems","monthsMenuItems","yearsMenuItems","handleChangeGroup","handleChangeMonth","handleChangeYear","handleChangeAccordion","_event","expanded","queryString","stringify","Accordion","loading","AccordionSummary","expandIcon","noWrap","orientation","flexItem","AccordionDetails","sm","NativeSelect","defaultValue","AccordionActions","LabelService","LabelsManagePage","global","listValues","gridItem","badge","LabelsPage","setLabel","log","Badge","currValue","max","badgeContent","toFixed","lastValue","avgValue","LoginPageType","ExpenseService","obj","ExpensesManagePage","Outcoming","setType","setValue","date","setDate","comments","setComments","handleChangeValue","handleChangeComments","expense","e","FormLabel","RadioGroup","FormControlLabel","Incoming","control","Radio","utils","DateFnsUtils","DatePicker","autoOk","format","multiline","separatorTitle","ExpensesPage","setExpense","calculateTotal","filter","reduce","sum","current","calculateSize","Paper","elevation","LoginPage","setEmail","setPassword","RESET","handleChangeEmail","handleChangePassword","LOGIN","REGISTER","promise","message","Card","CardHeader","CardContent","noValidate","autoComplete","TextField","CardActions","FacebookPage","hasError","handleFacebook","center","textAlign","AuthPage","md","Main","setMonth","setYear","jsonString","JSON","parse","searchParams","groupsResults","lastGroup","localStorage","getItem","some","groupResults","setItem","toString","lastMonth","monthResults","lastYear","yearResults","setup","Provider","exact","App","currentUser","state","setState","unsubscribe","onAuthStateChanged","useAuth","setReady","getIdTokenResult","token","addOrUpdate","prefersDarkMode","createMuiTheme","typography","textTransform","ThemeProvider","CssBaseline","basename","window","hostname","match","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","overrides","configDefault","setConfiguration","initializeApp","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3cf3e7c2.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport translationEN from '../locales/en.json';\n\nconst resources = {\n    en: {\n        translation: translationEN\n    }\n};\n\ni18n.use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources,\n        lng: 'en',\n        fallbackLng: 'en', // use en if detected lng is not available\n\n        // keySeparator: false, // we do not use keys in form messages.welcome\n\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        }\n    });\n\nexport default i18n;\n","import React from 'react';\nimport { User } from 'firebase/app';\n\ninterface UserContext {\n    user: User | null;\n    initialising: boolean;\n    isReady: boolean;\n}\n\nexport const userContext = React.createContext<UserContext>({\n    user: null,\n    initialising: false,\n    isReady: false\n});\n","export const hasValue = (value: any): boolean => {\r\n    if (value === null || value === undefined) {\r\n        return false;\r\n    }\r\n\r\n    if (typeof value === 'string' || Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n// export const getValueOrDefault = (value?: string, defaultValue?: string) => {\r\n//     return hasValue(value) ? value : defaultValue;\r\n// };\r\n\r\nexport const getValueOrDefault = (...values: any[]) => {\r\n    return values.find(x => hasValue(x));\r\n};\r\n","import React, { useState } from 'react';\nimport firebase, { auth } from 'firebase/app';\nimport 'firebase/auth'; // If using Firebase auth\n\nexport const useAuth = () => {\n    const [state, setState] = useState(() => {\n        const user = auth().currentUser;\n        return { initialising: !user, user };\n    });\n\n    const onChange = (user: firebase.User | null) => {\n        setState({ initialising: false, user });\n    };\n\n    React.useEffect(() => {\n        // listen for auth state changes\n        const unsubscribe = firebase.auth().onAuthStateChanged(onChange);\n        // unsubscribe to the listener when unmounting\n        return () => unsubscribe();\n    }, []);\n\n    return state;\n};\n\nconst facebook = new auth.FacebookAuthProvider();\n\nexport const loginWithFacebook = async () => {\n    try {\n        return await firebase.auth().signInWithPopup(facebook);\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const loginWithEmail = async (email: string, password: string) => {\n    try {\n        await firebase.auth().signInWithEmailAndPassword(email, password);\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const createUserWithEmail = async (email: string, password: string) => {\n    try {\n        await firebase.auth().createUserWithEmailAndPassword(email, password);\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const resetPassword = async (email: string) => {\n    try {\n        return await firebase.auth().sendPasswordResetEmail(email);\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const signOut = () => firebase.auth().signOut();\n","export class Routes {\r\n    static home = '/';\r\n    static auth = '/auth';\r\n    static groups = '/groups';\r\n    static labels = '/labels';\r\n    static expenses = '/expenses';\r\n}\r\n","import React, { memo, useState, useContext, useCallback, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { ListItemIcon, ListItemText, Divider, Container, MenuItem, Menu, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\n\nimport GroupIcon from '@material-ui/icons/Group';\nimport HomeIcon from '@material-ui/icons/Home';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport LabelIcon from '@material-ui/icons/Label';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nimport { userContext } from '../../contexts/userContext';\nimport { hasValue } from '../../helpers/utilHelper';\nimport { signOut } from '../../services/authService';\nimport { Routes } from '../../pages/routes';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex'\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 999,\n        [theme.breakpoints.up('sm')]: {\n            zIndex: theme.zIndex.drawer\n        },\n        position: 'static'\n    },\n    title: {\n        flexGrow: 1,\n        cursor: 'pointer'\n    },\n    buttons: {\n        color: 'inherit'\n    },\n    menu: {\n        paper: {\n            width: drawerWidth\n        }\n    },\n    sectionMobile: {\n        display: 'flex',\n        [theme.breakpoints.up('sm')]: {\n            display: 'none'\n        }\n    },\n    sectionDesktop: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'flex'\n        }\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0\n    },\n    drawerPaper: {\n        width: drawerWidth\n    },\n    drawerContainer: {\n        overflow: 'auto'\n    },\n    container: {\n        padding: 0\n    },\n    small: {\n        width: theme.spacing(3),\n        height: theme.spacing(3)\n    }\n}));\n\nexport interface HeaderProps {}\n\nconst HeaderComponent: React.FC<HeaderProps> = memo(() => {\n    const { user } = useContext(userContext);\n    const history = useHistory();\n    const location = useLocation();\n    const [t] = useTranslation();\n    const [open, setOpen] = useState<boolean>(false);\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n    const handleClose = useCallback(() => {\n        setAnchorEl(null);\n    }, []);\n\n    const handleOpen = useCallback(() => {\n        setOpen(!open);\n    }, [open]);\n\n    const handleGoToHome = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        history.push(Routes.home);\n    }, [history]);\n    const handleGoToGroups = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        history.push(Routes.groups);\n    }, [history]);\n    const handleGoToLabels = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        if (hasValue(location.search)) {\n            history.push({ pathname: Routes.labels, search: location.search });\n        } else {\n            history.push(Routes.labels);\n        }\n    }, [history, location]);\n    const handleGoToExpenses = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        if (hasValue(location.search)) {\n            history.push({ pathname: Routes.expenses, search: location.search });\n        } else {\n            history.push(Routes.expenses);\n        }\n    }, [history, location]);\n    const handleGoToAuth = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        history.push(Routes.auth);\n    }, [history]);\n    const handleLogout = useCallback(async () => {\n        setAnchorEl(null);\n        setOpen(false);\n        await signOut();\n        setTimeout(() => history.push(Routes.home));\n    }, [history]);\n\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n        if (hasValue(user)) {\n            setAnchorEl(event.currentTarget);\n            return;\n        }\n        setAnchorEl(null);\n        handleGoToAuth();\n    };\n\n    const avatarIcon = useMemo(() => {\n        return hasValue(user?.photoURL) ? (\n            <Avatar alt={user?.email as string} src={user?.photoURL as string} className={classes.small} />\n        ) : (\n            <AccountCircle />\n        );\n    }, [classes.small, user]);\n\n    const displayName = useMemo(() => {\n        return hasValue(user?.displayName) ? user?.displayName?.split(' ')[0] : user?.email;\n    }, [user]);\n\n    return (\n        <div className={classes.root}>\n            <AppBar className={classes.appBar}>\n                <Container maxWidth=\"md\" className={classes.container}>\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={classes.sectionMobile}\n                            onClick={handleOpen}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title} onClick={handleGoToHome}>\n                            {t('HEADER.TITLE')}\n                        </Typography>\n                        <div className={classes.sectionDesktop}>\n                            <Button\n                                className={classes.buttons}\n                                size=\"small\"\n                                onClick={handleGoToGroups}\n                                startIcon={<GroupIcon />}\n                            >\n                                {t('HEADER.GROUPS')}\n                            </Button>\n                            <Button\n                                className={classes.buttons}\n                                size=\"small\"\n                                onClick={handleGoToLabels}\n                                startIcon={<LabelIcon />}\n                            >\n                                {t('HEADER.LABELS')}\n                            </Button>\n                            <Button\n                                className={classes.buttons}\n                                size=\"small\"\n                                onClick={handleGoToExpenses}\n                                startIcon={<AccountBalanceWalletIcon />}\n                            >\n                                {t('HEADER.EXPENSES')}\n                            </Button>\n                            <IconButton\n                                data-testid=\"avatar-element\"\n                                edge=\"end\"\n                                aria-label=\"account of current user\"\n                                aria-controls=\"primary-search-account-menu\"\n                                aria-haspopup=\"true\"\n                                onClick={handleProfileMenuOpen}\n                                color=\"inherit\"\n                            >\n                                {avatarIcon}\n                            </IconButton>\n                            <Menu\n                                data-testid=\"avatar-menu-element\"\n                                id=\"simple-menu\"\n                                anchorEl={anchorEl}\n                                keepMounted\n                                open={Boolean(anchorEl)}\n                                onClose={handleClose}\n                            >\n                                <MenuItem onClick={handleClose}>\n                                    <ListItemIcon>{avatarIcon}</ListItemIcon>\n                                    <ListItemText primary={displayName} />\n                                </MenuItem>\n                                <MenuItem onClick={handleLogout}>\n                                    <ListItemIcon>\n                                        <ExitToAppIcon fontSize=\"small\" />\n                                    </ListItemIcon>\n                                    <ListItemText primary={t('HEADER.LOGOUT')} />\n                                </MenuItem>\n                            </Menu>\n                        </div>\n                    </Toolbar>\n                </Container>\n            </AppBar>\n            <SwipeableDrawer\n                className={classes.drawer.concat(classes.sectionMobile)}\n                open={open}\n                classes={{\n                    paper: classes.drawerPaper\n                }}\n                onClose={() => setOpen(false)}\n                onOpen={() => setOpen(true)}\n            >\n                <Toolbar />\n                <div className={classes.drawerContainer}>\n                    <List>\n                        <ListItem button key=\"home\">\n                            <ListItemIcon>\n                                <HomeIcon />\n                            </ListItemIcon>\n                            <ListItemText primary={'Home'} onClick={handleGoToHome} />\n                        </ListItem>\n                        <Divider />\n                        <ListItem button key=\"groups\" onClick={handleGoToGroups}>\n                            <ListItemIcon>\n                                <GroupIcon />\n                            </ListItemIcon>\n                            <ListItemText primary={t('HEADER.GROUPS')} />\n                        </ListItem>\n                        <ListItem button key=\"labels\" onClick={handleGoToLabels}>\n                            <ListItemIcon>\n                                <LabelIcon />\n                            </ListItemIcon>\n                            <ListItemText primary={t('HEADER.LABELS')} />\n                        </ListItem>\n                        <ListItem button key=\"expenses\" onClick={handleGoToExpenses}>\n                            <ListItemIcon>\n                                <AccountBalanceWalletIcon />\n                            </ListItemIcon>\n                            <ListItemText primary={t('HEADER.EXPENSES')} />\n                        </ListItem>\n                    </List>\n                    <Divider />\n                    {hasValue(user) && (\n                        <List>\n                            <ListItem button key=\"user\">\n                                <ListItemIcon>{avatarIcon}</ListItemIcon>\n                                <ListItemText primary={displayName} />\n                            </ListItem>\n                            <ListItem button key=\"logout\" onClick={handleLogout}>\n                                <ListItemIcon>\n                                    <ExitToAppIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={t('HEADER.LOGOUT')} />\n                            </ListItem>\n                        </List>\n                    )}\n                    {!hasValue(user) && (\n                        <List>\n                            <ListItem button key=\"login\" onClick={handleGoToAuth}>\n                                <ListItemIcon>\n                                    <AccountCircle />\n                                </ListItemIcon>\n                                <ListItemText primary={t('HEADER.LOGIN_REGISTER')} />\n                            </ListItem>\n                        </List>\n                    )}\n                </div>\n            </SwipeableDrawer>\n        </div>\n    );\n});\n\nexport const Header = HeaderComponent;\n","export class AppConfig {\n    /** api backend url */\n    apiUrl?: string = 'https://myexpenses-backend-dev.herokuapp.com';\n    /** build version */\n    buildVersion?: string = 'local';\n}\n","import { AppConfig } from './appConfig';\nimport config, { Options } from 'react-global-configuration';\n\nimport { getValueOrDefault } from '../helpers/utilHelper';\n\nexport class ConfigurationManager {\n    static set = (configurationSettings: AppConfig) => {\n        config.set({ ApplicationConfiguration: configurationSettings }, { freeze: false } as Options);\n    };\n\n    static get(): AppConfig {\n        const configurationObject = config.get('ApplicationConfiguration');\n\n        const configurationSettings = new AppConfig();\n        Object.assign(configurationSettings, configurationObject);\n\n        return configurationSettings;\n    }\n}\n\nexport const setConfiguration = (overrides: Partial<AppConfig> = {}) => {\n    let configDefault: AppConfig = new AppConfig();\n    // try {\n    //     // read from the config json file\n    //     configDefault = require('../config.json');\n    // } catch {\n    //     // use default configuration\n    //     configDefault = new AppConfig();\n    // }\n\n    configDefault = {\n        ...configDefault,\n        buildVersion: getValueOrDefault(\n            process.env.REACT_APP_BUILD_VERSION,\n            overrides.buildVersion,\n            configDefault.buildVersion\n        ),\n        apiUrl: getValueOrDefault(process.env.REACT_APP_API_URL, overrides.apiUrl, configDefault.apiUrl)\n    };\n\n    ConfigurationManager.set({ ...configDefault, ...overrides });\n};\n","import axios, { AxiosError } from 'axios';\r\nimport { AppConfig } from '../configurations/appConfig';\r\n\r\nexport enum StatusCodes {\r\n    OK = 200\r\n}\r\n\r\nconst handleError = async (error: AxiosError) => {\r\n    if (error.response && error.response.status >= StatusCodes.OK) {\r\n        if (process.env.NODE_ENV !== 'test') {\r\n            // avoid show this when is running test\r\n            console.error('Request Failed:', error.config);\r\n            console.error('Status:', error.response.status);\r\n            console.error('Data:', error.response.data);\r\n            console.error('Headers:', error.response.headers);\r\n        }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n};\r\n\r\nexport class ServiceBase {\r\n    constructor(protected config: AppConfig) {}\r\n\r\n    protected async get<TResponse>(url: string, params?: { [key: string]: any }): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.get(url, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async post<TResponse>(url: string, params?: { [key: string]: any }, data?: any): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.post(url, data, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async put<TResponse>(url: string, params?: { [key: string]: any }, data?: any): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.put(url, data, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async delete<TResponse>(url: string): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.delete(url, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                }\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n}\r\n","import React, { memo } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\nimport AlertTitle from '@material-ui/lab/AlertTitle';\n\nimport { hasValue } from '../../helpers/utilHelper';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nexport enum LoadingType {\n    circular,\n    linear\n}\n\nexport type LoadingProps = {\n    showLoading: boolean;\n    size?: number;\n    error?: string;\n    type?: LoadingType;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        linear: {\n            width: '100%',\n            '& > * + *': {\n                marginTop: theme.spacing(2)\n            }\n        }\n    })\n);\n\nexport const LoadingComponent: React.FC<React.PropsWithChildren<LoadingProps>> = memo(\n    (props: React.PropsWithChildren<LoadingProps>) => {\n        const classes = useStyles();\n\n        if (hasValue(props.error)) {\n            return (\n                <Grid container justify=\"center\" alignItems=\"center\">\n                    <Alert severity=\"error\">\n                        <AlertTitle>Error</AlertTitle>\n                        {props.error}\n                    </Alert>\n                </Grid>\n            );\n        }\n        return props.showLoading ? (\n            <Grid container justify=\"center\" alignItems=\"center\">\n                {(!hasValue(props.type) || props.type === LoadingType.circular) && (\n                    <CircularProgress size={props.size ?? 40} data-testid=\"loading-element\" />\n                )}\n                {props.type === LoadingType.linear && (\n                    <div className={classes.linear}>\n                        <LinearProgress data-testid=\"loading-element\" />\n                    </div>\n                )}\n            </Grid>\n        ) : (\n            <>{props.children}</>\n        );\n    }\n);\n","import { ServiceBase } from './serviceBase';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { UserModel } from '../models/user';\r\n\r\nexport class UserService extends ServiceBase {\r\n    constructor(protected config: AppConfig) {\r\n        super(config);\r\n    }\r\n\r\n    async getAll(): Promise<UserModel[]> {\r\n        return await this.get<UserModel[]>('/api/user');\r\n    }\r\n\r\n    async addOrUpdate(user: UserModel): Promise<UserModel> {\r\n        return await this.post<UserModel>('/api/user', {}, user);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport { hasValue } from '../../helpers/utilHelper';\r\nimport { LoadingComponent } from '../loading/loading';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    cards: {\r\n        flex: 1\r\n    },\r\n    header: {\r\n        padding: theme.spacing(2),\r\n        paddingBottom: 0\r\n    },\r\n    content: {\r\n        padding: theme.spacing(2),\r\n        '&:last-child': {\r\n            paddingBottom: theme.spacing(2)\r\n        }\r\n    },\r\n    deleteButton: {\r\n        marginLeft: theme.spacing(3)\r\n    },\r\n    menu: {\r\n        padding: 0\r\n    },\r\n    moreButton: {\r\n        padding: 0\r\n    },\r\n    menuButton: {\r\n        padding: 0\r\n    }\r\n}));\r\n\r\nexport enum ItemType {\r\n    Row,\r\n    Column,\r\n    Menu\r\n}\r\n\r\nexport type ItemProps = {\r\n    id: number | string;\r\n    type: ItemType;\r\n    title?: string;\r\n    onEdit?: (id: number | string) => Promise<void>;\r\n    onDelete?: (id: number | string) => Promise<void>;\r\n};\r\n\r\nexport const ItemComponent: React.FC<React.PropsWithChildren<ItemProps>> = React.memo(\r\n    (props: React.PropsWithChildren<ItemProps>) => {\r\n        const classes = useStyles();\r\n        const [isLoadingEdit, setLoadingEdit] = React.useState<boolean>(false);\r\n        const [isLoadingDelete, setLoadingDelete] = React.useState<boolean>(false);\r\n\r\n        const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        const handleEdit = React.useCallback(() => {\r\n            handleClose();\r\n            setLoadingEdit(true);\r\n            if (hasValue(props.onEdit)) {\r\n                const action = props.onEdit as (id: number | string) => Promise<void>;\r\n                action(props.id)\r\n                    .then(() => {})\r\n                    .finally(() => setLoadingEdit(false));\r\n            }\r\n        }, [props]);\r\n\r\n        const handleDelete = React.useCallback(() => {\r\n            handleClose();\r\n            setLoadingDelete(true);\r\n            if (hasValue(props.onDelete)) {\r\n                const action = props.onDelete as (id: number | string) => Promise<void>;\r\n                action(props.id)\r\n                    .then(() => {})\r\n                    .finally(() => setLoadingDelete(false));\r\n            }\r\n        }, [props]);\r\n\r\n        return (\r\n            <>\r\n                <ListItem divider disableGutters>\r\n                    <ListItemText key={props.id} primary={props.title} secondary={props.children} />\r\n                    <ListItemSecondaryAction>\r\n                        {props.type === ItemType.Menu && (\r\n                            <>\r\n                                <IconButton onClick={handleClick} disableRipple className={classes.moreButton}>\r\n                                    <MoreVertIcon fontSize=\"inherit\" className={classes.moreButton} />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    id={'simple-menu-' + props.id}\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleClose}\r\n                                >\r\n                                    <MenuItem onClick={handleEdit}>\r\n                                        <ListItemIcon>\r\n                                            <EditIcon fontSize=\"small\" />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"Edit\" />\r\n                                    </MenuItem>\r\n                                    <MenuItem onClick={handleDelete}>\r\n                                        <ListItemIcon>\r\n                                            <DeleteIcon fontSize=\"small\" />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"Delete\" />\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </>\r\n                        )}\r\n\r\n                        {props.type !== ItemType.Menu && (\r\n                            <Grid\r\n                                container\r\n                                direction={props.type === ItemType.Row ? 'row' : 'column'}\r\n                                justify=\"center\"\r\n                                spacing={2}\r\n                            >\r\n                                <Grid item>\r\n                                    {hasValue(props.onEdit) && (\r\n                                        <IconButton size=\"small\" onClick={handleEdit} disabled={isLoadingDelete}>\r\n                                            <LoadingComponent showLoading={isLoadingEdit} size={17}>\r\n                                                <EditIcon fontSize=\"inherit\" data-testid=\"edit-element\" />\r\n                                            </LoadingComponent>\r\n                                        </IconButton>\r\n                                    )}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    {hasValue(props.onDelete) && (\r\n                                        <IconButton size=\"small\" onClick={handleDelete} disabled={isLoadingEdit}>\r\n                                            <LoadingComponent showLoading={isLoadingDelete} size={17}>\r\n                                                <DeleteIcon fontSize=\"inherit\" data-testid=\"delete-element\" />\r\n                                            </LoadingComponent>\r\n                                        </IconButton>\r\n                                    )}\r\n                                </Grid>\r\n                            </Grid>\r\n                        )}\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n                <Divider />\r\n            </>\r\n        );\r\n    }\r\n);\r\n","import { ServiceBase } from './serviceBase';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { GroupModel, GroupFullModel } from '../models/group';\r\n\r\nexport class GroupService extends ServiceBase {\r\n    private baseUrl = '/api/group';\r\n\r\n    constructor(protected config: AppConfig) {\r\n        super(config);\r\n    }\r\n\r\n    async getAll(): Promise<GroupModel[]> {\r\n        return await this.get<GroupModel[]>(this.baseUrl);\r\n    }\r\n\r\n    async getFullAll(): Promise<GroupFullModel[]> {\r\n        return await this.get<GroupFullModel[]>(this.baseUrl + '/full');\r\n    }\r\n\r\n    async add(group: GroupFullModel): Promise<GroupFullModel> {\r\n        return await this.post<GroupFullModel>(this.baseUrl, {}, group);\r\n    }\r\n\r\n    async update(group: GroupFullModel): Promise<void> {\r\n        return await this.put<void>(this.baseUrl, {}, group);\r\n    }\r\n\r\n    async remove(groupId: number): Promise<void> {\r\n        return await this.delete<void>(this.baseUrl + '/' + groupId);\r\n    }\r\n}\r\n","import React, { useContext } from 'react';\nimport { Redirect } from 'react-router';\nimport { userContext } from '../contexts/userContext';\n\ninterface PrivateRouteProps {\n    component: any;\n    path?: string;\n}\n\nexport const PrivateRoute = ({ component: Component, path, ...other }: PrivateRouteProps) => {\n    const { user } = useContext(userContext);\n    return user ? <Component /> : <Redirect to=\"/auth\" />;\n};\n","import { GroupModel } from './group';\r\nimport { LabelModel } from './label';\r\n\r\nexport enum ExpenseType {\r\n    Incoming,\r\n    Outcoming\r\n}\r\n\r\nexport interface ExpenseModel {\r\n    id: number;\r\n    name: string;\r\n\r\n    type: ExpenseType;\r\n    value: number;\r\n    date: Date;\r\n    comments: string;\r\n\r\n    labelId: number;\r\n    groupId: number;\r\n}\r\n\r\nexport interface ExpenseFullModel {\r\n    id: number;\r\n    name: string;\r\n\r\n    type: ExpenseType;\r\n    value: number;\r\n    date: Date;\r\n    comments: string;\r\n\r\n    label: LabelModel;\r\n    group: GroupModel;\r\n}\r\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { useTheme, WithStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport { hasValue } from '../../helpers/utilHelper';\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        root: {\n            marginTop: 50,\n            [theme.breakpoints.up('sm')]: {\n                marginTop: 0\n            },\n            padding: theme.spacing(2)\n        },\n        closeButton: {\n            marginTop: 50,\n            [theme.breakpoints.up('sm')]: {\n                marginTop: 0\n            },\n            position: 'absolute',\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n            color: theme.palette.grey[500]\n        }\n    });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n    id: string;\n    children: React.ReactNode;\n    onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(2)\n    }\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1)\n    }\n}))(MuiDialogActions);\n\nexport type DialogProps = {\n    show: boolean;\n    title: string;\n    actionText: string;\n    disableAction: boolean;\n    onAction: () => Promise<void>;\n    onClose: () => void;\n};\n\nexport const DialogComponent: React.FC<React.PropsWithChildren<DialogProps>> = React.memo(\n    (props: React.PropsWithChildren<DialogProps>) => {\n        const theme = useTheme();\n        const [t] = useTranslation();\n        const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n        const [isLoading, setLoading] = React.useState<boolean>(false);\n        const [error, setError] = React.useState<string>('');\n\n        const handleClose = React.useCallback(() => {\n            props.onClose();\n        }, [props]);\n\n        const handleAction = React.useCallback(() => {\n            setLoading(true);\n            props\n                .onAction()\n                .catch(() => setError(t('COMMON.ERROR')))\n                .finally(() => setLoading(false));\n        }, [props, t]);\n\n        React.useEffect(() => {\n            setError('');\n        }, [props.show]);\n\n        return (\n            <>\n                <Dialog\n                    fullScreen={fullScreen}\n                    open={props.show}\n                    onClose={handleClose}\n                    aria-labelledby=\"responsive-dialog-title\"\n                >\n                    <DialogTitle id=\"responsive-dialog-title\" onClose={handleClose}>\n                        {props.title}\n                    </DialogTitle>\n                    <DialogContent>\n                        <>\n                            {hasValue(error) && <Alert severity=\"error\">{error}</Alert>}\n                            {props.children}\n                        </>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            variant=\"contained\"\n                            autoFocus\n                            color=\"primary\"\n                            onClick={handleAction}\n                            endIcon={isLoading && <CircularProgress size={12} />}\n                            startIcon={hasValue(error) && <CloseIcon color=\"secondary\" />}\n                            disabled={props.disableAction || isLoading}\n                        >\n                            {props.actionText}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n);\n","import React, { memo, useContext } from 'react';\n\nimport Chip from '@material-ui/core/Chip';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { UserModel } from '../../models/user';\nimport { hasValue } from '../../helpers/utilHelper';\nimport { userContext } from '../../contexts/userContext';\nimport { useTranslation } from 'react-i18next';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nexport const getDisplayName = (user: UserModel, currentUserId: string = '', youText: string = '') => {\n    if (user.id === currentUserId) {\n        return youText;\n    }\n    if (hasValue(user.displayName)) {\n        return user.displayName.split(' ')[0];\n    }\n    return user.email.split('@')[0];\n};\n\nconst useStyles = makeStyles(() => ({\n    chip: {\n        margin: 2\n    }\n}));\n\nexport type AvatarChipProps = {\n    user: UserModel;\n};\n\nexport const AvatarChipComponent: React.FC<AvatarChipProps> = memo((props: AvatarChipProps) => {\n    const classes = useStyles();\n    const { user } = useContext(userContext);\n    const [t] = useTranslation();\n\n    return (\n        <Chip\n            label={getDisplayName(props.user, user?.uid, t('COMMON.YOU'))}\n            className={classes.chip}\n            avatar={\n                <Avatar alt={props.user.email} src={props.user.photoUrl}>\n                    {getDisplayName(props.user)[0]}\n                </Avatar>\n            }\n        />\n    );\n});\n\nexport interface AvatarMenuProps {\n    user: UserModel;\n}\n\nexport const AvatarMenuComponent: React.FC<AvatarMenuProps> = memo((props: AvatarMenuProps) => {\n    const { user } = useContext(userContext);\n    const [t] = useTranslation();\n\n    return (\n        <>\n            <ListItemIcon>\n                <Avatar alt={props.user.email} src={props.user.photoUrl}>\n                    {getDisplayName(props.user)[0]}\n                </Avatar>\n            </ListItemIcon>\n            <ListItemText\n                primary={getDisplayName(props.user, user?.uid, t('COMMON.YOU'))}\n                secondary={props.user.email}\n            />\n        </>\n    );\n});\n","import React from 'react';\n\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\n\nimport { DialogComponent } from '../../components/dialog/dialog';\nimport { LoadingComponent } from '../../components/loading/loading';\nimport { GroupFullModel } from '../../models/group';\nimport { hasValue } from '../../helpers/utilHelper';\nimport { UserModel } from '../../models/user';\nimport { UserService } from '../../services/userService';\nimport { AppConfig } from '../../configurations/appConfig';\nimport { ConfigurationManager } from '../../configurations/configurationManager';\nimport { AvatarChipComponent, AvatarMenuComponent } from '../../components/avatar/avatar';\nimport { userContext } from '../../contexts/userContext';\nimport { GroupService } from '../../services/groupService';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n            maxWidth: 300\n        },\n        chips: {\n            display: 'flex',\n            flexWrap: 'wrap'\n        },\n        chip: {\n            margin: 2\n        },\n        noLabel: {\n            marginTop: theme.spacing(3)\n        }\n    })\n);\n\nconst ITEM_HEIGHT = 30;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250\n        }\n    }\n};\n\nexport type GroupsManageProps = {\n    show: boolean;\n    group?: GroupFullModel;\n    onAction: () => void;\n    onClose: () => void;\n};\n\nexport const GroupsManageDialog: React.FC<GroupsManageProps> = React.memo((props: GroupsManageProps) => {\n    const { user } = React.useContext(userContext);\n    const classes = useStyles();\n    const [t] = useTranslation();\n\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\n    const [title, setTitle] = React.useState<string>('');\n    const [button, setButton] = React.useState<string>('');\n    const [open, setOpen] = React.useState(false);\n    const [name, setName] = React.useState<string>('');\n    const [selectedUsers, setSelectedUsers] = React.useState<UserModel[]>([]);\n    const [isLoadingUsers, setLoadingUsers] = React.useState<boolean>(false);\n    const [users, setUsers] = React.useState<UserModel[]>([]);\n    const [errorUsers, setErrorUsers] = React.useState<string>('');\n    const selectedUsersId = React.useMemo(() => selectedUsers.map(x => x.id), [selectedUsers]);\n\n    const handleChangeName = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\n        setName(value.target.value);\n    }, []);\n\n    const handleClose = React.useCallback(() => {\n        setOpen(false);\n        props.onClose();\n    }, [props]);\n\n    const handleChange = React.useCallback(\n        (event: React.ChangeEvent<{ value: unknown }>) => {\n            const usersId = event.target.value as string[];\n            const us = usersId.map(userId => users.find(u => u.id === userId));\n            setSelectedUsers(us as UserModel[]);\n        },\n        [users]\n    );\n\n    const handleAction = React.useCallback(async () => {\n        if (hasValue(props.group)) {\n            return new GroupService(config)\n                .update({\n                    id: props.group?.id as number,\n                    name: name,\n                    users: selectedUsers\n                })\n                .then(() => {\n                    props.onAction();\n                    handleClose();\n                });\n        } else {\n            return new GroupService(config)\n                .add({\n                    id: 0,\n                    name: name,\n                    users: selectedUsers\n                })\n                .then(() => {\n                    props.onAction();\n                    handleClose();\n                });\n        }\n    }, [props, name, selectedUsers, config, handleClose]);\n\n    const usersElement = React.useMemo(\n        () =>\n            users.map(u => (\n                <MenuItem key={`menu-${u.id}`} value={u.id} disabled={u.id === user?.uid}>\n                    <AvatarMenuComponent user={u} />\n                </MenuItem>\n            )),\n        [user, users]\n    );\n\n    const renderValues = React.useCallback(\n        (selected: string[]) => (\n            <div className={classes.chips}>\n                {selected.map(userId => (\n                    <AvatarChipComponent\n                        key={`multiple-${userId}`}\n                        user={users.find(u => u.id === userId) as UserModel}\n                    />\n                ))}\n            </div>\n        ),\n        [users, classes.chips]\n    );\n\n    React.useEffect(() => {\n        setOpen(props.show);\n\n        if (!props.show) {\n            // does not need to update anything\n            return;\n        }\n\n        if (props.show && users.length === 0) {\n            setLoadingUsers(true);\n            new UserService(config)\n                .getAll()\n                .then(value => setUsers(value))\n                .catch(() => setErrorUsers(t('COMMON.ERROR')))\n                .finally(() => setLoadingUsers(false));\n        }\n\n        if (hasValue(props.group)) {\n            const g = props.group as GroupFullModel;\n            setName(g.name);\n            setSelectedUsers(g.users);\n\n            setTitle(t('GROUPS.MANAGE.EDIT.TITLE'));\n            setButton(t('COMMON.EDIT'));\n        } else {\n            setName('');\n            if (hasValue(users)) {\n                setSelectedUsers([users.find(x => x.id === user?.uid)] as UserModel[]);\n            }\n\n            setTitle(t('GROUPS.MANAGE.ADD.TITLE'));\n            setButton(t('COMMON.ADD'));\n        }\n    }, [props, config, users, user, t]);\n\n    return (\n        <>\n            <DialogComponent\n                show={open}\n                title={title}\n                actionText={button}\n                disableAction={!hasValue(name) || !hasValue(selectedUsers) || isLoadingUsers}\n                onAction={handleAction}\n                onClose={handleClose}\n            >\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <FormControl fullWidth>\n                            <InputLabel htmlFor=\"name\">{t('COMMON.NAME')}</InputLabel>\n                            <Input required id=\"name\" onChange={handleChangeName} value={name} />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"mutiple-users-label\">{t('COMMON.MODEL.GROUP.USERS')}</InputLabel>\n                            <LoadingComponent showLoading={isLoadingUsers} error={errorUsers}>\n                                <Select\n                                    labelId=\"mutiple-users-label\"\n                                    id=\"users-mutiple-chip\"\n                                    multiple\n                                    value={selectedUsersId}\n                                    onChange={handleChange}\n                                    input={<Input id=\"select-multiple-chip\" />}\n                                    renderValue={selected => renderValues(selected as string[])}\n                                    MenuProps={MenuProps}\n                                >\n                                    {usersElement}\n                                </Select>\n                            </LoadingComponent>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </DialogComponent>\n        </>\n    );\n});\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { userContext } from '../../contexts/userContext';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { AppConfig } from '../../configurations/appConfig';\r\nimport { ConfigurationManager } from '../../configurations/configurationManager';\r\nimport { GroupService } from '../../services/groupService';\r\nimport { GroupFullModel } from '../../models/group';\r\nimport { ItemComponent, ItemType } from '../../components/item/item';\r\nimport { LoadingComponent } from '../../components/loading/loading';\r\nimport { GroupsManageDialog } from './groupsManage';\r\nimport { AvatarChipComponent } from '../../components/avatar/avatar';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        '&:last-child': {\r\n            paddingBottom: theme.spacing(2)\r\n        }\r\n    },\r\n    title: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: 0\r\n    },\r\n    list: {\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nexport type GroupsProps = {};\r\n\r\nexport const GroupsPage: React.FC<GroupsProps> = React.memo(() => {\r\n    const { isReady } = React.useContext(userContext);\r\n\r\n    const classes = useStyles();\r\n    const [t] = useTranslation();\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n    const [data, setData] = React.useState<GroupFullModel[]>([]);\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [show, setShow] = React.useState<boolean>(false);\r\n    const [group, setGroup] = React.useState<GroupFullModel>();\r\n    const [reload, setReload] = React.useState<boolean>(true);\r\n    const [error, setError] = React.useState<string>('');\r\n\r\n    const handleEdit = React.useCallback(\r\n        async (id: number | string) => {\r\n            setGroup(data.find(x => x.id === id));\r\n            setShow(true);\r\n            return Promise.resolve();\r\n        },\r\n        [data]\r\n    );\r\n\r\n    const handleDelete = React.useCallback(\r\n        async (id: number | string) => {\r\n            return new GroupService(config)\r\n                .remove(id as number)\r\n                .then(() => {\r\n                    setReload(true);\r\n                })\r\n                .catch(() => setError(t('COMMON.ERROR')));\r\n        },\r\n        [config, t]\r\n    );\r\n\r\n    const handleAdd = React.useCallback(() => {\r\n        setGroup(undefined);\r\n        setShow(true);\r\n    }, []);\r\n\r\n    const handleAction = React.useCallback(() => {\r\n        setReload(true);\r\n        setShow(false);\r\n    }, []);\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        setShow(false);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!isReady) {\r\n            // not ready to requet\r\n            return;\r\n        }\r\n\r\n        if (reload) {\r\n            setReload(false);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        new GroupService(config)\r\n            .getFullAll()\r\n            .then(value => {\r\n                setData(value);\r\n            })\r\n            .catch(() => setError(t('COMMON.ERROR')))\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    }, [config, isReady, reload, t]);\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify=\"space-between\" alignItems=\"center\" className={classes.root} spacing={1}>\r\n                <Typography variant=\"h5\" className={classes.title}>\r\n                    {t('GROUPS.LIST.TITLE')}\r\n                </Typography>\r\n                <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={handleAdd}>\r\n                    {t('COMMON.ADD')}\r\n                </Button>\r\n            </Grid>\r\n            <Grid container justify=\"flex-start\" alignItems=\"center\" className={classes.root} spacing={1}>\r\n                <LoadingComponent showLoading={isLoading || !isReady} error={error}>\r\n                    <List className={classes.list}>\r\n                        {data.map(group => (\r\n                            <>\r\n                                <ItemComponent\r\n                                    key={group.id}\r\n                                    id={group.id}\r\n                                    title={group.name}\r\n                                    type={ItemType.Menu}\r\n                                    onEdit={handleEdit}\r\n                                    onDelete={handleDelete}\r\n                                >\r\n                                    <Grid container justify=\"flex-start\" alignItems=\"center\">\r\n                                        {group.users.map(u => (\r\n                                            <AvatarChipComponent key={`groups-page-${u.id}`} user={u} />\r\n                                        ))}\r\n                                    </Grid>\r\n                                </ItemComponent>\r\n                                <Divider />\r\n                            </>\r\n                        ))}\r\n                    </List>\r\n                </LoadingComponent>\r\n            </Grid>\r\n            <GroupsManageDialog group={group} show={show} onAction={handleAction} onClose={handleClose} />\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { GroupModel } from '../models/group';\r\n\r\ninterface GlobalContext {\r\n    isLoading: boolean;\r\n\r\n    groups: GroupModel[];\r\n    years: number[];\r\n\r\n    group?: GroupModel;\r\n    month: number;\r\n    year: number;\r\n}\r\n\r\nexport const globalContext = React.createContext<GlobalContext>({\r\n    isLoading: false,\r\n\r\n    groups: [],\r\n    years: [new Date().getFullYear()],\r\n\r\n    month: new Date().getMonth(),\r\n    year: new Date().getFullYear()\r\n});\r\n","import React, { memo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport queryString from 'query-string';\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionActions from '@material-ui/core/AccordionActions';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { GroupModel } from '../../models/group';\r\nimport { LoadingComponent, LoadingType } from '../loading/loading';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        title: {\r\n            maxWidth: 180\r\n        },\r\n        formControl: {\r\n            width: '100%'\r\n        },\r\n        details: {\r\n            alignItems: 'center'\r\n        }\r\n    })\r\n);\r\n\r\nexport type SearchProps = {\r\n    loading: boolean;\r\n\r\n    // data to fill\r\n    groups: GroupModel[];\r\n    years: number[];\r\n\r\n    // selected items\r\n    group?: GroupModel;\r\n    month: number;\r\n    year: number;\r\n};\r\n\r\nexport const SearchComponent: React.FC<SearchProps> = memo((props: SearchProps) => {\r\n    const classes = useStyles();\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const [t] = useTranslation();\r\n\r\n    const [isExpanded, setExpanded] = React.useState<boolean>(false);\r\n\r\n    const [groups, setGroups] = React.useState<GroupModel[]>(props.groups ?? []);\r\n    const [months] = React.useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\r\n    const [years, setYears] = React.useState<number[]>(props.years);\r\n\r\n    const [selectedGroup, setSelectedGroup] = React.useState<number | string>(props.group?.id ?? '');\r\n    const selectedGroupName = React.useMemo<string>(() => groups.find(x => x.id === selectedGroup)?.name ?? '', [\r\n        groups,\r\n        selectedGroup\r\n    ]);\r\n    const [selectedMonth, setSelectedMonth] = React.useState<number>(props.month);\r\n    const [selectedYear, setSelectedYear] = React.useState<number>(props.year);\r\n\r\n    const groupsMenuItems = React.useMemo(\r\n        () =>\r\n            groups.map(group => (\r\n                <option key={group.id} value={group.id}>\r\n                    {group.name}\r\n                </option>\r\n            )),\r\n        [groups]\r\n    );\r\n\r\n    const monthsMenuItems = React.useMemo(\r\n        () =>\r\n            months.map(month => (\r\n                <option key={month} value={month}>\r\n                    {t('SEARCH.MONTHS.' + month)}\r\n                </option>\r\n            )),\r\n        [months, t]\r\n    );\r\n\r\n    const yearsMenuItems = React.useMemo(\r\n        () =>\r\n            years.map(year => (\r\n                <option key={year} value={year}>\r\n                    {year}\r\n                </option>\r\n            )),\r\n        [years]\r\n    );\r\n\r\n    const handleChangeGroup = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setSelectedGroup(event.target.value as number);\r\n    }, []);\r\n\r\n    const handleChangeMonth = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setSelectedMonth(event.target.value as number);\r\n    }, []);\r\n\r\n    const handleChangeYear = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setSelectedYear(event.target.value as number);\r\n    }, []);\r\n\r\n    const handleChangeAccordion = React.useCallback((_event: object, expanded: boolean) => {\r\n        setExpanded(expanded);\r\n    }, []);\r\n\r\n    const handleAction = React.useCallback(() => {\r\n        setExpanded(false);\r\n\r\n        history.push({\r\n            pathname: location.pathname,\r\n            search: queryString.stringify({\r\n                group: selectedGroup,\r\n                month: selectedMonth,\r\n                year: selectedYear\r\n            })\r\n        });\r\n    }, [history, location, selectedGroup, selectedMonth, selectedYear]);\r\n\r\n    React.useEffect(() => {\r\n        // update internal stuff\r\n        setGroups(props.groups);\r\n        setYears(props.years);\r\n        setSelectedGroup(props.group?.id ?? '');\r\n        setSelectedMonth(props.month);\r\n        setSelectedYear(props.year);\r\n    }, [props.groups, props.years, props.group, props.month, props.year]);\r\n\r\n    return (\r\n        <>\r\n            <Accordion onChange={handleChangeAccordion} disabled={props.loading} expanded={isExpanded}>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon data-testid=\"expand-element\" />}\r\n                    aria-controls=\"panel1c-content\"\r\n                    id=\"panel1c-header\"\r\n                >\r\n                    <LoadingComponent showLoading={props.loading} size={25} type={LoadingType.linear}>\r\n                        {isExpanded && (\r\n                            <Typography variant=\"h6\">\r\n                                <strong>{t('SEARCH.TITLE')}</strong>\r\n                            </Typography>\r\n                        )}\r\n                        {!isExpanded && (\r\n                            <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"center\">\r\n                                <Typography variant=\"body1\" noWrap={true} className={classes.title}>\r\n                                    {selectedGroupName}\r\n                                </Typography>\r\n                                <Divider orientation=\"vertical\" flexItem />\r\n                                <Typography variant=\"body1\">{t('SEARCH.MONTHS.' + selectedMonth)}</Typography>\r\n                                <Divider orientation=\"vertical\" flexItem />\r\n                                <Typography variant=\"body1\">{selectedYear}</Typography>\r\n                            </Grid>\r\n                        )}\r\n                    </LoadingComponent>\r\n                </AccordionSummary>\r\n                <AccordionDetails className={classes.details}>\r\n                    <Grid container justify=\"center\" spacing={2}>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"group-select\">{t('COMMON.GROUP')}</InputLabel>\r\n                                <NativeSelect\r\n                                    id=\"group-select\"\r\n                                    defaultValue=\"\"\r\n                                    value={selectedGroup}\r\n                                    onChange={handleChangeGroup}\r\n                                >\r\n                                    {groupsMenuItems}\r\n                                </NativeSelect>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"month-label\">{t('COMMON.MONTH')}</InputLabel>\r\n                                <NativeSelect\r\n                                    id=\"month-select\"\r\n                                    defaultValue=\"\"\r\n                                    value={selectedMonth}\r\n                                    onChange={handleChangeMonth}\r\n                                >\r\n                                    {monthsMenuItems}\r\n                                </NativeSelect>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"year-select\">{t('COMMON.YEAR')}</InputLabel>\r\n                                <NativeSelect\r\n                                    id=\"year-select\"\r\n                                    defaultValue=\"\"\r\n                                    value={selectedYear}\r\n                                    onChange={handleChangeYear}\r\n                                >\r\n                                    {yearsMenuItems}\r\n                                </NativeSelect>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                </AccordionDetails>\r\n                <Divider />\r\n                <AccordionActions>\r\n                    <Button variant=\"contained\" color=\"primary\" startIcon={<SearchIcon />} onClick={handleAction}>\r\n                        {t('SEARCH.BUTTON')}\r\n                    </Button>\r\n                </AccordionActions>\r\n            </Accordion>\r\n        </>\r\n    );\r\n});\r\n","import { ServiceBase } from './serviceBase';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { LabelModel, LabelFullModel } from '../models/label';\r\n\r\nexport class LabelService extends ServiceBase {\r\n    private baseUrl = '/api/label';\r\n\r\n    constructor(protected config: AppConfig) {\r\n        super(config);\r\n    }\r\n\r\n    async getAll(): Promise<LabelModel[]> {\r\n        return await this.get<LabelModel[]>(this.baseUrl);\r\n    }\r\n\r\n    async getFullAll(group: number, month: number, year: number): Promise<LabelFullModel[]> {\r\n        return await this.get<LabelFullModel[]>(this.baseUrl + '/full', {\r\n            group,\r\n            month,\r\n            year\r\n        });\r\n    }\r\n\r\n    async add(group: number, label: LabelModel): Promise<LabelModel> {\r\n        return await this.post<LabelModel>(this.baseUrl, { group }, label);\r\n    }\r\n\r\n    async update(label: LabelModel): Promise<void> {\r\n        return await this.put<void>(this.baseUrl, {}, label);\r\n    }\r\n\r\n    async remove(id: number): Promise<void> {\r\n        return await this.delete<void>(this.baseUrl + '/' + id);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ConfigurationManager } from '../../configurations/configurationManager';\r\nimport { AppConfig } from '../../configurations/appConfig';\r\nimport { LabelFullModel } from '../../models/label';\r\nimport { DialogComponent } from '../../components/dialog/dialog';\r\nimport { hasValue } from '../../helpers/utilHelper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport { LabelService } from '../../services/labelService';\r\nimport { globalContext } from '../../contexts/globalContext';\r\n\r\nexport type LabelsManageProps = {\r\n    show: boolean;\r\n    label?: LabelFullModel;\r\n    onAction: () => void;\r\n    onClose: () => void;\r\n};\r\n\r\nexport const LabelsManagePage: React.FC<LabelsManageProps> = React.memo((props: LabelsManageProps) => {\r\n    const [t] = useTranslation();\r\n    const global = React.useContext(globalContext);\r\n\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n    const [title, setTitle] = React.useState<string>('');\r\n    const [button, setButton] = React.useState<string>('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [name, setName] = React.useState<string>('');\r\n\r\n    const handleChangeName = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\r\n        setName(value.target.value);\r\n    }, []);\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        setOpen(false);\r\n        props.onClose();\r\n    }, [props]);\r\n\r\n    const handleAction = React.useCallback(async () => {\r\n        if (hasValue(props.label)) {\r\n            return new LabelService(config)\r\n                .update({\r\n                    id: props.label?.id as number,\r\n                    name: name\r\n                })\r\n                .then(() => {\r\n                    props.onAction();\r\n                    handleClose();\r\n                });\r\n        } else {\r\n            return new LabelService(config)\r\n                .add(global.group?.id as number, {\r\n                    id: 0,\r\n                    name: name\r\n                })\r\n                .then(() => {\r\n                    props.onAction();\r\n                    handleClose();\r\n                });\r\n        }\r\n    }, [props, name, config, global.group, handleClose]);\r\n\r\n    React.useEffect(() => {\r\n        setOpen(props.show);\r\n\r\n        if (!props.show) {\r\n            // does not need to update anything\r\n            return;\r\n        }\r\n        if (hasValue(props.label)) {\r\n            const g = props.label as LabelFullModel;\r\n            setName(g.name);\r\n\r\n            setTitle(t('LABELS.MANAGE.EDIT.TITLE'));\r\n            setButton(t('COMMON.EDIT'));\r\n        } else {\r\n            setName('');\r\n\r\n            setTitle(t('LABELS.MANAGE.ADD.TITLE'));\r\n            setButton(t('COMMON.ADD'));\r\n        }\r\n    }, [props, config, t]);\r\n\r\n    return (\r\n        <>\r\n            <DialogComponent\r\n                show={open}\r\n                title={title}\r\n                actionText={button}\r\n                disableAction={!hasValue(name)}\r\n                onAction={handleAction}\r\n                onClose={handleClose}\r\n            >\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel htmlFor=\"name\">{t('COMMON.NAME')}</InputLabel>\r\n                            <Input required id=\"name\" onChange={handleChangeName} value={name} />\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogComponent>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nimport { SearchComponent } from '../../components/search/search';\r\nimport { globalContext } from '../../contexts/globalContext';\r\nimport { LabelService } from '../../services/labelService';\r\nimport { AppConfig } from '../../configurations/appConfig';\r\nimport { ConfigurationManager } from '../../configurations/configurationManager';\r\nimport { LabelFullModel } from '../../models/label';\r\nimport { LoadingComponent } from '../../components/loading/loading';\r\nimport { ItemComponent, ItemType } from '../../components/item/item';\r\nimport { userContext } from '../../contexts/userContext';\r\nimport { LabelsManagePage } from './labelsManage';\r\nimport { hasValue } from '../../helpers/utilHelper';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        '&:last-child': {\r\n            paddingBottom: theme.spacing(2)\r\n        }\r\n    },\r\n    title: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: 0\r\n    },\r\n    list: {\r\n        width: '100%'\r\n    },\r\n    listValues: {\r\n        flexGrow: 1\r\n    },\r\n    gridItem: {\r\n        marginTop: theme.spacing(2)\r\n    },\r\n    badge: {}\r\n}));\r\n\r\nexport type LabelsProps = {};\r\n\r\nexport const LabelsPage: React.FC<LabelsProps> = React.memo(() => {\r\n    const { isReady } = React.useContext(userContext);\r\n    const global = React.useContext(globalContext);\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n    const classes = useStyles();\r\n    const [t] = useTranslation();\r\n\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [data, setData] = React.useState<LabelFullModel[]>([]);\r\n    const [reload, setReload] = React.useState<boolean>(true);\r\n    const [error, setError] = React.useState<string>('');\r\n    const [label, setLabel] = React.useState<LabelFullModel>();\r\n    const [show, setShow] = React.useState<boolean>(false);\r\n\r\n    const handleEdit = React.useCallback(\r\n        async (id: number | string) => {\r\n            setLabel(data.find(x => x.id === id));\r\n            setShow(true);\r\n            return Promise.resolve();\r\n        },\r\n        [data]\r\n    );\r\n\r\n    const handleDelete = React.useCallback(\r\n        async (id: number | string) => {\r\n            return new LabelService(config)\r\n                .remove(id as number)\r\n                .then(() => {\r\n                    setReload(!reload);\r\n                })\r\n                .catch(() => setError(t('COMMON.ERROR')));\r\n        },\r\n        [config, reload, t]\r\n    );\r\n\r\n    const handleAdd = React.useCallback(() => {\r\n        setLabel(undefined);\r\n        setShow(true);\r\n    }, []);\r\n\r\n    const handleAction = React.useCallback(() => {\r\n        setReload(!reload);\r\n        setShow(false);\r\n    }, [reload]);\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        setShow(false);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!isReady || global.isLoading || !hasValue(global.group)) {\r\n            // not ready to requet\r\n            return;\r\n        }\r\n\r\n        // if (reload) {\r\n        //     setReload(false);\r\n        // } else {\r\n        //     return;\r\n        // }\r\n\r\n        console.log(global.group?.id as number, global.month, global.year);\r\n\r\n        setLoading(true);\r\n        new LabelService(config)\r\n            .getFullAll(global.group?.id as number, global.month, global.year)\r\n            .then(value => {\r\n                setData(value);\r\n            })\r\n            .catch(() => setError(t('COMMON.ERROR')))\r\n            .finally(() => setLoading(false));\r\n    }, [isReady, config, reload, t, global.isLoading, global.group, global.month, global.year]);\r\n\r\n    return (\r\n        <>\r\n            <SearchComponent\r\n                loading={global.isLoading}\r\n                groups={global.groups}\r\n                years={global.years}\r\n                group={global.group}\r\n                month={global.month}\r\n                year={global.year}\r\n            />\r\n            <Divider />\r\n            <Grid container justify=\"space-between\" alignItems=\"center\" className={classes.root} spacing={1}>\r\n                <Typography variant=\"h5\" className={classes.title}>\r\n                    {t('LABELS.LIST.TITLE')}\r\n                </Typography>\r\n                <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={handleAdd}>\r\n                    {t('COMMON.ADD')}\r\n                </Button>\r\n            </Grid>\r\n            <Grid container justify=\"flex-start\" alignItems=\"center\" className={classes.root} spacing={1}>\r\n                <LoadingComponent showLoading={isLoading || !isReady} error={error}>\r\n                    <List className={classes.list}>\r\n                        {data.map(label => (\r\n                            <>\r\n                                <ItemComponent\r\n                                    key={label.id}\r\n                                    id={label.id}\r\n                                    title={label.name}\r\n                                    type={ItemType.Menu}\r\n                                    onEdit={handleEdit}\r\n                                    onDelete={handleDelete}\r\n                                >\r\n                                    <Grid\r\n                                        container\r\n                                        justify=\"space-around\"\r\n                                        alignItems=\"center\"\r\n                                        className={classes.gridItem}\r\n                                    >\r\n                                        <Badge\r\n                                            color={label.currValue >= 0 ? 'primary' : 'secondary'}\r\n                                            max={9999}\r\n                                            badgeContent={label.currValue.toFixed(0)}\r\n                                            className={classes.badge}\r\n                                        >\r\n                                            <Typography variant=\"caption\">Value</Typography>\r\n                                        </Badge>\r\n                                        <Divider orientation=\"vertical\" flexItem />\r\n\r\n                                        <Badge\r\n                                            color={label.lastValue >= 0 ? 'primary' : 'secondary'}\r\n                                            max={9999}\r\n                                            badgeContent={label.lastValue.toFixed(0)}\r\n                                        >\r\n                                            <Typography variant=\"caption\">Last</Typography>\r\n                                        </Badge>\r\n                                        <Divider orientation=\"vertical\" flexItem />\r\n\r\n                                        <Badge\r\n                                            color={label.avgValue >= 0 ? 'primary' : 'secondary'}\r\n                                            max={9999}\r\n                                            badgeContent={label.avgValue.toFixed(0)}\r\n                                        >\r\n                                            <Typography variant=\"caption\">Average</Typography>\r\n                                        </Badge>\r\n                                    </Grid>\r\n                                </ItemComponent>\r\n                            </>\r\n                        ))}\r\n                    </List>\r\n                </LoadingComponent>\r\n            </Grid>\r\n            <LabelsManagePage label={label} show={show} onAction={handleAction} onClose={handleClose} />\r\n        </>\r\n    );\r\n});\r\n","import { ServiceBase } from './serviceBase';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { ExpenseModel, ExpenseFullModel } from '../models/expense';\r\n\r\nexport class ExpenseService extends ServiceBase {\r\n    private baseUrl = '/api/expense';\r\n\r\n    constructor(protected config: AppConfig) {\r\n        super(config);\r\n    }\r\n\r\n    async getAll(): Promise<ExpenseModel[]> {\r\n        return await this.get<ExpenseModel[]>(this.baseUrl);\r\n    }\r\n\r\n    async getFullAll(group: number, month: number, year: number): Promise<ExpenseFullModel[]> {\r\n        return await this.get<ExpenseFullModel[]>(this.baseUrl + '/full', {\r\n            group,\r\n            month,\r\n            year\r\n        });\r\n    }\r\n\r\n    async add(obj: Partial<ExpenseModel>): Promise<ExpenseModel> {\r\n        return await this.post<ExpenseModel>(this.baseUrl, {}, obj);\r\n    }\r\n\r\n    async update(obj: ExpenseModel): Promise<void> {\r\n        return await this.put<void>(this.baseUrl, {}, obj);\r\n    }\r\n\r\n    async remove(id: number): Promise<void> {\r\n        return await this.delete<void>(this.baseUrl + '/' + id);\r\n    }\r\n}\r\n","import React, { memo, useState, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router';\n\nimport TextField from '@material-ui/core/TextField';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\n\nimport { loginWithEmail, createUserWithEmail, resetPassword } from '../../services/authService';\nimport { Routes } from '../routes';\nimport { hasValue } from '../../helpers/utilHelper';\n\nexport enum LoginPageType {\n    LOGIN = 'LOGIN',\n    REGISTER = 'REGISTER',\n    RESET = 'RESET'\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '& .MuiTextField-root': {\n                margin: theme.spacing(1),\n                width: '25ch'\n            }\n        }\n    })\n);\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport interface LoginProps {\n    type: LoginPageType;\n}\n\nexport const LoginPage: React.FC<LoginProps> = memo((props: LoginProps) => {\n    const classes = useStyles();\n    const [t] = useTranslation();\n    const history = useHistory();\n\n    const [error, setError] = useState<string>();\n    const [email, setEmail] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n    const disableAction = useMemo(\n        () => (props.type === LoginPageType.RESET ? !hasValue(email) : !(hasValue(email) && hasValue(password))),\n        [email, password, props.type]\n    );\n\n    const handleChangeEmail = useCallback((value: any) => {\n        setEmail(value.target.value);\n    }, []);\n    const handleChangePassword = useCallback((value: any) => {\n        setPassword(value.target.value);\n    }, []);\n\n    const [isLoading, setLoading] = useState<boolean>(false);\n\n    const handleAction = useCallback(async () => {\n        setLoading(true);\n        setError(undefined);\n\n        let promise: Promise<void>;\n        switch (props.type) {\n            case LoginPageType.LOGIN:\n                promise = loginWithEmail(email, password);\n                break;\n            case LoginPageType.REGISTER:\n                promise = createUserWithEmail(email, password);\n                break;\n            case LoginPageType.RESET:\n                promise = resetPassword(email);\n                break;\n        }\n        promise\n            .then(() => {\n                setTimeout(() => history.push(Routes.home));\n            })\n            .catch(error => {\n                setError(error.message);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [email, password, history, props.type]);\n\n    const [title, button] = useMemo(() => {\n        return [t(`AUTH.${props.type}.TITLE`), t(`AUTH.${props.type}.BUTTON`)];\n    }, [props.type, t]);\n\n    return (\n        <>\n            <Card>\n                <CardHeader title={title} />\n                <CardContent>\n                    {hasValue(error) && <Alert severity=\"error\">{error}</Alert>}\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <Grid container>\n                            <Grid container item xs={12}>\n                                <TextField\n                                    required\n                                    id={`${props.type}-email-required`}\n                                    label={t('AUTH.EMAIL')}\n                                    disabled={isLoading}\n                                    value={email}\n                                    onChange={handleChangeEmail}\n                                />\n                            </Grid>\n                            {props.type !== LoginPageType.RESET && (\n                                <Grid container item xs={12}>\n                                    <TextField\n                                        required\n                                        id={`${props.type}-password-required`}\n                                        label={t('AUTH.PASSWORD')}\n                                        type=\"password\"\n                                        disabled={isLoading}\n                                        value={password}\n                                        onChange={handleChangePassword}\n                                    />\n                                </Grid>\n                            )}\n                        </Grid>\n                    </form>\n                </CardContent>\n                <CardActions>\n                    <Button\n                        id={`${props.type}-action`}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"small\"\n                        endIcon={isLoading && <CircularProgress size={12} />}\n                        disabled={isLoading || disableAction}\n                        onClick={handleAction}\n                    >\n                        {button}\n                    </Button>\n                </CardActions>\n            </Card>\n        </>\n    );\n});\n","import React from 'react';\r\nimport { DateType } from '@date-io/type';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Input from '@material-ui/core/Input';\r\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nimport { ExpenseFullModel, ExpenseType } from '../../models/expense';\r\nimport { globalContext } from '../../contexts/globalContext';\r\nimport { ConfigurationManager } from '../../configurations/configurationManager';\r\nimport { AppConfig } from '../../configurations/appConfig';\r\nimport { DialogComponent } from '../../components/dialog/dialog';\r\nimport { hasValue } from '../../helpers/utilHelper';\r\nimport { ExpenseService } from '../../services/expenseService';\r\n\r\nexport type ExpensesManageProps = {\r\n    show: boolean;\r\n    expense?: ExpenseFullModel;\r\n    onAction: () => void;\r\n    onClose: () => void;\r\n};\r\n\r\nexport const ExpensesManagePage: React.FC<ExpensesManageProps> = React.memo((props: ExpensesManageProps) => {\r\n    const [t] = useTranslation();\r\n    const global = React.useContext(globalContext);\r\n\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n    const [title, setTitle] = React.useState<string>('');\r\n    const [button, setButton] = React.useState<string>('');\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const [name, setName] = React.useState<string>('');\r\n    const [type, setType] = React.useState<ExpenseType>(ExpenseType.Outcoming);\r\n    const [value, setValue] = React.useState<number>();\r\n    const [date, setDate] = React.useState<DateType | null>(new Date());\r\n    const [comments, setComments] = React.useState<string>();\r\n\r\n    const handleChangeType = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setType(+(event.target as HTMLInputElement).value as ExpenseType);\r\n    };\r\n\r\n    const handleChangeName = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\r\n        setName(value.target.value);\r\n    }, []);\r\n\r\n    const handleChangeValue = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\r\n        if (+value.target.value === 0) {\r\n            setValue(undefined);\r\n        } else {\r\n            setValue(+value.target.value);\r\n        }\r\n    }, []);\r\n\r\n    const handleChangeDate = (date: DateType | null) => {\r\n        setDate(date);\r\n    };\r\n\r\n    const handleChangeComments = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\r\n        setComments(value.target.value);\r\n    }, []);\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        setOpen(false);\r\n        props.onClose();\r\n    }, [props]);\r\n\r\n    const handleAction = React.useCallback(async () => {\r\n        if (hasValue(props.expense)) {\r\n            // return new ExpenseService(config)\r\n            //     .update({\r\n            //         id: props.label?.id as number,\r\n            //         name: name\r\n            //     })\r\n            //     .then(() => {\r\n            //         props.onAction();\r\n            //         handleClose();\r\n            //     });\r\n        } else {\r\n            return new ExpenseService(config)\r\n                .add({\r\n                    name: name,\r\n                    type: type,\r\n                    comments: comments as string,\r\n                    date: date as Date,\r\n                    groupId: global.group?.id as number,\r\n                    labelId: 422, // TODO\r\n                    value: value as number\r\n                })\r\n                .then(() => {\r\n                    props.onAction();\r\n                    handleClose();\r\n                });\r\n        }\r\n    }, [props, type, date, name, value, comments, config, global.group, handleClose]);\r\n\r\n    React.useEffect(() => {\r\n        setOpen(props.show);\r\n\r\n        if (!props.show) {\r\n            // does not need to update anything\r\n            return;\r\n        }\r\n        if (hasValue(props.expense)) {\r\n            const e = props.expense as ExpenseFullModel;\r\n            setType(e.type);\r\n            setDate(e.date);\r\n            setName(e.name);\r\n            setValue(e.value);\r\n            setComments(e.comments);\r\n\r\n            setTitle(t('EXPENSES.MANAGE.EDIT.TITLE'));\r\n            setButton(t('COMMON.EDIT'));\r\n        } else {\r\n            setType(ExpenseType.Outcoming);\r\n            setDate(new Date());\r\n            setName('');\r\n            setValue(undefined);\r\n            setComments('');\r\n\r\n            setTitle(t('EXPENSES.MANAGE.ADD.TITLE'));\r\n            setButton(t('COMMON.ADD'));\r\n        }\r\n    }, [props, config, t]);\r\n    return (\r\n        <>\r\n            <DialogComponent\r\n                show={open}\r\n                title={title}\r\n                actionText={button}\r\n                disableAction={!hasValue(name)}\r\n                onAction={handleAction}\r\n                onClose={handleClose}\r\n            >\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel required component=\"label\">\r\n                                {t('COMMON.TYPE')}\r\n                            </FormLabel>\r\n                            <RadioGroup aria-label=\"type\" name=\"type\" value={type} onChange={handleChangeType}>\r\n                                <FormControlLabel\r\n                                    value={ExpenseType.Incoming}\r\n                                    control={<Radio size=\"small\" />}\r\n                                    label={t('COMMON.INCOMING')}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value={ExpenseType.Outcoming}\r\n                                    control={<Radio size=\"small\" />}\r\n                                    label={t('COMMON.OUTCOMING')}\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <DatePicker\r\n                                required\r\n                                autoOk\r\n                                // showTodayButton\r\n                                format=\"dd/MM/yyyy\"\r\n                                label={t('COMMON.DATE')}\r\n                                value={date}\r\n                                onChange={handleChangeDate}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel htmlFor=\"name\" required>\r\n                                {t('COMMON.NAME')}\r\n                            </InputLabel>\r\n                            <Input required id=\"name\" onChange={handleChangeName} value={name} />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel htmlFor=\"value\" required>\r\n                                {t('COMMON.VALUE')}\r\n                            </InputLabel>\r\n                            <Input required type=\"number\" id=\"value\" onChange={handleChangeValue} value={value} />\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel htmlFor=\"comments\">{t('COMMON.COMMENTS')}</InputLabel>\r\n                            <Input multiline id=\"comments\" onChange={handleChangeComments} value={comments} />\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogComponent>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport LabelIcon from '@material-ui/icons/Label';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport TodayIcon from '@material-ui/icons/Today';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\n\nimport { globalContext } from '../../contexts/globalContext';\nimport { SearchComponent } from '../../components/search/search';\nimport { hasValue } from '../../helpers/utilHelper';\nimport { userContext } from '../../contexts/userContext';\nimport { ExpenseFullModel, ExpenseType } from '../../models/expense';\nimport { AppConfig } from '../../configurations/appConfig';\nimport { ConfigurationManager } from '../../configurations/configurationManager';\nimport { ExpenseService } from '../../services/expenseService';\nimport { ExpensesManagePage } from './expensesManage';\nimport { LoadingComponent } from '../../components/loading/loading';\nimport { ItemType, ItemComponent } from '../../components/item/item';\nimport { format } from 'date-fns';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        '&:last-child': {\n            paddingBottom: theme.spacing(2)\n        }\n    },\n    title: {\n        margin: theme.spacing(2),\n        marginLeft: 0\n    },\n    list: {\n        width: '100%'\n    },\n    listValues: {\n        flexGrow: 1\n    },\n    separatorTitle: {\n        margin: theme.spacing(1)\n    }\n}));\n\nexport type ExpensesProps = {};\n\nexport const ExpensesPage: React.FC<ExpensesProps> = React.memo(() => {\n    const global = React.useContext(globalContext);\n    const { isReady } = React.useContext(userContext);\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\n    const classes = useStyles();\n    const [t] = useTranslation();\n\n    const [isLoading, setLoading] = React.useState<boolean>(false);\n    const [data, setData] = React.useState<ExpenseFullModel[]>([]);\n    const [reload, setReload] = React.useState<boolean>(true);\n    const [error, setError] = React.useState<string>('');\n    const [expense, setExpense] = React.useState<ExpenseFullModel>();\n    const [show, setShow] = React.useState<boolean>(false);\n\n    const calculateTotal = React.useCallback(\n        (type: ExpenseType) =>\n            data\n                .filter(expense => expense.type === type)\n                .reduce((sum, current) => sum + current.value, 0)\n                .toFixed(2),\n        [data]\n    );\n\n    const calculateSize = React.useCallback(\n        (type: ExpenseType) => data.filter(expense => expense.type === type).length,\n        [data]\n    );\n\n    const handleEdit = React.useCallback(\n        async (id: number | string) => {\n            setExpense(data.find(x => x.id === id));\n            setShow(true);\n            return Promise.resolve();\n        },\n        [data]\n    );\n\n    const handleDelete = React.useCallback(\n        async (id: number | string) => {\n            return new ExpenseService(config)\n                .remove(id as number)\n                .then(() => {\n                    setReload(!reload);\n                })\n                .catch(() => setError(t('COMMON.ERROR')));\n        },\n        [config, reload, t]\n    );\n\n    const handleAdd = React.useCallback(() => {\n        setExpense(undefined);\n        setShow(true);\n    }, []);\n\n    const handleAction = React.useCallback(() => {\n        setReload(!reload);\n        setShow(false);\n    }, [reload]);\n\n    const handleClose = React.useCallback(() => {\n        setShow(false);\n    }, []);\n\n    React.useEffect(() => {\n        if (!isReady || global.isLoading || !hasValue(global.group)) {\n            // not ready to requet\n            return;\n        }\n\n        // if (reload) {\n        //     setReload(false);\n        // } else {\n        //     return;\n        // }\n\n        setLoading(true);\n        new ExpenseService(config)\n            .getFullAll(global.group?.id as number, global.month, global.year)\n            .then(value => {\n                setData(value);\n            })\n            .catch(() => setError(t('COMMON.ERROR')))\n            .finally(() => setLoading(false));\n    }, [isReady, config, reload, t, global.isLoading, global.group, global.month, global.year]);\n\n    return (\n        <>\n            <SearchComponent\n                loading={global.isLoading}\n                groups={global.groups}\n                years={global.years}\n                group={global.group}\n                month={global.month}\n                year={global.year}\n            />\n            <Divider />\n            <Grid container justify=\"space-between\" alignItems=\"center\" className={classes.root} spacing={1}>\n                <Typography variant=\"h5\" className={classes.title}>\n                    {t('EXPENSES.LIST.TITLE')}\n                </Typography>\n                <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={handleAdd}>\n                    {t('COMMON.ADD')}\n                </Button>\n            </Grid>\n\n            <Grid container justify=\"flex-start\" alignItems=\"center\" className={classes.root} spacing={1}>\n                <LoadingComponent showLoading={isLoading || !isReady} error={error}>\n                    <Paper className={classes.list} elevation={0}>\n                        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n                            <Typography variant=\"body1\" className={classes.separatorTitle}>\n                                {t('COMMON.INCOMING')}\n                            </Typography>\n                            <Typography variant=\"body1\" className={classes.separatorTitle}>\n                                {`${t('COMMON.TOTAL')}: ${calculateTotal(ExpenseType.Incoming)}`}\n                            </Typography>\n                            <Typography variant=\"body2\" className={classes.separatorTitle}>\n                                {`#${calculateSize(ExpenseType.Incoming)}`}\n                            </Typography>\n                        </Grid>\n                    </Paper>\n\n                    <List className={classes.list}>\n                        {data\n                            .filter(expense => expense.type === ExpenseType.Incoming)\n                            .map(expense => (\n                                <>\n                                    <ItemComponent\n                                        key={expense.id}\n                                        id={expense.id}\n                                        title={expense.name}\n                                        type={ItemType.Menu}\n                                        onEdit={handleEdit}\n                                        onDelete={handleDelete}\n                                    >\n                                        <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"center\">\n                                            <Button startIcon={<TodayIcon />}>\n                                                {format(new Date(expense.date), t('COMMON.DATE_FORMAT'))}\n                                            </Button>\n                                            <Button startIcon={<LabelIcon />}>{expense.label.name}</Button>\n                                            <Button startIcon={<AccountBalanceWalletIcon />}>\n                                                {expense.value.toFixed(2)}\n                                            </Button>\n                                        </Grid>\n                                    </ItemComponent>\n                                </>\n                            ))}\n                    </List>\n\n                    <Paper className={classes.list}>\n                        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n                            <Typography variant=\"body1\" className={classes.separatorTitle}>\n                                {t('COMMON.OUTCOMING')}\n                            </Typography>\n                            <Typography variant=\"body1\" className={classes.separatorTitle}>\n                                {`${t('COMMON.TOTAL')}: ${calculateTotal(ExpenseType.Outcoming)}`}\n                            </Typography>\n                            <Typography variant=\"body2\" className={classes.separatorTitle}>\n                                {`#${calculateSize(ExpenseType.Outcoming)}`}\n                            </Typography>\n                        </Grid>\n                    </Paper>\n\n                    <List className={classes.list}>\n                        {data\n                            .filter(expense => expense.type === ExpenseType.Outcoming)\n                            .map(expense => (\n                                <>\n                                    <ItemComponent\n                                        key={expense.id}\n                                        id={expense.id}\n                                        title={expense.name}\n                                        type={ItemType.Menu}\n                                        onEdit={handleEdit}\n                                        onDelete={handleDelete}\n                                    >\n                                        <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"center\">\n                                            <Button startIcon={<TodayIcon />}>\n                                                {format(new Date(expense.date), t('COMMON.DATE_FORMAT'))}\n                                            </Button>\n                                            <Button startIcon={<LabelIcon />}>{expense.label.name}</Button>\n                                            <Button startIcon={<AccountBalanceWalletIcon />}>{expense.value}</Button>\n                                        </Grid>\n                                    </ItemComponent>\n                                </>\n                            ))}\n                    </List>\n                </LoadingComponent>\n            </Grid>\n            <ExpensesManagePage expense={expense} show={show} onAction={handleAction} onClose={handleClose} />\n        </>\n    );\n});\n","import React, { memo, useCallback, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { loginWithFacebook } from '../../services/authService';\r\nimport { Routes } from '../routes';\r\n\r\nexport type FacebookProps = {};\r\n\r\nexport const FacebookPage: React.FC<FacebookProps> = memo(() => {\r\n    const [t] = useTranslation();\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n    const [hasError, setError] = useState<boolean>(false);\r\n\r\n    const handleFacebook = useCallback(async () => {\r\n        setLoading(true);\r\n        setError(false);\r\n        try {\r\n            await loginWithFacebook();\r\n            setTimeout(() => history.push(Routes.home));\r\n        } catch (error) {\r\n            setError(true);\r\n            // console.error(error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [history]);\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<FacebookIcon />}\r\n                onClick={handleFacebook}\r\n                endIcon={\r\n                    <>\r\n                        {isLoading && <CircularProgress size={15} />}\r\n                        {hasError && <CloseIcon color=\"secondary\" data-testid=\"facebook-close-icon\" />}\r\n                    </>\r\n                }\r\n                disabled={isLoading}\r\n            >\r\n                {t('AUTH.FACEBOOK.BUTTON')}\r\n            </Button>\r\n        </>\r\n    );\r\n});\r\n","import React, { memo } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nimport { LoginPage, LoginPageType } from './loginPage';\nimport { FacebookPage } from './facebookPage';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        center: {\n            textAlign: 'center'\n        }\n    })\n);\n\nexport const AuthPage: React.FC = memo(() => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"flex-start\" spacing={3}>\n                <Grid item xs={12} className={classes.center}>\n                    <FacebookPage />\n                </Grid>\n                {Object.values(LoginPageType).map((value: LoginPageType) => (\n                    <Grid item xs={12} sm={6} md={4}>\n                        <LoginPage type={value} />\n                    </Grid>\n                ))}\n            </Grid>\n        </div>\n    );\n});\n","import React from 'react';\r\nimport { Switch, Route, useHistory, useLocation } from 'react-router';\r\nimport queryString from 'query-string';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { GroupModel } from '../models/group';\r\nimport { SearchModel } from '../models/search';\r\nimport { GroupService } from '../services/groupService';\r\nimport { PrivateRoute } from '../helpers/privateRouter';\r\nimport { Routes } from './routes';\r\nimport { GroupsPage } from './groups/groups';\r\nimport { globalContext } from '../contexts/globalContext';\r\nimport { LabelsPage } from './labels/labels';\r\nimport { ExpensesPage } from './expenses/expenses';\r\nimport { AuthPage } from './auth/authPage';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { ConfigurationManager } from '../configurations/configurationManager';\r\nimport { hasValue } from '../helpers/utilHelper';\r\nimport { userContext } from '../contexts/userContext';\r\n\r\nexport const Main: React.FC = React.memo(() => {\r\n    const { isReady } = React.useContext(userContext);\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n\r\n    const [groups, setGroups] = React.useState<GroupModel[]>([]);\r\n    const [years] = React.useState<number[]>([new Date().getFullYear()]);\r\n    const [group, setGroup] = React.useState<GroupModel>();\r\n    const [month, setMonth] = React.useState<number>(new Date().getMonth());\r\n    const [year, setYear] = React.useState<number>(new Date().getFullYear());\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        if (!isReady) {\r\n            return;\r\n        }\r\n\r\n        const jsonString = JSON.stringify(queryString.parse(location.search));\r\n        const searchParams = JSON.parse(jsonString) as SearchModel;\r\n        setLoading(true);\r\n\r\n        const setup = async () => {\r\n            let groupsResults: GroupModel[];\r\n            let groupResults: GroupModel | undefined;\r\n            let monthResults: number;\r\n            let yearResults: number;\r\n\r\n            if (groups.length > 0) {\r\n                groupsResults = groups;\r\n            } else {\r\n                try {\r\n                    groupsResults = await new GroupService(config).getAll();\r\n                } catch {\r\n                    groupsResults = [];\r\n                }\r\n            }\r\n\r\n            const lastGroup = localStorage.getItem('group') as string;\r\n            setGroups(groupsResults);\r\n            if (hasValue(searchParams.group) && groupsResults.some(x => x.id === +searchParams.group)) {\r\n                groupResults = groupsResults.find(x => x.id === +searchParams.group) as GroupModel;\r\n            } else if (hasValue(lastGroup) && groupsResults.some(x => x.id === +lastGroup)) {\r\n                groupResults = groupsResults.find(x => x.id === +lastGroup) as GroupModel;\r\n            } else if (hasValue(groupsResults)) {\r\n                groupResults = groupsResults[0];\r\n            } else {\r\n                // groupResults = {} as Partial<GroupModel>;\r\n                // show error - does not have groups loaded\r\n            }\r\n            setGroup(groupResults);\r\n            localStorage.setItem('group', groupResults?.id.toString() as string);\r\n\r\n            const lastMonth = localStorage.getItem('month') as string;\r\n            if (hasValue(searchParams.month) && searchParams.month >= 1 && searchParams.month <= 12) {\r\n                monthResults = searchParams.month;\r\n            } else if (hasValue(lastMonth) && +lastMonth >= 1 && +lastMonth <= 12) {\r\n                monthResults = +lastMonth;\r\n            } else {\r\n                monthResults = new Date().getMonth();\r\n            }\r\n            setMonth(monthResults);\r\n            localStorage.setItem('month', monthResults.toString());\r\n\r\n            // TODO get years from expenses\r\n            const lastYear = localStorage.getItem('year') as string;\r\n            if (hasValue(searchParams.year)) {\r\n                yearResults = searchParams.year;\r\n            } else if (hasValue(lastYear)) {\r\n                yearResults = +lastYear;\r\n            } else {\r\n                yearResults = new Date().getFullYear();\r\n            }\r\n            setYear(yearResults);\r\n            localStorage.setItem('year', yearResults.toString());\r\n\r\n            console.log(history, location);\r\n\r\n            history.push({\r\n                pathname: location.pathname,\r\n                search: queryString.stringify({\r\n                    group: groupResults?.id,\r\n                    month: monthResults,\r\n                    year: yearResults\r\n                })\r\n            });\r\n\r\n            setLoading(false);\r\n        };\r\n        setup();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [config, location.search, isReady]);\r\n\r\n    return (\r\n        <>\r\n            <globalContext.Provider\r\n                value={{\r\n                    isLoading: isLoading,\r\n                    groups: groups,\r\n                    years: years,\r\n                    group: group,\r\n                    month: month,\r\n                    year: year\r\n                }}\r\n            >\r\n                <Switch>\r\n                    <PrivateRoute path={Routes.groups} component={GroupsPage} />\r\n                    <PrivateRoute path={Routes.labels} component={LabelsPage} />\r\n                    <PrivateRoute path={Routes.expenses} component={ExpensesPage} />\r\n\r\n                    <Route path={Routes.auth} component={AuthPage} />\r\n                    <Route exact path={Routes.home}>\r\n                        <>\r\n                            <Typography variant=\"h3\">HOME</Typography>\r\n                            <Typography variant=\"h6\">Build Version: {config.buildVersion}</Typography>\r\n                        </>\r\n                    </Route>\r\n                    <Route path=\"*\">\r\n                        <h1> 404 </h1>\r\n                    </Route>\r\n                </Switch>\r\n            </globalContext.Provider>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nimport { makeStyles, Theme, createStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Container from '@material-ui/core/Container';\n\nimport { Header } from '../components/header/header';\nimport { ConfigurationManager } from '../configurations/configurationManager';\nimport { AppConfig } from '../configurations/appConfig';\nimport { hasValue } from '../helpers/utilHelper';\nimport { userContext } from '../contexts/userContext';\nimport { useAuth } from '../services/authService';\nimport { UserService } from '../services/userService';\nimport { UserModel } from '../models/user';\nimport { LoadingComponent } from '../components/loading/loading';\nimport { Main } from './main';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        container: {\n            flexGrow: 1,\n            marginTop: 10\n        }\n    })\n);\n\nconst Application: React.FC = React.memo(() => {\n    const classes = useStyles();\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\n    const { user, initialising } = useAuth();\n    const [isReady, setReady] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        if (initialising || !user) {\n            return;\n        }\n\n        if (hasValue(user)) {\n            user.getIdTokenResult().then((value: any) => {\n                axios.defaults.headers.common.Authorization = value.token;\n                new UserService(config).addOrUpdate({\n                    id: user.uid,\n                    email: user.email,\n                    displayName: user.displayName,\n                    photoUrl: user.photoURL\n                } as UserModel);\n                setReady(true);\n            });\n        }\n    }, [user, initialising, config]);\n\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    type: prefersDarkMode ? 'dark' : 'light'\n                },\n                typography: {\n                    button: {\n                        textTransform: 'none'\n                    }\n                }\n            }),\n        [prefersDarkMode]\n    );\n\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <userContext.Provider\n                    value={{\n                        user: user,\n                        initialising: initialising,\n                        isReady: isReady\n                    }}\n                >\n                    <BrowserRouter basename={process.env.PUBLIC_URL ?? undefined}>\n                        <Header />\n                        <Container maxWidth=\"md\" className={classes.container}>\n                            <LoadingComponent showLoading={initialising}>\n                                <Main />\n                            </LoadingComponent>\n                        </Container>\n                    </BrowserRouter>\n                </userContext.Provider>\n            </ThemeProvider>\n        </>\n    );\n});\n\nexport const App = Application;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const firebaseConfig = {\r\n    apiKey: 'AIzaSyAVfjm2M_d7mmVbD4kOwVWxp57CQZV8jqQ',\r\n    authDomain: 'myexpenses-6e402.firebaseapp.com',\r\n    databaseURL: 'https://myexpenses-6e402.firebaseio.com',\r\n    projectId: 'myexpenses-6e402',\r\n    storageBucket: 'myexpenses-6e402',\r\n    messagingSenderId: 'my-sender-id'\r\n};\r\n\r\nexport default firebaseConfig;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initializeApp } from 'firebase/app';\n\nimport './index.scss';\nimport './configurations/i18n';\n\nimport { App } from './pages/App';\nimport * as serviceWorker from './serviceWorker';\nimport { setConfiguration } from './configurations/configurationManager';\nimport firebaseConfig from './configurations/firebase';\n\nsetConfiguration();\n\n// initialize firebase\ninitializeApp({ ...firebaseConfig });\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}