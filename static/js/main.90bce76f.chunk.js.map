{"version":3,"sources":["serviceWorker.ts","configurations/i18n.ts","models/config.ts","helpers/util.ts","configurations/configManager.ts","pages/routes.ts","components/header/header.tsx","pages/auth/auth.tsx","components/search/search.tsx","mockData/group.ts","pages/expense/expense.tsx","pages/globalSyles.js","configurations/firebase.ts","pages/group/group.tsx","pages/label/label.tsx","pages/settings/settings.tsx","pages/theme.ts","pages/app.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","resources","en","translation","i18n","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","ApiType","hasValue","value","undefined","Array","isArray","length","getValueOrDefault","values","find","x","ConfigModel","apiUrl","buildVersion","requestDelay","firebaseApiKey","firebaseProject","ConfigManager","configurationObject","config","get","configurationSettings","Object","assign","set","ApplicationConfiguration","freeze","Routes","home","auth","settings","group","label","expense","HeaderComponent","React","memo","props","history","useHistory","useTranslation","t","handleRedirectTo","useCallback","path","push","Navbar","bg","variant","expand","Container","Brand","onClick","Toggle","aria-controls","Collapse","id","className","Nav","Link","NavDropdown","title","Item","href","Divider","AuthPage","SearchComponent","useState","months","setGroup","month","setMonth","year","setYear","useEffect","handleOnChangeGroup","event","target","handleOnChangeMonth","handleOnChangeYear","handleOnSearch","console","log","groupsOptions","useMemo","groups","map","key","name","monthsOptions","yearsOptions","years","defaultValue","onChange","type","groupsMockData","ExpensePage","searchProps","projectId","GlobalStyles","createGlobalStyle","theme","body","text","GroupPage","LabelPage","SettingsPage","lightTheme","toggleBorder","gradient","darkTheme","AppPage","_props","isDarkMode","matchMedia","matches","basename","component","exact","overrides","configDefault","process","REACT_APP_API_URL","setConfiguration","initializeApp","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90bce76f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport translationEN from '../locales/en.json';\r\n\r\nconst resources = {\r\n    en: {\r\n        translation: translationEN\r\n    }\r\n};\r\n\r\ni18n.use(initReactI18next) // passes i18n down to react-i18next\r\n    .init({\r\n        resources,\r\n        lng: 'en',\r\n        fallbackLng: 'en', // use en if detected lng is not available\r\n\r\n        // keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n        interpolation: {\r\n            escapeValue: false // react already safes from xss\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n","export enum ApiType {\r\n    FIREBASE = 'FIREBASE',\r\n    LOCAL_STORAGE = 'LOCAL_STORAGE',\r\n    TOTAL_FAKE = 'TOTAL_FAKE'\r\n}\r\n\r\nexport class ConfigModel {\r\n    /** api backend url */\r\n    apiUrl: string = 'localhost';\r\n\r\n    /** build version */\r\n    buildVersion: string = 'local';\r\n\r\n    /** request delay time */\r\n    requestDelay: number = 2000;\r\n\r\n    /** firebase */\r\n    firebaseApiKey: string = 'AIzaSyDMDE7eTQbjwkQglMJf5KnFtMr48-pAoVM';\r\n    firebaseProject: string = 'lfmachadodasilva-dev';\r\n}\r\n","export const hasValue = (value: any): boolean => {\r\n    if (value === null || value === undefined) {\r\n        return false;\r\n    }\r\n\r\n    if (typeof value === 'string' || Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n// export const getValueOrDefault = (value?: string, defaultValue?: string) => {\r\n//     return hasValue(value) ? value : defaultValue;\r\n// };\r\n\r\nexport const getValueOrDefault = (...values: any[]) => {\r\n    return values.find(x => hasValue(x));\r\n};\r\n","import config, { Options } from 'react-global-configuration';\r\n\r\nimport { getValueOrDefault } from '../helpers/util';\r\nimport { ConfigModel } from '../models/config';\r\n\r\nexport class ConfigManager {\r\n    static set = (configurationSettings: ConfigModel) => {\r\n        config.set({ ApplicationConfiguration: configurationSettings }, { freeze: false } as Options);\r\n    };\r\n\r\n    static get(): ConfigModel {\r\n        const configurationObject = config.get('ApplicationConfiguration');\r\n\r\n        const configurationSettings = new ConfigModel();\r\n        Object.assign(configurationSettings, configurationObject);\r\n\r\n        return configurationSettings;\r\n    }\r\n}\r\n\r\nexport const setConfiguration = (overrides: Partial<ConfigModel> = {}): ConfigModel => {\r\n    let configDefault: ConfigModel = new ConfigModel();\r\n\r\n    configDefault = {\r\n        ...configDefault,\r\n        buildVersion: getValueOrDefault(\r\n            process.env.REACT_APP_BUILD_VERSION,\r\n            overrides.buildVersion,\r\n            configDefault.buildVersion\r\n        ),\r\n        apiUrl: getValueOrDefault(process.env.REACT_APP_API_URL, overrides.apiUrl, configDefault.apiUrl)\r\n    };\r\n\r\n    ConfigManager.set({ ...configDefault, ...overrides });\r\n\r\n    return ConfigManager.get();\r\n};\r\n","export class Routes {\r\n    static home = '/';\r\n    static auth = '/auth';\r\n    static settings = '/settings';\r\n    static group = '/group';\r\n    static label = '/label';\r\n    static expense = '/expense';\r\n}\r\n","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Routes } from '../../pages/routes';\r\n\r\nexport type HeaderProps = {};\r\n\r\nexport const HeaderComponent: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\r\n    const history = useHistory();\r\n    const [t] = useTranslation();\r\n\r\n    const handleRedirectTo = React.useCallback(\r\n        (path: string) => {\r\n            history.push(path);\r\n        },\r\n        [history]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\r\n                <Container>\r\n                    <Navbar.Brand onClick={() => handleRedirectTo(Routes.home)}>{t('HEADER.TITLE')}</Navbar.Brand>\r\n\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"mr-auto \">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link onClick={() => handleRedirectTo(Routes.group)}>{t('HEADER.GROUP')}</Nav.Link>\r\n                            <Nav.Link onClick={() => handleRedirectTo(Routes.label)}>{t('HEADER.LABEL')}</Nav.Link>\r\n                            <Nav.Link onClick={() => handleRedirectTo(Routes.expense)}>{t('HEADER.EXPENSE')}</Nav.Link>\r\n                        </Nav>\r\n                        <Nav>\r\n                            <NavDropdown title={t('USER NAME')} id=\"collasible-nav-dropdown\">\r\n                                <NavDropdown.Item href=\"#action/3.1\">{t('HEADER.SETTINGS')}</NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                                <NavDropdown.Item href=\"#action/3.1\">{t('HEADER.LOGOUT')}</NavDropdown.Item>\r\n                            </NavDropdown>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\n\r\nexport type AuthProps = {};\r\n\r\nexport const AuthPage: React.FC<AuthProps> = React.memo((props: AuthProps) => {\r\n    return <>Auth page</>;\r\n});\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { GroupModel } from '../../models/group';\r\n\r\nexport type SearchProps = {\r\n    groups: GroupModel[];\r\n    group: number;\r\n\r\n    month: number;\r\n\r\n    years: number[];\r\n    year: number;\r\n};\r\n\r\nexport const SearchComponent: React.FC<SearchProps> = React.memo((props: SearchProps) => {\r\n    const [t] = useTranslation();\r\n    const [months] = React.useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\r\n\r\n    const [group, setGroup] = React.useState<number>(props.group);\r\n    const [month, setMonth] = React.useState<number>(props.month);\r\n    const [year, setYear] = React.useState<number>(props.year);\r\n\r\n    React.useEffect(() => {\r\n        setGroup(props.group);\r\n        setMonth(props.month);\r\n        setYear(props.year);\r\n    }, [props.group, props.month, props.year]);\r\n\r\n    const handleOnChangeGroup = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGroup(event.target.value as number);\r\n    }, []);\r\n    const handleOnChangeMonth = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setMonth(event.target.value as number);\r\n    }, []);\r\n    const handleOnChangeYear = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setYear(event.target.value as number);\r\n    }, []);\r\n\r\n    const handleOnSearch = React.useCallback(() => {\r\n        console.log(group, month, year);\r\n    }, [group, month, year]);\r\n\r\n    const groupsOptions = React.useMemo(\r\n        () =>\r\n            props.groups.map(x => (\r\n                <option key={'GROUP_' + x.id} value={x.id}>\r\n                    {x.name}\r\n                </option>\r\n            )),\r\n        [props.groups]\r\n    );\r\n\r\n    const monthsOptions = React.useMemo(\r\n        () =>\r\n            months.map(x => (\r\n                <option key={'MONTH_' + x} value={x}>\r\n                    {t('MONTHS.' + x)}\r\n                </option>\r\n            )),\r\n        [months, t]\r\n    );\r\n\r\n    const yearsOptions = React.useMemo(\r\n        () =>\r\n            props.years.map(x => (\r\n                <option key={'YEAR_' + x} value={x}>\r\n                    {x}\r\n                </option>\r\n            )),\r\n        [props.years]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            Search Component\r\n            <br></br>\r\n            <label>{t('SEARCH.GROUP')}</label>\r\n            <select className=\"group\" id=\"group\" value={group} defaultValue={group} onChange={handleOnChangeGroup}>\r\n                {groupsOptions}\r\n            </select>\r\n            <label>{t('SEARCH.MONTH')}</label>\r\n            <select className=\"month\" id=\"month\" value={month} defaultValue={month} onChange={handleOnChangeMonth}>\r\n                {monthsOptions}\r\n            </select>\r\n            <label>{t('SEARCH.YEAR')}</label>\r\n            <select className=\"year\" id=\"year\" value={year} defaultValue={year} onChange={handleOnChangeYear}>\r\n                {yearsOptions}\r\n            </select>\r\n            <input type=\"date\" id=\"date\" name=\"trip-start\" value=\"2018-07-22\"></input>\r\n            <button onClick={handleOnSearch}>Search</button>\r\n        </>\r\n    );\r\n});\r\n","import { GroupModel } from '../models/group';\r\n\r\nexport const groupsMockData: GroupModel[] = [\r\n    { id: 1, name: 'Group 1' },\r\n    { id: 2, name: 'Group 2' },\r\n    { id: 3, name: 'Group 3' },\r\n    { id: 4, name: 'Group 4' }\r\n];\r\n","import React from 'react';\r\n\r\nimport { SearchComponent, SearchProps } from '../../components/search/search';\r\nimport { groupsMockData } from '../../mockData/group';\r\n\r\nexport type ExpenseProps = {};\r\n\r\nexport const ExpensePage: React.FC<ExpenseProps> = React.memo((props: ExpenseProps) => {\r\n    const searchProps: SearchProps = React.useMemo(() => {\r\n        return {\r\n            groups: groupsMockData,\r\n            group: 2,\r\n            month: 10,\r\n            years: [2019, 2020],\r\n            year: 2020\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            Expense page\r\n            <br></br>\r\n            <SearchComponent {...searchProps} />\r\n        </>\r\n    );\r\n});\r\n","import { createGlobalStyle} from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  `","export const getFirebaseConfig = (projectId: string, apiKey: string) => ({\r\n    apiKey: apiKey,\r\n    authDomain: `${projectId}.firebaseapp.com`,\r\n    databaseURL: `https://${projectId}.firebaseio.com`,\r\n    projectId: projectId,\r\n    storageBucket: projectId,\r\n    messagingSenderId: 'my-sender-id'\r\n});\r\n","import React from 'react';\r\n\r\nexport type GroupProps = {};\r\n\r\nexport const GroupPage: React.FC<GroupProps> = React.memo((props: GroupProps) => {\r\n    return <>Group page</>;\r\n});\r\n","import React from 'react';\r\n\r\nimport { SearchComponent, SearchProps } from '../../components/search/search';\r\n\r\nexport type LabelProps = {};\r\n\r\nexport const LabelPage: React.FC<LabelProps> = React.memo((props: LabelProps) => {\r\n    const searchProps: SearchProps = {\r\n        groups: [\r\n            { id: 1, name: 'Group 1' },\r\n            { id: 2, name: 'Group 2' }\r\n        ],\r\n        group: 2,\r\n        month: 10,\r\n        years: [2019, 2020],\r\n        year: 2020\r\n    };\r\n    return (\r\n        <>\r\n            Label page\r\n            <br></br>\r\n            <SearchComponent {...searchProps} />\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\n\r\nexport type SettingsProps = {};\r\n\r\nexport const SettingsPage: React.FC<SettingsProps> = React.memo((props: SettingsProps) => {\r\n    return <>Settings page</>;\r\n});\r\n","export const lightTheme = {\r\n    body: '#E2E2E2',\r\n    text: '#363537',\r\n    toggleBorder: '#FFF',\r\n    gradient: 'linear-gradient(#39598A, #79D7ED)'\r\n};\r\n\r\nexport const darkTheme = {\r\n    body: '#363537',\r\n    text: '#FAFAFA',\r\n    toggleBorder: '#6B8096',\r\n    gradient: 'linear-gradient(#091236, #1E215D)'\r\n};\r\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider } from 'styled-components';\n\nimport { HeaderComponent } from '../components/header/header';\nimport { ConfigManager } from '../configurations/configManager';\nimport { ConfigModel } from '../models/config';\nimport { AuthPage } from './auth/auth';\nimport { ExpensePage } from './expense/expense';\nimport { GlobalStyles } from './globalSyles';\nimport { GroupPage } from './group/group';\nimport { LabelPage } from './label/label';\nimport { Routes } from './routes';\nimport { SettingsPage } from './settings/settings';\nimport { darkTheme, lightTheme } from './theme';\n\nexport type AppProps = {};\n\nexport const AppPage: React.FC<AppProps> = React.memo((_props: AppProps) => {\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\n\n    const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n    return (\n        <>\n            <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n                <>\n                    <GlobalStyles />\n                    <HashRouter basename=\"/\">\n                        <HeaderComponent />\n                        <Container>\n                            <Switch>\n                                <Route key={Routes.group} path={Routes.group} component={GroupPage} />\n                                <Route key={Routes.label} path={Routes.label} component={LabelPage} />\n                                <Route key={Routes.expense} path={Routes.expense} component={ExpensePage} />\n                                <Route key={Routes.settings} path={Routes.settings} component={SettingsPage} />\n                                <Route key={Routes.auth} path={Routes.auth} component={AuthPage} />\n                                <Route key={Routes.home} exact path={Routes.home}>\n                                    <>\n                                        <h3>HOME</h3>\n                                        <h6>Build Version: {config.buildVersion}</h6>\n                                    </>\n                                </Route>\n                                <Route key={'*'} path=\"*\">\n                                    <h1> 404 </h1>\n                                </Route>\n                            </Switch>\n                        </Container>\n                    </HashRouter>\n                </>\n            </ThemeProvider>\n        </>\n    );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initializeApp } from 'firebase';\nimport * as serviceWorker from './serviceWorker';\n\nimport './configurations/i18n';\nimport './index.scss';\n\nimport { setConfiguration } from './configurations/configManager';\nimport { AppPage } from './pages/app';\nimport { getFirebaseConfig } from './configurations/firebase';\nimport { getValueOrDefault } from './helpers/util';\n\nconst config = setConfiguration();\n\n// initialize firebase\ninitializeApp({\n    ...getFirebaseConfig(\n        getValueOrDefault(process.env.REACT_APP_FIREBASE_PROJECT, config.firebaseProject),\n        getValueOrDefault(process.env.REACT_APP_FIREBASE_API_KEY, config.firebaseApiKey)\n    )\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppPage />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}