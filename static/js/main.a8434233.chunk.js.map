{"version":3,"sources":["serviceWorker.ts","configurations/i18n.ts","models/config.ts","helpers/util.ts","configurations/configManager.ts","pages/routes.ts","contexts/user.ts","services/auth.ts","helpers/user.ts","components/header/header.tsx","pages/auth/auth.tsx","components/search/search.tsx","mockData/user.ts","mockData/group.ts","pages/expense/expense.tsx","pages/globalSyles.js","services/base.ts","services/group.ts","pages/group/groupModal.tsx","pages/group/group.tsx","configurations/firebase.ts","pages/label/label.tsx","pages/settings/settings.tsx","pages/theme.ts","pages/app.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","resources","en","translation","i18n","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","ApiType","hasValue","value","undefined","Array","isArray","length","getValueOrDefault","values","find","x","ConfigModel","apiUrl","buildVersion","requestDelay","firebaseApiKey","firebaseProject","ConfigManager","configurationObject","config","get","configurationSettings","Object","assign","set","ApplicationConfiguration","freeze","Routes","home","auth","settings","group","label","expense","userContext","React","createContext","user","initialising","isReady","facebook","FacebookAuthProvider","loginWithFacebook","a","signInWithPopup","console","error","loginWithEmail","email","password","signInWithEmailAndPassword","getUserDisplayName","displayName","split","HeaderStyle","createGlobalStyle","HeaderComponent","memo","props","useContext","history","useHistory","useTranslation","t","handleRedirectTo","useCallback","path","push","handleLogout","firebase","signOut","setTimeout","authElement","useMemo","Nav","NavDropdown","title","id","Item","onClick","Divider","Link","Navbar","bg","variant","expand","Container","Brand","Toggle","aria-controls","Collapse","className","AuthStyle","AuthPage","useState","isLoading","setLoading","hasError","setError","setEmail","setPassword","handleFacebook","handleChangeEmail","target","handleChangePassword","handleLogin","Alert","key","Row","Col","xs","sm","Card","Title","Body","Button","Form","Group","controlId","Label","Control","type","placeholder","onChange","disabled","SearchComponent","usersMockData","groupsMockData","name","groupsFullMockData","users","ExpensePage","searchProps","groups","month","years","year","StatusCodes","GlobalStyles","theme","body","text","handleError","response","status","OK","data","headers","Promise","reject","GroupService","baseUrl","userId","this","FIREBASE","LOCAL_STORAGE","TOTAL_FAKE","resolveMockData","obj","post","put","delete","resolve","_reject","_resolve","url","params","axios","baseURL","withCredentials","process","Accept","Authorization","defaults","common","GroupModalPage","show","setShow","handleClose","useEffect","Modal","onHide","size","centered","Header","closeButton","as","multiple","map","Footer","projectId","GroupStyle","GroupPage","setGroups","showModal","setShowModal","handleOnAdd","getAllFull","uid","setup","groupElements","index","DropdownButton","Dropdown","eventKey","indexUser","Spinner","animation","role","LabelPage","SettingsPage","lightTheme","toggleBorder","gradient","darkTheme","AppPage","_props","isDarkMode","matchMedia","matches","currentUser","state","setState","unsubscribe","onAuthStateChanged","useAuth","setReady","getIdTokenResult","then","token","Provider","basename","component","exact","overrides","configDefault","REACT_APP_API_URL","setConfiguration","initializeApp","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a8434233.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport translationEN from '../locales/en.json';\r\n\r\nconst resources = {\r\n    en: {\r\n        translation: translationEN\r\n    }\r\n};\r\n\r\ni18n.use(initReactI18next) // passes i18n down to react-i18next\r\n    .init({\r\n        resources,\r\n        lng: 'en',\r\n        fallbackLng: 'en', // use en if detected lng is not available\r\n\r\n        // keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n        interpolation: {\r\n            escapeValue: false // react already safes from xss\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n","export enum ApiType {\r\n    FIREBASE = 'FIREBASE',\r\n    LOCAL_STORAGE = 'LOCAL_STORAGE',\r\n    TOTAL_FAKE = 'TOTAL_FAKE'\r\n}\r\n\r\nexport class ConfigModel {\r\n    /** api backend url */\r\n    apiUrl: string = 'TOTAL_FAKE';\r\n\r\n    /** build version */\r\n    buildVersion: string = 'local';\r\n\r\n    /** request delay time */\r\n    requestDelay: number = 1000;\r\n\r\n    /** firebase */\r\n    firebaseApiKey: string = 'AIzaSyDMDE7eTQbjwkQglMJf5KnFtMr48-pAoVM';\r\n    firebaseProject: string = 'lfmachadodasilva-dev';\r\n}\r\n","export const hasValue = (value: any): boolean => {\r\n    if (value === null || value === undefined) {\r\n        return false;\r\n    }\r\n\r\n    if (typeof value === 'string' || Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n// export const getValueOrDefault = (value?: string, defaultValue?: string) => {\r\n//     return hasValue(value) ? value : defaultValue;\r\n// };\r\n\r\nexport const getValueOrDefault = (...values: any[]) => {\r\n    return values.find(x => hasValue(x));\r\n};\r\n","import config, { Options } from 'react-global-configuration';\r\n\r\nimport { getValueOrDefault } from '../helpers/util';\r\nimport { ConfigModel } from '../models/config';\r\n\r\nexport class ConfigManager {\r\n    static set = (configurationSettings: ConfigModel) => {\r\n        config.set({ ApplicationConfiguration: configurationSettings }, { freeze: false } as Options);\r\n    };\r\n\r\n    static get(): ConfigModel {\r\n        const configurationObject = config.get('ApplicationConfiguration');\r\n\r\n        const configurationSettings = new ConfigModel();\r\n        Object.assign(configurationSettings, configurationObject);\r\n\r\n        return configurationSettings;\r\n    }\r\n}\r\n\r\nexport const setConfiguration = (overrides: Partial<ConfigModel> = {}): ConfigModel => {\r\n    let configDefault: ConfigModel = new ConfigModel();\r\n\r\n    configDefault = {\r\n        ...configDefault,\r\n        buildVersion: getValueOrDefault(\r\n            process.env.REACT_APP_BUILD_VERSION,\r\n            overrides.buildVersion,\r\n            configDefault.buildVersion\r\n        ),\r\n        apiUrl: getValueOrDefault(process.env.REACT_APP_API_URL, overrides.apiUrl, configDefault.apiUrl)\r\n    };\r\n\r\n    ConfigManager.set({ ...configDefault, ...overrides });\r\n\r\n    return ConfigManager.get();\r\n};\r\n","export class Routes {\r\n    static home = '/';\r\n    static auth = '/auth';\r\n    static settings = '/settings';\r\n    static group = '/group';\r\n    static label = '/label';\r\n    static expense = '/expense';\r\n}\r\n","import React from 'react';\r\nimport { User } from 'firebase/app';\r\n\r\ninterface UserContext {\r\n    user: User | null;\r\n    initialising: boolean;\r\n    isReady: boolean;\r\n}\r\n\r\nexport const userContext = React.createContext<UserContext>({\r\n    user: null,\r\n    initialising: false,\r\n    isReady: false\r\n});\r\n","import React, { useState } from 'react';\r\nimport firebase, { auth } from 'firebase/app';\r\nimport 'firebase/auth'; // If using Firebase auth\r\n// import { UserService } from './userService';\r\n// import { ConfigurationManager } from '../configurations/configurationManager';\r\n// import { UserModel } from '../models/user';\r\n\r\nexport const useAuth = () => {\r\n    const [state, setState] = useState(() => {\r\n        const user = auth().currentUser;\r\n        return { initialising: !user, user };\r\n    });\r\n\r\n    const onChange = (user: firebase.User | null) => {\r\n        setState({ initialising: false, user });\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // listen for auth state changes\r\n        const unsubscribe = auth().onAuthStateChanged(onChange);\r\n        // unsubscribe to the listener when unmounting\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return state;\r\n};\r\n\r\nconst facebook = new auth.FacebookAuthProvider();\r\n\r\nexport const loginWithFacebook = async () => {\r\n    try {\r\n        return await auth().signInWithPopup(facebook);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const loginWithEmail = async (email: string, password: string) => {\r\n    try {\r\n        await auth().signInWithEmailAndPassword(email, password);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const createUserWithEmail = async (email: string, password: string) => {\r\n    try {\r\n        await auth().createUserWithEmailAndPassword(email, password);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const resetPassword = async (email: string) => {\r\n    try {\r\n        return await auth().sendPasswordResetEmail(email);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\n// export const updateUser = async (user: firebase.User | null, displayName: string) => {\r\n//     try {\r\n//         await user?.updateProfile({ displayName: displayName });\r\n\r\n//         const config = ConfigurationManager.get();\r\n//         const userObj = user as firebase.User;\r\n\r\n//         return await new UserService(config).addOrUpdate({\r\n//             id: userObj.uid,\r\n//             email: userObj.email,\r\n//             displayName: userObj.displayName,\r\n//             photoUrl: userObj.photoURL\r\n//         } as UserModel);\r\n//     } catch (err) {\r\n//         console.error(err);\r\n//         throw err;\r\n//     }\r\n// };\r\n\r\nexport const signOut = () => firebase.auth().signOut();\r\n","import { UserModel } from '../models/user';\r\nimport { hasValue } from './util';\r\n\r\nexport const getUserDisplayName = (user: firebase.User | UserModel) => {\r\n    if (!hasValue(user)) {\r\n        return '';\r\n    }\r\n\r\n    if (hasValue(user.displayName)) {\r\n        return user.displayName?.split(' ')[0];\r\n    }\r\n\r\n    return user.email?.split('@')[0];\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Routes } from '../../pages/routes';\r\nimport { userContext } from '../../contexts/user';\r\nimport { hasValue } from '../../helpers/util';\r\nimport { signOut } from '../../services/auth';\r\nimport { getUserDisplayName } from '../../helpers/user';\r\n\r\nconst HeaderStyle = createGlobalStyle`\r\n        .navbar-brand {\r\n            cursor: pointer;\r\n        };\r\n    `;\r\n\r\nexport type HeaderProps = {};\r\n\r\nexport const HeaderComponent: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\r\n    const { user, initialising } = useContext(userContext);\r\n    const history = useHistory();\r\n    const [t] = useTranslation();\r\n\r\n    const handleRedirectTo = React.useCallback(\r\n        (path: string) => {\r\n            history.push(path);\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const handleLogout = React.useCallback(async () => {\r\n        await signOut();\r\n        setTimeout(() => history.push(Routes.home));\r\n    }, [history]);\r\n\r\n    const authElement = React.useMemo(() => {\r\n        if (hasValue(user)) {\r\n            const displayName = getUserDisplayName(user as firebase.User);\r\n            return (\r\n                <Nav>\r\n                    <NavDropdown title={displayName} id=\"collasible-nav-dropdown\">\r\n                        <NavDropdown.Item onClick={() => handleRedirectTo(Routes.settings)}>\r\n                            {t('HEADER.SETTINGS')}\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick={handleLogout}>{t('HEADER.LOGOUT')}</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Nav>\r\n                <Nav.Link onClick={() => handleRedirectTo(Routes.auth)}>{t('HEADER.LOGIN')}</Nav.Link>\r\n            </Nav>\r\n        );\r\n    }, [user, handleRedirectTo, handleLogout, t]);\r\n\r\n    return (\r\n        <>\r\n            <HeaderStyle />\r\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\r\n                <Container>\r\n                    <Navbar.Brand onClick={() => handleRedirectTo(Routes.home)}>{t('HEADER.TITLE')}</Navbar.Brand>\r\n\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"mr-auto \">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link onClick={() => handleRedirectTo(Routes.group)}>{t('HEADER.GROUP')}</Nav.Link>\r\n                            <Nav.Link onClick={() => handleRedirectTo(Routes.label)}>{t('HEADER.LABEL')}</Nav.Link>\r\n                            <Nav.Link onClick={() => handleRedirectTo(Routes.expense)}>{t('HEADER.EXPENSE')}</Nav.Link>\r\n                        </Nav>\r\n                        {!initialising && authElement}\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport { Routes } from '../routes';\r\nimport { loginWithEmail, loginWithFacebook } from '../../services/auth';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst AuthStyle = createGlobalStyle`\r\n    `;\r\n\r\nexport type AuthProps = {};\r\n\r\nexport const AuthPage: React.FC<AuthProps> = React.memo((props: AuthProps) => {\r\n    const [t] = useTranslation();\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [hasError, setError] = React.useState<boolean>(false);\r\n\r\n    const [email, setEmail] = React.useState<string>('');\r\n    const [password, setPassword] = React.useState<string>('');\r\n\r\n    const handleFacebook = React.useCallback(async () => {\r\n        setLoading(true);\r\n        setError(false);\r\n        try {\r\n            await loginWithFacebook();\r\n            setTimeout(() => history.push(Routes.home));\r\n        } catch (error) {\r\n            setError(true);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [history]);\r\n\r\n    const handleChangeEmail = React.useCallback((value: any) => {\r\n        setEmail(value.target.value);\r\n    }, []);\r\n    const handleChangePassword = React.useCallback((value: any) => {\r\n        setPassword(value.target.value);\r\n    }, []);\r\n\r\n    const handleLogin = React.useCallback(async () => {\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        try {\r\n            await loginWithEmail(email, password);\r\n            setTimeout(() => history.push(Routes.home));\r\n        } catch {\r\n            setError(true);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [email, password, history]);\r\n\r\n    return (\r\n        <>\r\n            <AuthStyle />\r\n            <Container className=\"p-4\">\r\n                {hasError && (\r\n                    <Alert key=\"AUTH.ERROR\" variant=\"danger\">\r\n                        {t('AUTH.ERROR')}\r\n                    </Alert>\r\n                )}\r\n\r\n                <Row>\r\n                    <Col className=\"p-1\" xs={12} sm={6}>\r\n                        <Card className=\"p-4\">\r\n                            <Card.Title>{t('AUTH.BY_FACEBOOK')}</Card.Title>\r\n                            <Card.Body>\r\n                                <Button onClick={handleFacebook}>{t('AUTH.FACEBOOK')}</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col className=\"p-1\" xs={12} sm={6}>\r\n                        <Card className=\"p-4\">\r\n                            <Card.Title>{t('AUTH.BY_EMAIL')}</Card.Title>\r\n                            <Card.Body>\r\n                                <Form>\r\n                                    <Form.Group controlId=\"formBasicEmail\">\r\n                                        <Form.Label>{t('AUTH.EMAIL')}</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            placeholder={t('AUTH.EMAIL_PLACEHOLDER')}\r\n                                            onChange={handleChangeEmail}\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formBasicPassword\">\r\n                                        <Form.Label>{t('AUTH.PASSWORD')}</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder={t('AUTH.PASSWORD_PLACEHOLDER')}\r\n                                            onChange={handleChangePassword}\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Button variant=\"primary\" onClick={handleLogin} disabled={isLoading}>\r\n                                        {t('AUTH.LOGIN')}\r\n                                    </Button>\r\n                                </Form>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\n// import { useTranslation } from 'react-i18next';\r\n\r\nimport { GroupModel } from '../../models/group';\r\n\r\nexport type SearchProps = {\r\n    groups: GroupModel[];\r\n    group: number;\r\n\r\n    month: number;\r\n\r\n    years: number[];\r\n    year: number;\r\n};\r\n\r\nexport const SearchComponent: React.FC<SearchProps> = React.memo((props: SearchProps) => {\r\n    // const [t] = useTranslation();\r\n    // const [months] = React.useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\r\n\r\n    // const [group, setGroup] = React.useState<number>(props.group);\r\n    // const [month, setMonth] = React.useState<number>(props.month);\r\n    // const [year, setYear] = React.useState<number>(props.year);\r\n\r\n    // React.useEffect(() => {\r\n    //     setGroup(props.group);\r\n    //     setMonth(props.month);\r\n    //     setYear(props.year);\r\n    // }, [props.group, props.month, props.year]);\r\n\r\n    // const handleOnChangeGroup = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n    //     setGroup(event.target.value as number);\r\n    // }, []);\r\n    // const handleOnChangeMonth = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n    //     setMonth(event.target.value as number);\r\n    // }, []);\r\n    // const handleOnChangeYear = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n    //     setYear(event.target.value as number);\r\n    // }, []);\r\n\r\n    // const handleOnSearch = React.useCallback(() => {\r\n    //     console.log(group, month, year);\r\n    // }, [group, month, year]);\r\n\r\n    // const groupsOptions = React.useMemo(\r\n    //     () =>\r\n    //         props.groups.map(x => (\r\n    //             <option key={'GROUP_' + x.id} value={x.id}>\r\n    //                 {x.name}\r\n    //             </option>\r\n    //         )),\r\n    //     [props.groups]\r\n    // );\r\n\r\n    // const monthsOptions = React.useMemo(\r\n    //     () =>\r\n    //         months.map(x => (\r\n    //             <option key={'MONTH_' + x} value={x}>\r\n    //                 {t('MONTHS.' + x)}\r\n    //             </option>\r\n    //         )),\r\n    //     [months, t]\r\n    // );\r\n\r\n    // const yearsOptions = React.useMemo(\r\n    //     () =>\r\n    //         props.years.map(x => (\r\n    //             <option key={'YEAR_' + x} value={x}>\r\n    //                 {x}\r\n    //             </option>\r\n    //         )),\r\n    //     [props.years]\r\n    // );\r\n\r\n    return (\r\n        <>\r\n            Search Component\r\n            <br></br>\r\n            {/* <label>{t('SEARCH.GROUP')}</label>\r\n            <select className=\"group\" id=\"group\" value={group} defaultValue={group} onChange={handleOnChangeGroup}>\r\n                {groupsOptions}\r\n            </select>\r\n            <label>{t('SEARCH.MONTH')}</label>\r\n            <select className=\"month\" id=\"month\" value={month} defaultValue={month} onChange={handleOnChangeMonth}>\r\n                {monthsOptions}\r\n            </select>\r\n            <label>{t('SEARCH.YEAR')}</label>\r\n            <select className=\"year\" id=\"year\" value={year} defaultValue={year} onChange={handleOnChangeYear}>\r\n                {yearsOptions}\r\n            </select>\r\n            <input type=\"date\" id=\"date\" name=\"trip-start\" value=\"2018-07-22\"></input>\r\n            <button onClick={handleOnSearch}>Search</button> */}\r\n        </>\r\n    );\r\n});\r\n","import { UserModel } from '../models/user';\r\n\r\nexport const usersMockData: UserModel[] = [\r\n    { id: 1, displayName: 'User 1', email: 'user1@email.com' },\r\n    { id: 2, displayName: 'User 2', email: 'user2@email.com' },\r\n    { id: 3, displayName: 'User 3', email: 'user3@email.com' },\r\n    { id: 4, displayName: 'User 4', email: 'user4@email.com' },\r\n    { id: 5, displayName: 'User 5', email: 'user5@email.com' }\r\n];\r\n","import { GroupFullModel, GroupModel } from '../models/group';\r\nimport { usersMockData } from './user';\r\n\r\nexport const groupsMockData: GroupModel[] = [\r\n    { id: 1, name: 'Group 1' },\r\n    { id: 2, name: 'Group 2' },\r\n    { id: 3, name: 'Group 3' },\r\n    { id: 4, name: 'Group 4' }\r\n];\r\n\r\nexport const groupsFullMockData: GroupFullModel[] = [\r\n    { id: 1, name: 'Group 1', users: usersMockData },\r\n    { id: 2, name: 'Group 2', users: usersMockData },\r\n    { id: 3, name: 'Group 3', users: usersMockData },\r\n    { id: 4, name: 'Group 4', users: usersMockData }\r\n];\r\n","import React from 'react';\r\n\r\nimport { SearchComponent, SearchProps } from '../../components/search/search';\r\nimport { groupsMockData } from '../../mockData/group';\r\n\r\nexport type ExpenseProps = {};\r\n\r\nexport const ExpensePage: React.FC<ExpenseProps> = React.memo((props: ExpenseProps) => {\r\n    const searchProps: SearchProps = React.useMemo(() => {\r\n        return {\r\n            groups: groupsMockData,\r\n            group: 2,\r\n            month: 10,\r\n            years: [2019, 2020],\r\n            year: 2020\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            Expense page\r\n            <br></br>\r\n            <SearchComponent {...searchProps} />\r\n        </>\r\n    );\r\n});\r\n","import { createGlobalStyle} from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n  };\r\n\r\n  .card {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    border-color: #646464;\r\n  };\r\n\r\n  .list-group-item {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    border-color: #646464;\r\n  };\r\n\r\n  .form-control {\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n  };\r\n\r\n  .modal-content {\r\n    background-color: ${({ theme }) => theme.body};\r\n    border-color: #646464;\r\n  };\r\n  .modal-header {\r\n    background-color: ${({ theme }) => theme.body};\r\n    border-color: #646464;\r\n  };\r\n  .modal-body {\r\n    background-color: ${({ theme }) => theme.body};\r\n    border-color: #646464;\r\n  };\r\n  .modal-footer {\r\n    background-color: ${({ theme }) => theme.body};\r\n    border-color: #646464;\r\n  };\r\n  `","import axios, { AxiosError } from 'axios';\r\nimport { ConfigModel } from '../models/config';\r\n\r\nexport enum StatusCodes {\r\n    OK = 200\r\n}\r\n\r\nconst handleError = async (error: AxiosError) => {\r\n    if (error.response && error.response.status >= StatusCodes.OK) {\r\n        if (process.env.NODE_ENV !== 'test') {\r\n            // avoid show this when is running test\r\n            console.error('Request Failed:', error.config);\r\n            console.error('Status:', error.response.status);\r\n            console.error('Data:', error.response.data);\r\n            console.error('Headers:', error.response.headers);\r\n        }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n};\r\n\r\nexport class ServiceBase {\r\n    constructor(protected config: ConfigModel) {}\r\n\r\n    protected async resolveMockData<T>(data: T): Promise<T> {\r\n        return new Promise((resolve, _reject) => {\r\n            setTimeout(() => {\r\n                resolve(data);\r\n            }, this.config.requestDelay);\r\n        });\r\n    }\r\n\r\n    protected async rejectMockData() {\r\n        return new Promise((_resolve, reject) => {\r\n            setTimeout(() => {\r\n                reject();\r\n            }, this.config.requestDelay);\r\n        });\r\n    }\r\n\r\n    protected async get<TResponse>(url: string, params?: { [key: string]: any }): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.get(url, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async post<TResponse>(url: string, params?: { [key: string]: any }, data?: any): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.post(url, data, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async put<TResponse>(url: string, params?: { [key: string]: any }, data?: any): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.put(url, data, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async delete<TResponse>(url: string): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.delete(url, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                }\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n}\r\n","import { groupsFullMockData, groupsMockData } from '../mockData/group';\r\nimport { ApiType, ConfigModel } from '../models/config';\r\nimport { GroupFullModel, GroupModel } from '../models/group';\r\nimport { ServiceBase } from './base';\r\n\r\nexport class GroupService extends ServiceBase {\r\n    private baseUrl = '/api/group';\r\n\r\n    constructor(protected config: ConfigModel) {\r\n        super(config);\r\n    }\r\n\r\n    async getAll(userId: string): Promise<GroupModel[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(groupsMockData);\r\n        }\r\n        return await this.get<GroupModel[]>(this.baseUrl);\r\n    }\r\n\r\n    async getAllFull(userId: string): Promise<GroupFullModel[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(groupsFullMockData);\r\n        }\r\n        return await this.get<GroupFullModel[]>(this.baseUrl);\r\n    }\r\n\r\n    async add(obj: Partial<GroupModel>): Promise<GroupModel> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(groupsMockData[0]);\r\n        }\r\n        return await this.post<GroupModel>(this.baseUrl, {}, obj);\r\n    }\r\n\r\n    async update(obj: GroupModel): Promise<void> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<void>(undefined);\r\n        }\r\n        return await this.put<void>(this.baseUrl, {}, obj);\r\n    }\r\n\r\n    async remove(id: number): Promise<void> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<void>(undefined);\r\n        }\r\n        return await this.delete<void>(this.baseUrl + '/' + id);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { usersMockData } from '../../mockData/user';\r\n\r\nexport type GroupModalProps = {\r\n    show: boolean;\r\n};\r\n\r\nexport const GroupModalPage: React.FC<GroupModalProps> = React.memo((props: GroupModalProps) => {\r\n    const [t] = useTranslation();\r\n    const [show, setShow] = React.useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n\r\n    React.useEffect(() => {\r\n        setShow(props.show);\r\n    }, [props.show]);\r\n\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} size=\"lg\" centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{t('GROUP.MODAL.ADD_TITLE')}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                            <Form.Label>{t('GROUP.MODAL.NAME')}</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder={t('GROUP.MODAL.NAME_PLACEHOLDER')} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                            <Form.Label>{t('GROUP.MODAL.USERS')}</Form.Label>\r\n                            <Form.Control as=\"select\" multiple>\r\n                                {usersMockData.map(user => (\r\n                                    <option>{`${user.displayName} (${user.email})`}</option>\r\n                                ))}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={handleClose}>\r\n                        {t('GROUP.MODAL.ADD_ACTION')}\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n});\r\n","import React, { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport { ConfigManager } from '../../configurations/configManager';\r\nimport { userContext } from '../../contexts/user';\r\nimport { ConfigModel } from '../../models/config';\r\nimport { GroupFullModel } from '../../models/group';\r\nimport { GroupService } from '../../services/group';\r\nimport { getUserDisplayName } from '../../helpers/user';\r\nimport { hasValue } from '../../helpers/util';\r\nimport { GroupModalPage } from './groupModal';\r\n\r\nconst GroupStyle = createGlobalStyle`\r\n    .card-body {\r\n        padding: 10px;\r\n    };\r\n    `;\r\n\r\nexport type GroupProps = {};\r\n\r\nexport const GroupPage: React.FC<GroupProps> = React.memo((props: GroupProps) => {\r\n    const [t] = useTranslation();\r\n    const { user } = useContext(userContext);\r\n\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [groups, setGroups] = React.useState<GroupFullModel[]>([]);\r\n    const [error, setError] = React.useState<string>('');\r\n    const [showModal, setShowModal] = React.useState<boolean>(false);\r\n\r\n    const handleOnAdd = React.useCallback(() => {\r\n        setShowModal(true);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        const setup = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const data = await new GroupService(config).getAllFull(user?.uid ?? '');\r\n                setGroups(data);\r\n            } catch {\r\n                setGroups([]);\r\n                setError('GROUP.ERROR');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        setup();\r\n    }, [config, user]);\r\n\r\n    const groupElements = React.useMemo(\r\n        () =>\r\n            groups.map((group, index) => (\r\n                <Card key={`GROUP_${index}`} className=\"mb-1\">\r\n                    <Card.Body>\r\n                        <Card.Title>\r\n                            <div className=\"d-flex justify-content-between\">\r\n                                {group.name}\r\n                                <DropdownButton size=\"sm\" variant=\"secondary\" title=\"\">\r\n                                    <Dropdown.Item eventKey=\"1\">Edit</Dropdown.Item>\r\n                                    <Dropdown.Divider />\r\n                                    <Dropdown.Item eventKey=\"2\">Delete</Dropdown.Item>\r\n                                </DropdownButton>\r\n                            </div>\r\n                        </Card.Title>\r\n                        <Card.Body>\r\n                            <div key={`GROUP_USERS_${index}`} className=\"d-flex flex-wrap justify-content-start\">\r\n                                {group.users.map((user, indexUser) => (\r\n                                    <small key={`GROUP_SMALL_${index}_${indexUser}`} className=\"mr-2\">\r\n                                        {getUserDisplayName(user)}\r\n                                    </small>\r\n                                ))}\r\n                            </div>\r\n                        </Card.Body>\r\n                    </Card.Body>\r\n                </Card>\r\n            )),\r\n        [groups]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <GroupStyle />\r\n            <div className=\"d-flex justify-content-between mb-2\">\r\n                <h4>{t('GROUP.TITLE')}</h4>\r\n                <Button onClick={handleOnAdd}>{t('GROUP.ADD')}</Button>\r\n            </div>\r\n            {hasValue(error) && (\r\n                <Alert key=\"GROUP.ERROR\" variant=\"danger\">\r\n                    {error}\r\n                </Alert>\r\n            )}\r\n            {isLoading && (\r\n                <div className=\"d-flex justify-content-center m-4\">\r\n                    <Spinner className=\"group-loading\" animation=\"border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            )}\r\n            {!isLoading && groupElements}\r\n            <GroupModalPage show={showModal} />\r\n        </>\r\n    );\r\n});\r\n","export const getFirebaseConfig = (projectId: string, apiKey: string) => ({\r\n    apiKey: apiKey,\r\n    authDomain: `${projectId}.firebaseapp.com`,\r\n    databaseURL: `https://${projectId}.firebaseio.com`,\r\n    projectId: projectId,\r\n    storageBucket: projectId,\r\n    messagingSenderId: 'my-sender-id'\r\n});\r\n","import React from 'react';\r\n\r\nimport { SearchComponent, SearchProps } from '../../components/search/search';\r\n\r\nexport type LabelProps = {};\r\n\r\nexport const LabelPage: React.FC<LabelProps> = React.memo((props: LabelProps) => {\r\n    const searchProps: SearchProps = {\r\n        groups: [\r\n            { id: 1, name: 'Group 1' },\r\n            { id: 2, name: 'Group 2' }\r\n        ],\r\n        group: 2,\r\n        month: 10,\r\n        years: [2019, 2020],\r\n        year: 2020\r\n    };\r\n    return (\r\n        <>\r\n            Label page\r\n            <br></br>\r\n            <SearchComponent {...searchProps} />\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\n\r\nexport type SettingsProps = {};\r\n\r\nexport const SettingsPage: React.FC<SettingsProps> = React.memo((props: SettingsProps) => {\r\n    return <>Settings page</>;\r\n});\r\n","export const lightTheme = {\r\n    body: '#E2E2E2',\r\n    text: '#363537',\r\n    toggleBorder: '#FFF',\r\n    gradient: 'linear-gradient(#39598A, #79D7ED)'\r\n};\r\n\r\nexport const darkTheme = {\r\n    body: '#363537',\r\n    text: '#FAFAFA',\r\n    toggleBorder: '#6B8096',\r\n    gradient: 'linear-gradient(#091236, #1E215D)'\r\n};\r\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider } from 'styled-components';\nimport axios from 'axios';\n\nimport { HeaderComponent } from '../components/header/header';\nimport { ConfigManager } from '../configurations/configManager';\nimport { ConfigModel } from '../models/config';\nimport { useAuth } from '../services/auth';\nimport { AuthPage } from './auth/auth';\nimport { ExpensePage } from './expense/expense';\nimport { GlobalStyles } from './globalSyles';\nimport { GroupPage } from './group/group';\nimport { LabelPage } from './label/label';\nimport { Routes } from './routes';\nimport { SettingsPage } from './settings/settings';\nimport { darkTheme, lightTheme } from './theme';\nimport { hasValue } from '../helpers/util';\nimport { userContext } from '../contexts/user';\n\nexport type AppProps = {};\n\nexport const AppPage: React.FC<AppProps> = React.memo((_props: AppProps) => {\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\n    const isDarkMode = React.useMemo(\n        () => window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches,\n        []\n    );\n    const { user, initialising } = useAuth();\n    const [isReady, setReady] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        if (initialising || !user) {\n            return;\n        }\n\n        if (hasValue(user)) {\n            user.getIdTokenResult().then((value: any) => {\n                axios.defaults.headers.common.Authorization = value.token;\n                // new UserService(config).addOrUpdate({\n                //     id: user.uid,\n                //     email: user.email,\n                //     displayName: user.displayName,\n                //     photoUrl: user.photoURL\n                // } as UserModel);\n                setReady(true);\n            });\n        }\n    }, [user, initialising, config]);\n\n    return (\n        <>\n            <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n                <>\n                    <GlobalStyles />\n                    <userContext.Provider\n                        value={{\n                            user: user,\n                            initialising: initialising,\n                            isReady: isReady\n                        }}\n                    >\n                        <HashRouter basename=\"/\">\n                            <HeaderComponent />\n                            <Container className=\"mt-2\">\n                                <Switch>\n                                    <Route key={Routes.group} path={Routes.group} component={GroupPage} />\n                                    <Route key={Routes.label} path={Routes.label} component={LabelPage} />\n                                    <Route key={Routes.expense} path={Routes.expense} component={ExpensePage} />\n                                    <Route key={Routes.settings} path={Routes.settings} component={SettingsPage} />\n                                    <Route key={Routes.auth} path={Routes.auth} component={AuthPage} />\n                                    <Route key={Routes.home} exact path={Routes.home}>\n                                        <>\n                                            <h3>HOME</h3>\n                                            <h6>Build Version: {config.buildVersion}</h6>\n                                        </>\n                                    </Route>\n                                    <Route key={'*'} path=\"*\">\n                                        <h1> 404 </h1>\n                                    </Route>\n                                </Switch>\n                            </Container>\n                        </HashRouter>\n                    </userContext.Provider>\n                </>\n            </ThemeProvider>\n        </>\n    );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initializeApp } from 'firebase';\nimport * as serviceWorker from './serviceWorker';\n\nimport './configurations/i18n';\nimport './index.scss';\n\nimport { setConfiguration } from './configurations/configManager';\nimport { AppPage } from './pages/app';\nimport { getFirebaseConfig } from './configurations/firebase';\nimport { getValueOrDefault } from './helpers/util';\n\nconst config = setConfiguration();\n\n// initialize firebase\ninitializeApp({\n    ...getFirebaseConfig(\n        getValueOrDefault(process.env.REACT_APP_FIREBASE_PROJECT, config.firebaseProject),\n        getValueOrDefault(process.env.REACT_APP_FIREBASE_API_KEY, config.firebaseApiKey)\n    )\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppPage />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}