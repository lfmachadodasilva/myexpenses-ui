{"version":3,"sources":["serviceWorker.ts","configurations/i18n.ts","models/config.ts","helpers/util.ts","configurations/configManager.ts","pages/routes.ts","contexts/user.ts","services/base.ts","mockData/user.ts","services/user.ts","services/auth.ts","helpers/user.ts","components/header/header.tsx","pages/globalSyles.js","pages/theme.ts","components/alert/alert.tsx","pages/auth/auth.tsx","components/button/button.tsx","components/itemsHeader/itemsHeader.tsx","components/loading/loading.tsx","contexts/global.ts","components/search/search.tsx","models/expense.ts","mockData/group.ts","pages/expenseModal/expenseModal.tsx","mockData/label.ts","mockData/expense.ts","services/expense.ts","components/modal/modal.tsx","components/item/item.tsx","pages/expense/expenseItems.tsx","pages/expense/expenseSummary.tsx","pages/expense/expense.tsx","services/group.ts","pages/groupModal/groupModal.tsx","pages/group/group.tsx","pages/label/label.tsx","services/label.ts","pages/labelModal/labelModal.tsx","configurations/firebase.ts","pages/settings/settings.tsx","helpers/privateRouter.tsx","pages/import/import.tsx","helpers/csvToExpenses.ts","pages/export/export.tsx","pages/main.tsx","pages/app.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","resources","en","translation","i18n","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","ApiType","hasValue","value","undefined","Array","isArray","length","getValueOrDefault","values","find","x","ConfigModel","apiUrl","buildVersion","requestDelay","firebaseApiKey","firebaseProject","useHashRouter","ConfigManager","configurationObject","config","get","configurationSettings","Object","assign","set","ApplicationConfiguration","freeze","Routes","home","auth","settings","import","export","group","label","expense","FetchStatus","StatusCodes","userContext","React","createContext","initialising","isReady","isDarkTheme","setDarkTheme","dark","usersMockData","id","displayName","email","handleError","error","a","response","status","OK","console","data","headers","Promise","reject","ServiceBase","resolve","_reject","setTimeout","_resolve","url","params","axios","baseURL","this","withCredentials","process","Accept","Authorization","defaults","common","post","put","delete","UserService","baseUrl","user","FIREBASE","LOCAL_STORAGE","TOTAL_FAKE","resolveMockData","loginWithFacebook","facebook","FacebookAuthProvider","signInWithPopup","loginWithEmail","password","signInWithEmailAndPassword","updateUser","updateProfile","addOrUpdate","uid","photoUrl","photoURL","getUserDisplayName","split","HeaderStyle","createGlobalStyle","HeaderComponent","memo","props","useContext","history","useHistory","useTranslation","t","useState","expanded","setExpand","handleToggle","useCallback","handleRedirectTo","path","search","push","pathname","handleLogout","signOut","authElement","useMemo","Nav","NavDropdown","title","Item","onClick","Divider","Link","Navbar","bg","variant","expand","onToggle","Container","Brand","Toggle","aria-controls","Collapse","className","GlobalStyles","theme","body","text","toggleBorder","lightTheme","gradient","darkTheme","AlertComponent","type","message","role","AuthStyle","AuthPage","isLoading","setLoading","setError","setEmail","setPassword","handleFacebook","handleChangeEmail","target","handleChangePassword","handleLogin","Row","Col","xs","sm","Card","Title","Body","Button","Form","Group","controlId","Label","Control","placeholder","onChange","disabled","ButtonComponent","size","icon","ItemsHeaderComponent","action","onAction","disableAction","LoadingStyle","LoadingComponent","active","spinner","children","defaultGlobalContext","labels","groups","years","month","year","reloadGroups","reloadLabels","globalContext","ExpenseType","SearchStyle","SearchComponent","global","months","setGroup","setMonth","setYear","isExpanded","setExpanded","useEffect","handleOnChangeGroup","event","handleOnChangeMonth","handleOnChangeYear","handleOnSearch","queryString","stringify","handleExpandCollapse","groupsOptions","map","key","name","monthsOptions","yearsOptions","headerElement","Spinner","data-testid","animation","selectedGroup","g","Accordion","Header","as","eventKey","ExpenseModalType","groupsMockData","users","groupsFullMockData","labelsMockData","groupId","labelsFullMockData","currValue","lastValue","avgValue","expensesMockData","OUTCOMING","date","Date","comments","labelId","INCOMING","expensesFullMockData","yearsMockData","ExpenseService","obj","ModalComponent","show","actionText","actionVariant","actionDisable","onHide","Modal","centered","closeButton","Footer","ItemComponent","showDeleteModal","setShowDeleteModal","onEdit","onDelete","onDuplicate","handleOnHide","handleOnShowDeleteModel","handleOnEdit","handleOnDuplicate","handleOnDelete","DropdownButton","Dropdown","ExpenseItemsPage","items","item","toFixed","format","ExpenseSummaryPage","incoming","outcoming","totalIncoming","setTotalIncoming","totalOutcoming","setTotalOutcoming","totalLeft","setTotalLeft","totalLeftPer","setTotalLeftPer","tmpTotalIncoming","reduce","sum","current","tmpTotalOutcoming","tmpTotalLeft","ExpenseModalPage","modalType","labelsGroup","setType","setName","setValue","setDate","setLabel","setLabels","setComments","isLoadingAction","setLoadingAction","handleOnChangeType","handleOnChangeName","handleOnChangeValue","handleOnChangeDate","handleOnChangeLabel","localStorage","setItem","handleOnChangeComments","handleOnAction","EDIT","update","add","l","getItem","some","disabledAction","labelOptions","DUPLICATE","rows","ExpenseStyle","ExpensePage","expenses","setExpenses","setExpense","showModal","setShowModal","ADD","setModalType","refresh","setRefresh","getAllFull","runAsync","handleOnAdd","remove","incomingItems","filter","outcomingItems","alertsElement","Tabs","defaultActiveKey","Tab","GroupService","GroupModalPage","selectedUsers","setSelectedUsers","setUsers","isLoadingUsers","setLoadingUsers","handleOnChangeUsers","from","selectedOptions","option","getAll","usersOption","u","multiple","readOnly","LabelGrapyType","GroupStyle","GroupPage","setGroups","setup","groupElements","index","indexUser","LabelService","LabelModalPage","projectId","LabelStyle","LabelPage","_props","isLoadingGlobal","CURRENT_MONTH","graphType","setGrahType","handleOnGraphType","itemsElements","currValueClass","lastValueClass","graphElement","datasets","LAST_MONTH","borderWidth","options","plugins","colorschemes","scheme","width","height","alertElements","ToggleButtonGroup","ToggleButton","AVERAGE","SettingsPage","setDisplayName","handleOnChangeDarkTheme","checked","handleOnChangeDisplayName","handleOnUpdate","Check","PrivateRoute","Component","component","to","ImportPage","StatusType","groupGlobal","setData","setStatus","separator","setSeparator","total","setTotal","PROCESSING","isValid","ERROR","trim","toLowerCase","PROCESSED","handleOnChangeSeparator","handleOnChangeData","tmpExpenses","splitByRow","splitByCol","dateFormat","forEach","row","col","parse","csvToExpenses","_","NOT_PROCESSED","progressElement","tmp","styles","style","aria-valuenow","aria-valuemin","aria-valuemax","expensesRows","scope","toString","Text","ExportPage","empty","setEmpty","formatDate","labelName","line","join","aria-label","MainPage","useLocation","isLoadingGroups","setLoadingGroups","isLoadingLabels","setLoadingLabels","isLoadingYears","setLoadingYears","isSelectingGroup","setSelectingGroup","isSelectingMonth","setSelectingMonth","isSelectingYear","setSelectingYear","isPushing","setPushing","setYears","loadGroups","setLoadGroups","loadLabels","setLoadLabels","searchParams","jsonString","JSON","results","selected","lastGroup","getYears","getFullYear","lastYear","getMonth","lastMonth","handleToReloadLabels","handleToReloadGroups","enablePrivateRoute","Provider","exact","AppPage","useAuthState","colorScheme","useMedia","setReady","handleDarkTheme","getIdTokenResult","then","token","basename","overrides","configDefault","setConfiguration","initializeApp","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.35c279bf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport translationEN from '../locales/en.json';\r\n\r\nconst resources = {\r\n    en: {\r\n        translation: translationEN\r\n    }\r\n};\r\n\r\ni18n.use(initReactI18next) // passes i18n down to react-i18next\r\n    .init({\r\n        resources,\r\n        lng: 'en',\r\n        fallbackLng: 'en', // use en if detected lng is not available\r\n\r\n        // keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n        interpolation: {\r\n            escapeValue: false // react already safes from xss\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n","export enum ApiType {\r\n    FIREBASE = 'FIREBASE',\r\n    LOCAL_STORAGE = 'LOCAL_STORAGE',\r\n    TOTAL_FAKE = 'TOTAL_FAKE',\r\n    TEST_API = 'TEST_API'\r\n}\r\n\r\nexport class ConfigModel {\r\n    /** api backend url */\r\n    apiUrl: string = 'https://myexpenses-backend-dev.herokuapp.com/';\r\n\r\n    /** build version */\r\n    buildVersion: string = 'local';\r\n\r\n    /** request delay time */\r\n    requestDelay: number = 1000;\r\n\r\n    /** firebase */\r\n    firebaseApiKey: string = 'AIzaSyDMDE7eTQbjwkQglMJf5KnFtMr48-pAoVM';\r\n    firebaseProject: string = 'lfmachadodasilva-dev';\r\n\r\n    useHashRouter: boolean = false;\r\n}\r\n","export const hasValue = (value: any): boolean => {\r\n    if (value === null || value === undefined) {\r\n        return false;\r\n    }\r\n\r\n    if (typeof value === 'string' || Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n// export const getValueOrDefault = (value?: string, defaultValue?: string) => {\r\n//     return hasValue(value) ? value : defaultValue;\r\n// };\r\n\r\nexport const getValueOrDefault = (...values: any[]) => {\r\n    return values.find(x => hasValue(x));\r\n};\r\n","import config, { Options } from 'react-global-configuration';\r\n\r\nimport { getValueOrDefault } from '../helpers/util';\r\nimport { ConfigModel } from '../models/config';\r\n\r\nexport class ConfigManager {\r\n    static set = (configurationSettings: ConfigModel) => {\r\n        config.set({ ApplicationConfiguration: configurationSettings }, { freeze: false } as Options);\r\n    };\r\n\r\n    static get(): ConfigModel {\r\n        const configurationObject = config.get('ApplicationConfiguration');\r\n\r\n        const configurationSettings = new ConfigModel();\r\n        Object.assign(configurationSettings, configurationObject);\r\n\r\n        return configurationSettings;\r\n    }\r\n}\r\n\r\nexport const setConfiguration = (overrides: Partial<ConfigModel> = {}): ConfigModel => {\r\n    let configDefault: ConfigModel = new ConfigModel();\r\n\r\n    configDefault = {\r\n        ...configDefault,\r\n        buildVersion: getValueOrDefault(\r\n            process.env.REACT_APP_BUILD_VERSION,\r\n            overrides.buildVersion,\r\n            configDefault.buildVersion\r\n        ),\r\n        apiUrl: getValueOrDefault(process.env.REACT_APP_API_URL, overrides.apiUrl, configDefault.apiUrl),\r\n        useHashRouter:\r\n            getValueOrDefault(\r\n                process.env.REACT_APP_USE_HASH_ROUTER,\r\n                overrides?.useHashRouter?.toString(),\r\n                configDefault.useHashRouter.toString()\r\n            ) === 'true'\r\n    };\r\n\r\n    ConfigManager.set({ ...configDefault, ...overrides });\r\n\r\n    return ConfigManager.get();\r\n};\r\n","export class Routes {\r\n    static home = '/';\r\n    static auth = '/auth';\r\n    static settings = '/settings';\r\n    static import = '/import';\r\n    static export = '/export';\r\n    static group = '/group';\r\n    static label = '/label';\r\n    static expense = '/expense';\r\n}\r\n","import React from 'react';\r\nimport { User } from 'firebase';\r\n\r\nexport type UserContext = {\r\n    user?: User | null;\r\n    initialising: boolean;\r\n    isReady: boolean;\r\n\r\n    isDarkTheme: boolean;\r\n    setDarkTheme: (dark: boolean) => void;\r\n};\r\n\r\nexport const defaultUserContext: UserContext = {\r\n    initialising: false,\r\n    isReady: false,\r\n\r\n    isDarkTheme: false,\r\n    setDarkTheme: (dark: boolean) => {}\r\n};\r\n\r\nexport const userContext = React.createContext<UserContext>(defaultUserContext);\r\n","import axios, { AxiosError } from 'axios';\r\nimport { ConfigModel } from '../models/config';\r\n\r\nexport enum FetchStatus {\r\n    READY,\r\n    LOADING,\r\n    LOADED,\r\n    ERROR\r\n}\r\n\r\nexport enum StatusCodes {\r\n    OK = 200,\r\n    ERROR = 500\r\n}\r\n\r\nconst handleError = async (error: AxiosError) => {\r\n    if (error.response && error.response.status >= StatusCodes.OK) {\r\n        if (process.env.NODE_ENV !== 'test') {\r\n            // avoid show this when is running test\r\n            console.error('Request Failed:', error.config);\r\n            console.error('Status:', error.response.status);\r\n            console.error('Data:', error.response.data);\r\n            console.error('Headers:', error.response.headers);\r\n        }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n};\r\n\r\nexport class ServiceBase {\r\n    constructor(protected config: ConfigModel) {}\r\n\r\n    protected async resolveMockData<T>(data: T): Promise<T> {\r\n        return new Promise((resolve, _reject) => {\r\n            setTimeout(() => {\r\n                resolve(data);\r\n            }, this.config.requestDelay);\r\n        });\r\n    }\r\n\r\n    protected async rejectMockData<T>(): Promise<T> {\r\n        return new Promise((_resolve, reject) => {\r\n            setTimeout(() => {\r\n                reject();\r\n            }, this.config.requestDelay);\r\n        });\r\n    }\r\n\r\n    protected async get<TResponse>(url: string, params?: { [key: string]: any }): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.get(url, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async post<TResponse>(url: string, params?: { [key: string]: any }, data?: any): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.post(url, data, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async put<TResponse>(url: string, params?: { [key: string]: any }, data?: any): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.put(url, data, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async delete<TResponse>(url: string): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.delete(url, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                }\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n}\r\n","import { UserModel } from '../models/user';\r\n\r\nexport const usersMockData: UserModel[] = [\r\n    { id: '1', displayName: 'User 1', email: 'user1@email.com' },\r\n    { id: '2', displayName: 'User 2', email: 'user2@email.com' },\r\n    { id: '3', displayName: 'User 3', email: 'user3@email.com' },\r\n    { id: '4', displayName: 'User 4', email: 'user4@email.com' },\r\n    { id: '5', displayName: 'User 5', email: 'user5@email.com' }\r\n];\r\n","import { usersMockData } from '../mockData/user';\r\nimport { ApiType, ConfigModel } from '../models/config';\r\nimport { UserModel } from '../models/user';\r\nimport { ServiceBase } from './base';\r\n\r\nexport class UserService extends ServiceBase {\r\n    private baseUrl = '/api/user';\r\n\r\n    constructor(protected config: ConfigModel) {\r\n        super(config);\r\n    }\r\n\r\n    async addOrUpdate(user: UserModel): Promise<UserModel> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<UserModel>(usersMockData[0]);\r\n        }\r\n        return await this.post<UserModel>('/api/user', {}, user);\r\n    }\r\n\r\n    async getAll(): Promise<UserModel[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(usersMockData);\r\n        }\r\n        return await this.get<UserModel[]>(this.baseUrl);\r\n    }\r\n\r\n    // async add(obj: Partial<UserModel>): Promise<UserModel> {\r\n    //     if (this.config.apiUrl === ApiType.FIREBASE) {\r\n    //     } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n    //     } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n    //         return this.resolveMockData(usersMockData[0]);\r\n    //     }\r\n    //     return await this.post<UserModel>(this.baseUrl, {}, obj);\r\n    // }\r\n\r\n    // async update(obj: UserModel): Promise<void> {\r\n    //     if (this.config.apiUrl === ApiType.FIREBASE) {\r\n    //     } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n    //     } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n    //         return this.resolveMockData<void>(undefined);\r\n    //     }\r\n    //     return await this.put<void>(this.baseUrl, {}, obj);\r\n    // }\r\n\r\n    async remove(id: string): Promise<void> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<void>(undefined);\r\n        }\r\n        return await this.delete<void>(this.baseUrl + '/' + id);\r\n    }\r\n}\r\n","import { auth, User } from 'firebase';\r\n// import 'firebase/auth'; // If using Firebase auth\r\n\r\nimport { UserService } from './user';\r\nimport { UserModel } from '../models/user';\r\nimport { ConfigModel } from '../models/config';\r\n\r\nexport const loginWithFacebook = async () => {\r\n    const facebook = new auth.FacebookAuthProvider();\r\n\r\n    try {\r\n        return await auth().signInWithPopup(facebook);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const loginWithEmail = async (email: string, password: string) => {\r\n    try {\r\n        await auth().signInWithEmailAndPassword(email, password);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const createUserWithEmail = async (email: string, password: string) => {\r\n    try {\r\n        await auth().createUserWithEmailAndPassword(email, password);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const resetPassword = async (email: string) => {\r\n    try {\r\n        return await auth().sendPasswordResetEmail(email);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const updateUser = async (config: ConfigModel, user: User, displayName: string) => {\r\n    try {\r\n        await user?.updateProfile({ displayName: displayName });\r\n\r\n        await new UserService(config).addOrUpdate({\r\n            id: user.uid,\r\n            email: user.email,\r\n            displayName: user.displayName,\r\n            photoUrl: user.photoURL\r\n        } as UserModel);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const signOut = () => auth().signOut();\r\n","import { User } from 'firebase';\r\n\r\nimport { UserModel } from '../models/user';\r\nimport { hasValue } from './util';\r\n\r\nexport const getUserDisplayName = (user: User | UserModel) => {\r\n    if (!hasValue(user)) {\r\n        return '';\r\n    }\r\n\r\n    if (hasValue(user.displayName)) {\r\n        return user.displayName?.split(' ')[0];\r\n    }\r\n\r\n    return user.email?.split('@')[0];\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { User } from 'firebase';\r\n\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\n\r\nimport { Routes } from '../../pages/routes';\r\nimport { userContext } from '../../contexts/user';\r\nimport { hasValue } from '../../helpers/util';\r\nimport { signOut } from '../../services/auth';\r\nimport { getUserDisplayName } from '../../helpers/user';\r\n\r\nconst HeaderStyle = createGlobalStyle`\r\n    .navbar-brand {\r\n        cursor: pointer;\r\n    };\r\n`;\r\n\r\nexport type HeaderProps = {};\r\n\r\nexport const HeaderComponent: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\r\n    const { user, initialising, isReady } = useContext(userContext);\r\n    const history = useHistory();\r\n    const [t] = useTranslation();\r\n    const [expanded, setExpand] = React.useState<boolean>(false);\r\n\r\n    const handleToggle = React.useCallback((expanded: boolean) => {\r\n        setExpand(expanded);\r\n    }, []);\r\n\r\n    const handleRedirectTo = React.useCallback(\r\n        (path: string) => {\r\n            setExpand(false);\r\n            if (hasValue(history.location.search)) {\r\n                history.push({ pathname: path, search: history.location.search });\r\n            } else {\r\n                history.push(path);\r\n            }\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const handleLogout = React.useCallback(async () => {\r\n        await signOut();\r\n        setTimeout(() => history.push(Routes.home));\r\n    }, [history]);\r\n\r\n    const authElement = React.useMemo(() => {\r\n        if (hasValue(user)) {\r\n            const displayName = getUserDisplayName(user as User);\r\n            return (\r\n                <Nav>\r\n                    <NavDropdown title={displayName} id=\"collasible-nav-dropdown\">\r\n                        <NavDropdown.Item onClick={() => handleRedirectTo(Routes.settings)}>\r\n                            {t('HEADER.SETTINGS')}\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item onClick={() => handleRedirectTo(Routes.import)}>\r\n                            {t('HEADER.IMPORT')}\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item onClick={() => handleRedirectTo(Routes.export)}>\r\n                            {t('HEADER.EXPORT')}\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick={handleLogout}>{t('HEADER.LOGOUT')}</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Nav>\r\n                <Nav.Link onClick={() => handleRedirectTo(Routes.auth)}>{t('HEADER.LOGIN')}</Nav.Link>\r\n            </Nav>\r\n        );\r\n    }, [user, handleRedirectTo, handleLogout, t]);\r\n\r\n    return (\r\n        <>\r\n            <HeaderStyle />\r\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" onToggle={handleToggle} expanded={expanded}>\r\n                <Container>\r\n                    <Navbar.Brand onClick={() => handleRedirectTo(Routes.home)}>{t('HEADER.TITLE')}</Navbar.Brand>\r\n\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"mr-auto \">\r\n                        {isReady && (\r\n                            <Nav className=\"mr-auto\">\r\n                                <Nav.Link onClick={() => handleRedirectTo(Routes.group)}>{t('HEADER.GROUP')}</Nav.Link>\r\n                                <Nav.Link onClick={() => handleRedirectTo(Routes.label)}>{t('HEADER.LABEL')}</Nav.Link>\r\n                                <Nav.Link onClick={() => handleRedirectTo(Routes.expense)}>\r\n                                    {t('HEADER.EXPENSE')}\r\n                                </Nav.Link>\r\n                            </Nav>\r\n                        )}\r\n                        {!isReady && <Nav className=\"mr-auto\"></Nav>}\r\n                        {!initialising && authElement}\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </>\r\n    );\r\n});\r\n","import { createGlobalStyle} from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n  };\r\n\r\n  .table {\r\n    color: ${({ theme }) => theme.text};\r\n  };\r\n  \r\n  .card {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    border-color:${({ theme }) => theme.toggleBorder};\r\n  };\r\n  .card-header {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    border-color:${({ theme }) => theme.toggleBorder};\r\n  };\r\n\r\n  .form-control {\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n  };\r\n\r\n  .modal-content {\r\n    background-color: ${({ theme }) => theme.body};\r\n    border-color:${({ theme }) => theme.toggleBorder};\r\n  };\r\n  .modal-header {\r\n    background-color: ${({ theme }) => theme.body};\r\n    border-color:${({ theme }) => theme.toggleBorder};\r\n  };\r\n  .modal-body {\r\n    background-color: ${({ theme }) => theme.body};\r\n    border-color:${({ theme }) => theme.toggleBorder};\r\n  };\r\n  .modal-footer {\r\n    background-color: ${({ theme }) => theme.body};\r\n    border-color:${({ theme }) => theme.toggleBorder};\r\n  };\r\n  .close {\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    border-color:${({ theme }) => theme.toggleBorder};\r\n    text-shadow: none;\r\n  };\r\n\r\n  .nav-tabs .nav-link.active, .nav-tabs .nav-item.show .nav-link  {\r\n      background-color: ${({ theme }) => theme.body};\r\n      color: ${({ theme }) => theme.text};\r\n      border-color: ${({ theme }) => theme.toggleBorder};\r\n  };\r\n  .react-icons {\r\n    vertical-align: middle;\r\n  }\r\n  `","export const lightTheme = {\r\n    body: '#f8f9fa',\r\n    text: '#343a40',\r\n    toggleBorder: '#595959',\r\n    gradient: 'linear-gradient(#39598A, #79D7ED)'\r\n};\r\n\r\nexport const darkTheme = {\r\n    body: '#363537',\r\n    text: '#fff',\r\n    toggleBorder: '#646464',\r\n    gradient: 'linear-gradient(#091236, #1E215D)'\r\n};\r\n","import React from 'react';\r\nimport { hasValue } from '../../helpers/util';\r\n\r\nexport interface AlertProps {\r\n    type?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';\r\n    message: string;\r\n}\r\n\r\nexport const AlertComponent: React.FC<AlertProps> = React.memo((props: AlertProps) => {\r\n    const { type = 'danger', message } = props;\r\n\r\n    if (!hasValue(message)) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <div className={`alert alert-${type}`} role=\"alert\">\r\n            {message}\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport { Routes } from '../routes';\r\nimport { loginWithEmail, loginWithFacebook } from '../../services/auth';\r\nimport { AlertComponent } from '../../components/alert/alert';\r\n\r\nconst AuthStyle = createGlobalStyle``;\r\n\r\nexport type AuthProps = {};\r\n\r\nexport const AuthPage: React.FC<AuthProps> = React.memo((props: AuthProps) => {\r\n    const [t] = useTranslation();\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [error, setError] = React.useState<string>('');\r\n\r\n    const [email, setEmail] = React.useState<string>('');\r\n    const [password, setPassword] = React.useState<string>('');\r\n\r\n    const handleFacebook = React.useCallback(async () => {\r\n        setLoading(true);\r\n        setError('');\r\n        try {\r\n            await loginWithFacebook();\r\n            setTimeout(() => history.push(Routes.home));\r\n        } catch (error) {\r\n            setError(t('AUTH.ERROR'));\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [history, t]);\r\n\r\n    const handleChangeEmail = React.useCallback((value: any) => {\r\n        setEmail(value.target.value);\r\n    }, []);\r\n    const handleChangePassword = React.useCallback((value: any) => {\r\n        setPassword(value.target.value);\r\n    }, []);\r\n\r\n    const handleLogin = React.useCallback(async () => {\r\n        setLoading(true);\r\n        setError('');\r\n        try {\r\n            await loginWithEmail(email, password);\r\n            setTimeout(() => history.push(Routes.home));\r\n        } catch {\r\n            setError(t('AUTH.ERROR'));\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [email, password, history, t]);\r\n\r\n    return (\r\n        <>\r\n            <AuthStyle />\r\n            <Container className=\"p-4\">\r\n                <AlertComponent message={error} type=\"danger\" />\r\n                <Row>\r\n                    <Col className=\"p-1\" xs={12} sm={6}>\r\n                        <Card className=\"p-4\">\r\n                            <Card.Title>{t('AUTH.BY_FACEBOOK')}</Card.Title>\r\n                            <Card.Body>\r\n                                <Button onClick={handleFacebook}>{t('AUTH.FACEBOOK')}</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col className=\"p-1\" xs={12} sm={6}>\r\n                        <Card className=\"p-4\">\r\n                            <Card.Title>{t('AUTH.BY_EMAIL')}</Card.Title>\r\n                            <Card.Body>\r\n                                <Form>\r\n                                    <Form.Group controlId=\"formBasicEmail\">\r\n                                        <Form.Label>{t('AUTH.EMAIL')}</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            placeholder={t('AUTH.EMAIL_PLACEHOLDER')}\r\n                                            onChange={handleChangeEmail}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"formBasicPassword\">\r\n                                        <Form.Label>{t('AUTH.PASSWORD')}</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder={t('AUTH.PASSWORD_PLACEHOLDER')}\r\n                                            onChange={handleChangePassword}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Button variant=\"primary\" onClick={handleLogin} disabled={isLoading}>\r\n                                        {t('AUTH.LOGIN')}\r\n                                    </Button>\r\n                                </Form>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\nimport { hasValue } from '../../helpers/util';\n\nexport interface ButtonProps {\n    type?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'link';\n    text?: string;\n    size?: 'sm' | 'lg';\n    icon?: JSX.Element;\n\n    onClick: () => void;\n    className?: string;\n    disabled?: boolean;\n}\n\nexport const ButtonComponent: React.FC<ButtonProps> = React.memo((props: ButtonProps) => {\n    const { size = 'md', className, type = 'primary', icon, text, onClick, disabled } = props;\n\n    if (!hasValue(text) && hasValue(icon)) {\n        return (\n            <>\n                <span role=\"button\" className={className} onClick={onClick}>\n                    {icon}\n                </span>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <button\n                type=\"button\"\n                className={`btn btn-${type} btn-${size} ${className}`}\n                onClick={onClick}\n                disabled={disabled}\n            >\n                <div className=\"d-flex justify-content-center\">\n                    {icon && <div className=\"mr-1 align-middle\">{icon}</div>}\n                    {text}\n                </div>\n            </button>\n        </>\n    );\n});\n","import React from 'react';\r\nimport { ButtonComponent } from '../button/button';\r\n\r\nexport interface ItemsHeaderProps {\r\n    title: string;\r\n    action: string;\r\n    onAction: () => void;\r\n    disableAction?: boolean;\r\n}\r\n\r\nexport const ItemsHeaderComponent: React.FC<ItemsHeaderProps> = React.memo((props: ItemsHeaderProps) => {\r\n    return (\r\n        <div className=\"d-flex justify-content-between mb-2\">\r\n            <h4>{props.title}</h4>\r\n            <ButtonComponent\r\n                className=\"mb-2\"\r\n                type=\"primary\"\r\n                text={props.action}\r\n                onClick={props.onAction}\r\n                disabled={props.disableAction ?? false}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nexport type LoadingProps = {\r\n    isLoading: boolean;\r\n    text?: string;\r\n};\r\n\r\nconst LoadingStyle = createGlobalStyle`\r\n    ._loading_overlay_overlay {\r\n        background: rgba(0,0,0,0.5);\r\n    };\r\n`;\r\n\r\nexport const LoadingComponent: React.FC<React.PropsWithChildren<LoadingProps>> = React.memo(\r\n    (props: React.PropsWithChildren<LoadingProps>) => {\r\n        const [t] = useTranslation();\r\n\r\n        return (\r\n            <>\r\n                <LoadingStyle />\r\n                <LoadingOverlay\r\n                    active={props.isLoading}\r\n                    spinner={\r\n                        <div className=\"spinner-border\" role=\"status\">\r\n                            <span className=\"sr-only\">{t('LOADING')}</span>\r\n                        </div>\r\n                    }\r\n                    text={\r\n                        <>\r\n                            <p>{props.text ?? t('LOADING')}</p>\r\n                        </>\r\n                    }\r\n                >\r\n                    {props.children}\r\n                </LoadingOverlay>\r\n            </>\r\n        );\r\n    }\r\n);\r\n","import React from 'react';\r\nimport { GroupModel } from '../models/group';\r\nimport { LabelModel } from '../models/label';\r\n\r\nexport interface GlobalContext {\r\n    isLoading: boolean;\r\n\r\n    labels: LabelModel[];\r\n\r\n    groups: GroupModel[];\r\n    years: number[];\r\n\r\n    group: number;\r\n    month: number;\r\n    year: number;\r\n\r\n    reloadGroups: () => void;\r\n    reloadLabels: () => void;\r\n}\r\n\r\nexport const defaultGlobalContext: GlobalContext = {\r\n    isLoading: true,\r\n\r\n    labels: [],\r\n\r\n    groups: [],\r\n    years: [],\r\n\r\n    group: 0,\r\n    month: 1,\r\n    year: 2020,\r\n\r\n    reloadGroups: () => {},\r\n    reloadLabels: () => {}\r\n};\r\n\r\nexport const globalContext = React.createContext<GlobalContext>(defaultGlobalContext);\r\n","import React, { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router';\r\nimport queryString from 'query-string';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport { BsSearch } from 'react-icons/bs';\r\n\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport { ButtonComponent } from '../button/button';\r\nimport { globalContext } from '../../contexts/global';\r\n\r\nexport type SearchProps = {};\r\n\r\nconst SearchStyle = createGlobalStyle`\r\n    .search-component {\r\n        .card-header {\r\n            padding: 5px;\r\n            border: none;\r\n        }\r\n        .card-body {\r\n            padding-top: 0;\r\n            padding-bottom: 0;\r\n            padding-right: 10px;\r\n            padding-left: 10px;\r\n        }\r\n        .search-header {\r\n            margin: 0px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SearchComponent: React.FC<SearchProps> = React.memo((props: SearchProps) => {\r\n    const [t] = useTranslation();\r\n    const history = useHistory();\r\n    const global = useContext(globalContext);\r\n\r\n    const [months] = React.useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\r\n    const [group, setGroup] = React.useState<number>(global.group);\r\n    const [month, setMonth] = React.useState<number>(global.month);\r\n    const [year, setYear] = React.useState<number>(global.year);\r\n    const [isExpanded, setExpanded] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        setGroup(global.group);\r\n        setMonth(global.month);\r\n        setYear(global.year);\r\n    }, [global.group, global.month, global.year]);\r\n\r\n    const handleOnChangeGroup = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGroup(event.target.value as number);\r\n    }, []);\r\n    const handleOnChangeMonth = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setMonth(event.target.value as number);\r\n    }, []);\r\n    const handleOnChangeYear = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setYear(event.target.value as number);\r\n    }, []);\r\n\r\n    const handleOnSearch = React.useCallback(() => {\r\n        history.push({\r\n            pathname: history.location.pathname,\r\n            search: queryString.stringify({\r\n                group: group,\r\n                month: month,\r\n                year: year\r\n            })\r\n        });\r\n    }, [history, group, month, year]);\r\n\r\n    const handleExpandCollapse = React.useCallback(() => {\r\n        setExpanded(!isExpanded);\r\n    }, [isExpanded]);\r\n\r\n    const groupsOptions = React.useMemo(\r\n        () =>\r\n            global.groups.map(x => (\r\n                <option key={'GROUP_' + x.id} value={x.id}>\r\n                    {x.name}\r\n                </option>\r\n            )),\r\n        [global.groups]\r\n    );\r\n\r\n    const monthsOptions = React.useMemo(\r\n        () =>\r\n            months.map(x => (\r\n                <option key={'MONTH_' + x} value={x}>\r\n                    {t('MONTHS.' + x)}\r\n                </option>\r\n            )),\r\n        [months, t]\r\n    );\r\n\r\n    const yearsOptions = React.useMemo(\r\n        () =>\r\n            global.years.map(x => (\r\n                <option key={'YEAR_' + x} value={x}>\r\n                    {x}\r\n                </option>\r\n            )),\r\n        [global.years]\r\n    );\r\n\r\n    const headerElement = React.useMemo(() => {\r\n        if (global.isLoading) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner data-testid=\"search-loading\" animation=\"border\" role=\"status\" size=\"sm\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (isExpanded) {\r\n            return (\r\n                <strong>\r\n                    <p className=\"search-header\">{t('SEARCH.HEADER')}</p>\r\n                </strong>\r\n            );\r\n        }\r\n\r\n        const selectedGroup = global.groups.find(g => g.id === group);\r\n\r\n        return (\r\n            <div className=\"d-flex justify-content-around\">\r\n                <p className=\"search-header\">{selectedGroup?.name}</p>\r\n                <p className=\"search-header\">{t('MONTHS.' + month)}</p>\r\n                <p className=\"search-header\">{year}</p>\r\n            </div>\r\n        );\r\n    }, [isExpanded, global.isLoading, global.groups, group, month, year, t]);\r\n\r\n    return (\r\n        <div className=\"search-component mb-2\">\r\n            <SearchStyle />\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" onClick={handleExpandCollapse}>\r\n                            {headerElement}\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                            <Row>\r\n                                <Col xs={12} sm={5}>\r\n                                    <Form.Group>\r\n                                        <Form.Label>{t('SEARCH.GROUP')}</Form.Label>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            size=\"sm\"\r\n                                            value={group}\r\n                                            onChange={handleOnChangeGroup}\r\n                                        >\r\n                                            {groupsOptions}\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col xs={12} sm={4}>\r\n                                    <Form.Group>\r\n                                        <Form.Label>{t('SEARCH.MONTH')}</Form.Label>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            size=\"sm\"\r\n                                            value={month}\r\n                                            onChange={handleOnChangeMonth}\r\n                                        >\r\n                                            {monthsOptions}\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col xs={12} sm={3}>\r\n                                    <Form.Group>\r\n                                        <Form.Label>{t('SEARCH.YEAR')}</Form.Label>\r\n                                        <Form.Control as=\"select\" size=\"sm\" value={year} onChange={handleOnChangeYear}>\r\n                                            {yearsOptions}\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                <ButtonComponent\r\n                                    size=\"sm\"\r\n                                    className=\"mb-2\"\r\n                                    type=\"primary\"\r\n                                    text={t('SEARCH.ACTION')}\r\n                                    icon={<BsSearch size={12} />}\r\n                                    onClick={handleOnSearch}\r\n                                />\r\n                            </div>\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        </div>\r\n    );\r\n});\r\n","import { LabelModel } from './label';\r\n\r\nexport enum ExpenseType {\r\n    INCOMING = 0,\r\n    OUTCOMING\r\n}\r\n\r\nexport interface ExpenseModel {\r\n    id: number;\r\n    name: string;\r\n\r\n    type: ExpenseType;\r\n\r\n    value: number;\r\n    date: Date;\r\n    comments: string;\r\n\r\n    /** relations */\r\n    groupId: number;\r\n    labelId: number;\r\n}\r\n\r\nexport interface ExpenseFullModel {\r\n    id: number;\r\n    name: string;\r\n\r\n    type: ExpenseType;\r\n\r\n    value: number;\r\n    date: Date;\r\n    comments: string;\r\n\r\n    /** relations */\r\n    groupId: number;\r\n    label: LabelModel;\r\n}\r\n","import { GroupFullModel, GroupModel } from '../models/group';\r\nimport { usersMockData } from './user';\r\n\r\nexport const groupsMockData: GroupModel[] = [\r\n    { id: 1, name: 'Group 1', users: usersMockData.map(x => x.id) },\r\n    { id: 2, name: 'Group 2', users: usersMockData.map(x => x.id) },\r\n    { id: 3, name: 'Group 3', users: usersMockData.map(x => x.id) },\r\n    { id: 4, name: 'Group 4', users: usersMockData.map(x => x.id) }\r\n];\r\n\r\nexport const groupsFullMockData: GroupFullModel[] = [\r\n    { id: 1, name: 'Group 1', users: usersMockData },\r\n    { id: 2, name: 'Group 2', users: usersMockData },\r\n    { id: 3, name: 'Group 3', users: usersMockData },\r\n    { id: 4, name: 'Group 4', users: usersMockData }\r\n];\r\n","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { format } from 'date-fns';\n\nimport Form from 'react-bootstrap/Form';\n\nimport { ConfigManager } from '../../configurations/configManager';\nimport { globalContext } from '../../contexts/global';\nimport { hasValue } from '../../helpers/util';\nimport { ConfigModel } from '../../models/config';\nimport { ExpenseFullModel, ExpenseModel, ExpenseType } from '../../models/expense';\nimport { ExpenseService } from '../../services/expense';\nimport { LabelModel } from '../../models/label';\nimport { AlertComponent } from '../../components/alert/alert';\nimport { ModalComponent } from '../../components/modal/modal';\n\nexport enum ExpenseModalType {\n    ADD,\n    EDIT,\n    DUPLICATE\n}\n\nexport type ExpenseModalProps = {\n    type: ExpenseModalType;\n    show: boolean;\n    expense?: ExpenseFullModel;\n    onHide: () => void;\n    onAction: () => void;\n};\n\nexport const ExpenseModalPage: React.FC<ExpenseModalProps> = React.memo((props: ExpenseModalProps) => {\n    const [t] = useTranslation();\n\n    const { show, type: modalType, expense, onAction } = props;\n\n    const { group, labels: labelsGroup } = useContext(globalContext);\n\n    const [error, setError] = React.useState('');\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\n    const [type, setType] = React.useState<ExpenseType>(ExpenseType.OUTCOMING);\n    const [name, setName] = React.useState<string>('');\n    const [value, setValue] = React.useState<number>();\n    const [date, setDate] = React.useState<Date>(new Date());\n    const [label, setLabel] = React.useState<number>();\n    const [labels, setLabels] = React.useState<LabelModel[]>([]);\n    const [comments, setComments] = React.useState<string>('');\n    const [isLoadingAction, setLoadingAction] = React.useState(false);\n\n    //#region handles\n    const handleOnChangeType = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        setType(+event.target.value as ExpenseType);\n    }, []);\n    const handleOnChangeName = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value);\n    }, []);\n    const handleOnChangeValue = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(+event.target.value);\n    }, []);\n    const handleOnChangeDate = React.useCallback(event => {\n        setDate(event.target.value);\n    }, []);\n    const handleOnChangeLabel = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        setLabel(+event.target.value);\n        localStorage.setItem('label', event.target.value);\n    }, []);\n\n    const handleOnChangeComments = React.useCallback(event => {\n        setComments(event.target.value);\n    }, []);\n\n    const handleOnAction = React.useCallback(async () => {\n        setLoadingAction(true);\n\n        const obj = {\n            id: expense?.id ?? 0,\n            type: type,\n            name: name,\n            value: value as number,\n            date: date,\n            labelId: label as number,\n            groupId: group,\n            comments: comments\n        } as ExpenseModel;\n\n        setError('');\n        if (modalType === ExpenseModalType.EDIT && hasValue(expense)) {\n            try {\n                await new ExpenseService(config).update(obj);\n                onAction();\n            } catch {\n                setError(t('EXPENSE.ERROR'));\n            } finally {\n                setLoadingAction(false);\n            }\n        } else {\n            setLoadingAction(true);\n            try {\n                await new ExpenseService(config).add(obj);\n                onAction();\n            } catch {\n                setError(t('EXPENSE.ERROR'));\n            } finally {\n                setLoadingAction(false);\n            }\n        }\n    }, [type, name, value, date, label, comments, t, config, onAction, expense, group, modalType]);\n    //#endregion\n\n    React.useEffect(() => {\n        if (!show) {\n            return;\n        }\n\n        setLabels(labelsGroup);\n        setError('');\n\n        if (expense) {\n            setType(expense?.type);\n            setName(expense?.name);\n            setValue(expense?.value);\n            setDate(expense?.date);\n            setLabel(expense?.label.id);\n            setComments(expense?.comments);\n        } else {\n            setType(ExpenseType.OUTCOMING);\n            setName('');\n            setValue(undefined);\n            setDate(new Date());\n            const l = localStorage.getItem('label');\n            if (hasValue(l) && labelsGroup.some(x => x.id === +(l as string))) {\n                setLabel(+(l as string));\n            } else {\n                setLabel(labelsGroup.length > 0 ? labelsGroup[0].id : undefined);\n            }\n\n            setComments('');\n        }\n    }, [expense, show, labelsGroup]);\n\n    const disabledAction = React.useMemo(() => {\n        if (\n            isLoadingAction ||\n            hasValue(error) ||\n            !hasValue(name) ||\n            !hasValue(value) ||\n            !hasValue(date) ||\n            !hasValue(label)\n        ) {\n            return true;\n        }\n\n        return false;\n    }, [error, name, value, date, label, isLoadingAction]);\n\n    const labelOptions = React.useMemo(\n        () =>\n            labels.map(l => (\n                <option key={l.id} value={l.id}>\n                    {l.name}\n                </option>\n            )),\n        [labels]\n    );\n\n    const title = React.useMemo(() => {\n        if (modalType === ExpenseModalType.DUPLICATE) {\n            return t('EXPENSE.MODAL.DUPLICATE_TITLE');\n        } else if (modalType === ExpenseModalType.EDIT) {\n            return t('EXPENSE.MODAL.EDIT_TITLE');\n        }\n        return t('EXPENSE.MODAL.ADD_TITLE');\n    }, [modalType, t]);\n\n    const action = React.useMemo(() => {\n        if (modalType === ExpenseModalType.DUPLICATE) {\n            return t('EXPENSE.MODAL.DUPLICATE_ACTION');\n        } else if (modalType === ExpenseModalType.EDIT) {\n            return t('EXPENSE.MODAL.EDIT_ACTION');\n        }\n        return t('EXPENSE.MODAL.ADD_ACTION');\n    }, [modalType, t]);\n\n    return (\n        <>\n            <ModalComponent\n                show={props.show}\n                size={'lg'}\n                title={title}\n                onHide={props.onHide}\n                onAction={handleOnAction}\n                actionText={action}\n                actionDisable={disabledAction}\n            >\n                <AlertComponent message={error} type=\"danger\" />\n                <Form>\n                    <Form.Group controlId=\"formLabel\">\n                        <Form.Label>{t('EXPENSE.MODAL.TYPE')}</Form.Label>\n                        <Form.Control as=\"select\" value={type ?? ''} onChange={handleOnChangeType}>\n                            <option key={ExpenseType.OUTCOMING} value={ExpenseType.OUTCOMING}>\n                                {t('EXPENSE.OUTCOMING')}\n                            </option>\n                            <option key={ExpenseType.INCOMING} value={ExpenseType.INCOMING}>\n                                {t('EXPENSE.INCOMING')}\n                            </option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"formName\">\n                        <Form.Label>{t('EXPENSE.MODAL.NAME')}</Form.Label>\n                        <Form.Control\n                            data-testid=\"expense-name-field\"\n                            type=\"text\"\n                            value={name}\n                            placeholder={t('EXPENSE.MODAL.NAME_PLACEHOLDER')}\n                            onChange={handleOnChangeName}\n                        />\n                    </Form.Group>\n                    <Form.Group controlId=\"formValue\">\n                        <Form.Label>{t('EXPENSE.MODAL.VALUE')}</Form.Label>\n                        <Form.Control\n                            data-testid=\"expense-value-field\"\n                            type=\"number\"\n                            value={value ?? ''}\n                            placeholder={t('EXPENSE.MODAL.VALUE_PLACEHOLDER')}\n                            onChange={handleOnChangeValue}\n                        />\n                    </Form.Group>\n                    <Form.Group controlId=\"formDate\">\n                        <Form.Label>{t('EXPENSE.MODAL.DATE')}</Form.Label>\n                        <Form.Control\n                            data-testid=\"expense-date-field\"\n                            type=\"date\"\n                            value={format(new Date(date), t('EXPENSE.FIELD_DATE_FORMAT'))}\n                            onChange={handleOnChangeDate}\n                        />\n                    </Form.Group>\n                    <Form.Group controlId=\"formLabel\">\n                        <Form.Label>{t('EXPENSE.MODAL.LABEL')}</Form.Label>\n                        <Form.Control as=\"select\" value={label ?? ''} onChange={handleOnChangeLabel}>\n                            {labelOptions}\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"formComments\">\n                        <Form.Label>{t('EXPENSE.MODAL.COMMENTS')}</Form.Label>\n                        <Form.Control\n                            data-testid=\"expense-comments-field\"\n                            as=\"textarea\"\n                            rows={2}\n                            value={comments}\n                            placeholder={t('EXPENSE.MODAL.COMMENTS_PLACEHOLDER')}\n                            onChange={handleOnChangeComments}\n                        />\n                    </Form.Group>\n                </Form>\n            </ModalComponent>\n        </>\n    );\n});\n","import { LabelFullModel, LabelModel } from '../models/label';\r\n\r\nexport const labelsMockData: LabelModel[] = [\r\n    { id: 1, name: 'Label 1', groupId: 1 },\r\n    { id: 2, name: 'Label 2', groupId: 1 },\r\n    { id: 3, name: 'Label 3', groupId: 2 },\r\n    { id: 4, name: 'Label 4', groupId: 2 }\r\n];\r\n\r\nexport const labelsFullMockData: LabelFullModel[] = [\r\n    { id: 1, name: 'Label 1', groupId: 1, currValue: 1.11, lastValue: 5, avgValue: 6.33 },\r\n    { id: 2, name: 'Label 2', groupId: 1, currValue: 2.11, lastValue: 4, avgValue: 5.33 },\r\n    { id: 3, name: 'Label 3', groupId: 2, currValue: 3.11, lastValue: 3, avgValue: 4.33 },\r\n    { id: 4, name: 'Label 4', groupId: 2, currValue: 4.11, lastValue: 2, avgValue: 3.33 }\r\n];\r\n","import { ExpenseFullModel, ExpenseModel, ExpenseType } from '../models/expense';\r\nimport { groupsMockData } from './group';\r\nimport { labelsMockData } from './label';\r\n\r\nexport const expensesMockData: ExpenseModel[] = [\r\n    {\r\n        id: 1,\r\n        name: 'Expense 1',\r\n        type: ExpenseType.OUTCOMING,\r\n        value: 1.11,\r\n        date: new Date(2020, 0, 1),\r\n        comments: 'Comments 1',\r\n        groupId: groupsMockData[0].id,\r\n        labelId: labelsMockData[0].id\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Expense 2',\r\n        type: ExpenseType.OUTCOMING,\r\n        value: 2.11,\r\n        date: new Date(),\r\n        comments: 'Comments 2',\r\n        groupId: groupsMockData[0].id,\r\n        labelId: labelsMockData[1].id\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Expense 3',\r\n        type: ExpenseType.INCOMING,\r\n        value: 3.11,\r\n        date: new Date(),\r\n        comments: 'Comments 3',\r\n        groupId: groupsMockData[0].id,\r\n        labelId: labelsMockData[2].id\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Expense 4',\r\n        type: ExpenseType.INCOMING,\r\n        value: 4.11,\r\n        date: new Date(),\r\n        comments: 'Comments 3',\r\n        groupId: groupsMockData[0].id,\r\n        labelId: labelsMockData[3].id\r\n    }\r\n];\r\n\r\nexport const expensesFullMockData: ExpenseFullModel[] = [\r\n    {\r\n        id: 1,\r\n        name: 'Expense 1',\r\n        type: ExpenseType.OUTCOMING,\r\n        value: 1.11,\r\n        date: new Date(2020, 0, 1),\r\n        comments: 'Comments 1',\r\n        groupId: groupsMockData[0].id,\r\n        label: labelsMockData[0]\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Expense 2',\r\n        type: ExpenseType.OUTCOMING,\r\n        value: 2.11,\r\n        date: new Date(),\r\n        comments: 'Comments 2',\r\n        groupId: groupsMockData[0].id,\r\n        label: labelsMockData[1]\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Expense 3',\r\n        type: ExpenseType.INCOMING,\r\n        value: 3.11,\r\n        date: new Date(),\r\n        comments: 'Comments 3',\r\n        groupId: groupsMockData[0].id,\r\n        label: labelsMockData[2]\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Expense 4',\r\n        type: ExpenseType.INCOMING,\r\n        value: 4.11,\r\n        date: new Date(),\r\n        comments: 'Comments 4',\r\n        groupId: groupsMockData[0].id,\r\n        label: labelsMockData[3]\r\n    }\r\n];\r\n\r\nexport const yearsMockData: number[] = [2015, 2016, 2017, 2018, 2019, 2020];\r\n","import { expensesFullMockData, expensesMockData, yearsMockData } from '../mockData/expense';\r\nimport { ApiType, ConfigModel } from '../models/config';\r\nimport { ExpenseFullModel, ExpenseModel } from '../models/expense';\r\nimport { ServiceBase } from './base';\r\n\r\nexport class ExpenseService extends ServiceBase {\r\n    private baseUrl = '/api/expense';\r\n\r\n    constructor(protected config: ConfigModel) {\r\n        super(config);\r\n    }\r\n\r\n    async getYears(group: number): Promise<number[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(yearsMockData);\r\n        }\r\n        return await this.get<number[]>(this.baseUrl + '/years', { group: group });\r\n    }\r\n\r\n    async getAllFull(group: number, month: number, year: number): Promise<ExpenseFullModel[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(expensesFullMockData);\r\n        }\r\n        return await this.get<ExpenseFullModel[]>(this.baseUrl + '/full', { group: group, month: month, year: year });\r\n    }\r\n\r\n    async getAll(group: number): Promise<ExpenseModel[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(expensesMockData);\r\n        }\r\n        return await this.get<ExpenseModel[]>(this.baseUrl, { group: group });\r\n    }\r\n\r\n    async add(obj: Partial<ExpenseModel>): Promise<ExpenseModel> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(expensesMockData[0]);\r\n        }\r\n        return await this.post<ExpenseModel>(this.baseUrl, {}, obj);\r\n    }\r\n\r\n    async update(obj: ExpenseModel): Promise<void> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<void>(undefined);\r\n        }\r\n        return await this.put<void>(this.baseUrl, {}, obj);\r\n    }\r\n\r\n    async remove(id: number): Promise<void> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<void>(undefined);\r\n        }\r\n        return await this.delete<void>(this.baseUrl + '/' + id);\r\n    }\r\n}\r\n","import React from 'react';\n\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nexport type ModalProps = {\n    show: boolean;\n    title: string;\n    size?: 'lg' | 'sm' | 'xl' | undefined;\n    actionText: string;\n    actionVariant?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'light' | 'link';\n    actionDisable?: boolean;\n    onHide: () => void;\n    onAction: () => void;\n};\n\nexport const ModalComponent: React.FC<React.PropsWithChildren<ModalProps>> = React.memo(\n    (props: React.PropsWithChildren<ModalProps>) => {\n        const {\n            show,\n            title,\n            size = 'xl',\n            actionText,\n            actionVariant = 'primary',\n            actionDisable = false,\n            onAction,\n            onHide\n        } = props;\n\n        return (\n            <>\n                <Modal show={show} onHide={onHide} size={size} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{props.children}</Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            data-testid=\"action-button\"\n                            variant={actionVariant}\n                            onClick={onAction}\n                            disabled={actionDisable}\n                        >\n                            {actionText}\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n);\n","import React from 'react';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ModalComponent } from '../modal/modal';\r\n\r\nexport interface ItemProps {\r\n    id: number;\r\n    name: string;\r\n    onEdit?: (id: number) => void;\r\n    onDuplicate?: (id: number) => void;\r\n    onDelete?: (id: number) => void;\r\n}\r\n\r\nexport const ItemComponent: React.FC<React.PropsWithChildren<ItemProps>> = React.memo(\r\n    (props: React.PropsWithChildren<ItemProps>) => {\r\n        const [t] = useTranslation();\r\n        const [showDeleteModal, setShowDeleteModal] = React.useState(false);\r\n\r\n        const { id, onEdit, onDelete, onDuplicate } = props;\r\n\r\n        const handleOnHide = React.useCallback(() => {\r\n            setShowDeleteModal(false);\r\n        }, []);\r\n\r\n        const handleOnShowDeleteModel = React.useCallback(() => {\r\n            setShowDeleteModal(true);\r\n        }, []);\r\n\r\n        const handleOnEdit = React.useCallback(() => {\r\n            if (onEdit) {\r\n                onEdit(id);\r\n            }\r\n        }, [onEdit, id]);\r\n\r\n        const handleOnDuplicate = React.useCallback(() => {\r\n            if (onDuplicate) {\r\n                onDuplicate(id);\r\n            }\r\n        }, [onDuplicate, id]);\r\n\r\n        const handleOnDelete = React.useCallback(() => {\r\n            if (onDelete) {\r\n                onDelete(id);\r\n                handleOnHide();\r\n            }\r\n        }, [onDelete, handleOnHide, id]);\r\n\r\n        return (\r\n            <div className=\"item-component\">\r\n                <Card key={`${props.id}_${props.name}`} className=\"mb-2 mt-2\">\r\n                    <Card.Body className=\"p-2\">\r\n                        <div className=\"row align-items-center\">\r\n                            <div className=\"col pr-0\">\r\n                                <h6>{props.name}</h6>\r\n                                {props.children}\r\n                            </div>\r\n                            <div className=\"col-auto\">\r\n                                <DropdownButton size=\"sm\" variant=\"secondary\" title=\"\" id={`menu-${props.id}`}>\r\n                                    {props.onEdit && (\r\n                                        <Dropdown.Item eventKey=\"1\" onClick={handleOnEdit}>\r\n                                            {t('ITEM.EDIT')}\r\n                                        </Dropdown.Item>\r\n                                    )}\r\n                                    {props.onDuplicate && (\r\n                                        <Dropdown.Item eventKey=\"1\" onClick={handleOnDuplicate}>\r\n                                            {t('ITEM.DUPLICATE')}\r\n                                        </Dropdown.Item>\r\n                                    )}\r\n                                    {props.onDelete && (\r\n                                        <Dropdown.Item eventKey=\"2\" onClick={handleOnShowDeleteModel}>\r\n                                            {t('ITEM.DELETE')}\r\n                                        </Dropdown.Item>\r\n                                    )}\r\n                                </DropdownButton>\r\n                            </div>\r\n                        </div>\r\n                    </Card.Body>\r\n                </Card>\r\n                <ModalComponent\r\n                    show={showDeleteModal}\r\n                    title={t('ITEM.DELETE_TITLE')}\r\n                    actionText={t('ITEM.DELETE_ACTION')}\r\n                    actionVariant={'danger'}\r\n                    onHide={handleOnHide}\r\n                    onAction={handleOnDelete}\r\n                    size=\"sm\"\r\n                >\r\n                    <p>{t('ITEM.DELETE_QUESTON')}</p>\r\n                </ModalComponent>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { format } from 'date-fns';\n\nimport { ItemComponent } from '../../components/item/item';\nimport { ExpenseFullModel } from '../../models/expense';\n\nexport type ExpenseItemsProps = {\n    items: ExpenseFullModel[];\n    onEdit: (id: number) => void;\n    onDuplicate: (id: number) => void;\n    onDelete: (id: number) => void;\n};\n\nexport const ExpenseItemsPage: React.FC<ExpenseItemsProps> = React.memo((props: ExpenseItemsProps) => {\n    const [t] = useTranslation();\n\n    return (\n        <>\n            {props.items.map(item => (\n                <ItemComponent\n                    key={item.id}\n                    id={item.id}\n                    name={item.name}\n                    onEdit={() => props.onEdit(item.id)}\n                    onDuplicate={() => props.onDuplicate(item.id)}\n                    onDelete={() => props.onDelete(item.id)}\n                >\n                    <div className=\"d-flex justify-content-between\">\n                        <h6 className=\"no-margin\">\n                            {/* <small>{t('EXPENSE.VALUE')}</small> */}\n                            {/* <br></br> */ ' '}\n                            <small>{item.value.toFixed(2)}</small>\n                        </h6>\n                        <h6 className=\"no-margin\">\n                            {/* <small>{t('EXPENSE.DATE')}</small> */}\n                            {/* <br></br> */ ' '}\n                            <small>{format(new Date(item.date), t('EXPENSE.DATE_FORMAT'))}</small>\n                        </h6>\n                        <h6 className=\"no-margin\">\n                            {/* <small>{t('EXPENSE.LABEL')}</small> */}\n                            {/* <br></br> */ ' '}\n                            <small>{item.label.name}</small>\n                        </h6>\n                    </div>\n                </ItemComponent>\n            ))}\n        </>\n    );\n});\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { ExpenseFullModel } from '../../models/expense';\n\nexport type ExpenseSummaryProps = {\n    incoming: ExpenseFullModel[];\n    outcoming: ExpenseFullModel[];\n};\n\nexport const ExpenseSummaryPage: React.FC<ExpenseSummaryProps> = React.memo((props: ExpenseSummaryProps) => {\n    const [t] = useTranslation();\n\n    const { incoming, outcoming } = props;\n\n    const [totalIncoming, setTotalIncoming] = React.useState<number>(0);\n    const [totalOutcoming, setTotalOutcoming] = React.useState<number>(0);\n    const [totalLeft, setTotalLeft] = React.useState<number>(0);\n    const [totalLeftPer, setTotalLeftPer] = React.useState<number>(0);\n\n    React.useEffect(() => {\n        const tmpTotalIncoming = incoming.reduce((sum, current) => sum + current.value, 0);\n        const tmpTotalOutcoming = outcoming.reduce((sum, current) => sum + current.value, 0);\n\n        setTotalIncoming(tmpTotalIncoming);\n        setTotalOutcoming(tmpTotalOutcoming);\n\n        const tmpTotalLeft = tmpTotalIncoming - tmpTotalOutcoming;\n\n        setTotalLeft(tmpTotalLeft);\n        if (tmpTotalIncoming === 0) {\n            setTotalLeftPer(0);\n        } else {\n            const left = (tmpTotalLeft / tmpTotalIncoming) * 100;\n            setTotalLeftPer(left);\n        }\n    }, [incoming, outcoming]);\n\n    return (\n        <>\n            <div className=\"mt-2 row\">\n                <div className=\"col\">\n                    <p>{t('EXPENSE.TOTAL_INCOMING')}</p>\n                </div>\n                <div className=\"col\">{totalIncoming.toFixed(2)}</div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <p>{t('EXPENSE.TOTAL_OUTCOMING')}</p>\n                </div>\n                <div className=\"col\">{totalOutcoming.toFixed(2)}</div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <p>{t('EXPENSE.TOTAL_LEFT')}</p>\n                </div>\n                <div className=\"col\">{`${totalLeft.toFixed(2)} - ${totalLeftPer.toFixed(2)}%`}</div>\n            </div>\n        </>\n    );\n});\n","import React, { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\n\r\nimport { AlertComponent } from '../../components/alert/alert';\r\nimport { ItemsHeaderComponent } from '../../components/itemsHeader/itemsHeader';\r\nimport { LoadingComponent } from '../../components/loading/loading';\r\nimport { SearchComponent } from '../../components/search/search';\r\nimport { ConfigManager } from '../../configurations/configManager';\r\nimport { defaultGlobalContext, globalContext } from '../../contexts/global';\r\nimport { ConfigModel } from '../../models/config';\r\nimport { ExpenseFullModel, ExpenseType } from '../../models/expense';\r\nimport { ExpenseService } from '../../services/expense';\r\nimport { ExpenseItemsPage } from './expenseItems';\r\nimport { ExpenseSummaryPage } from './expenseSummary';\r\nimport { ExpenseModalPage, ExpenseModalType } from '../expenseModal/expenseModal';\r\nimport { hasValue } from '../../helpers/util';\r\n\r\nexport type ExpenseProps = {};\r\n\r\nconst ExpenseStyle = createGlobalStyle`\r\n    .no-margin {\r\n        margin: 0px;\r\n    };\r\n    canvas {\r\n        max-width: 500px;\r\n    };\r\n    .red-text {\r\n        color: #dc3545;\r\n    }\r\n`;\r\n\r\nexport const ExpensePage: React.FC<ExpenseProps> = React.memo((props: ExpenseProps) => {\r\n    const [t] = useTranslation();\r\n    const global = useContext(globalContext);\r\n\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n    const [error, setError] = React.useState<string>('');\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [expenses, setExpenses] = React.useState<ExpenseFullModel[]>([]);\r\n    const [expense, setExpense] = React.useState<ExpenseFullModel>();\r\n    const [showModal, setShowModal] = React.useState<boolean>(false);\r\n    const [modalType, setModalType] = React.useState<ExpenseModalType>(ExpenseModalType.ADD);\r\n    const [refresh, setRefresh] = React.useState<boolean>(false);\r\n\r\n    // #region main\r\n    React.useEffect(() => {\r\n        if (global.isLoading) {\r\n            return;\r\n        }\r\n\r\n        const runAsync = async () => {\r\n            setError('');\r\n            setLoading(true);\r\n            try {\r\n                const data = await new ExpenseService(config).getAllFull(global.group, global.month, global.year);\r\n                setExpenses(data);\r\n            } catch {\r\n                setExpenses([]);\r\n                setError(t('LABEL.ERROR'));\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        runAsync();\r\n    }, [global, config, t, refresh]);\r\n    // #endregion\r\n\r\n    // #region handles\r\n    const handleOnAdd = React.useCallback(() => {\r\n        setExpense(undefined);\r\n        setModalType(ExpenseModalType.ADD);\r\n        setShowModal(true);\r\n    }, []);\r\n\r\n    const handleOnEdit = React.useCallback(\r\n        (id: number) => {\r\n            setExpense(expenses.find(x => x.id === id));\r\n            setModalType(ExpenseModalType.EDIT);\r\n            setShowModal(true);\r\n        },\r\n        [expenses]\r\n    );\r\n\r\n    const handleOnDuplicate = React.useCallback(\r\n        (id: number) => {\r\n            setExpense(expenses.find(x => x.id === id));\r\n            setModalType(ExpenseModalType.DUPLICATE);\r\n            setShowModal(true);\r\n        },\r\n        [expenses]\r\n    );\r\n\r\n    const handleOnDelete = React.useCallback(\r\n        async (id: number) => {\r\n            try {\r\n                await new ExpenseService(config).remove(id);\r\n                setTimeout(() => {\r\n                    setRefresh(!refresh);\r\n                }, config.requestDelay);\r\n            } catch {\r\n                setError(t('LABEL.ERROR'));\r\n            }\r\n        },\r\n        [config, t, refresh]\r\n    );\r\n\r\n    const handleOnHide = React.useCallback(() => {\r\n        setShowModal(false);\r\n    }, []);\r\n\r\n    const handleOnAction = React.useCallback(() => {\r\n        setShowModal(false);\r\n        setTimeout(() => {\r\n            setRefresh(!refresh);\r\n        }, config.requestDelay);\r\n    }, [config, refresh]);\r\n    // #endregion\r\n\r\n    //#region items\r\n    const incomingItems = React.useMemo(() => {\r\n        return expenses.filter(x => x.type === +ExpenseType.INCOMING);\r\n    }, [expenses]);\r\n\r\n    const outcomingItems = React.useMemo(() => {\r\n        return expenses.filter(x => x.type === +ExpenseType.OUTCOMING);\r\n    }, [expenses]);\r\n    //#endregion\r\n\r\n    const alertsElement = React.useMemo(() => {\r\n        if (global.group === defaultGlobalContext.group || !hasValue(global.groups) || !hasValue(global.labels)) {\r\n            return <AlertComponent message={t('EXPENSE.EMPTY_GROUP')} type=\"warning\" />;\r\n        }\r\n        if (expenses.length === 0 && !hasValue(error)) {\r\n            return <AlertComponent message={t('EXPENSE.EMPTY')} type=\"warning\" />;\r\n        }\r\n        return <AlertComponent message={error} type=\"danger\" />;\r\n    }, [expenses, error, t, global]);\r\n\r\n    const disableAction = React.useMemo(() => {\r\n        return isLoading || global.isLoading || !hasValue(global.groups) || !hasValue(global.labels);\r\n    }, [isLoading, global]);\r\n\r\n    return (\r\n        <>\r\n            <ExpenseStyle />\r\n            <SearchComponent />\r\n            <ItemsHeaderComponent\r\n                title={t('EXPENSE.TITLE')}\r\n                action={t('EXPENSE.ADD')}\r\n                onAction={handleOnAdd}\r\n                disableAction={disableAction}\r\n            />\r\n            {alertsElement}\r\n            <LoadingComponent isLoading={isLoading || global.isLoading}>\r\n                <Tabs defaultActiveKey=\"summary\">\r\n                    <Tab eventKey=\"summary\" title={t('EXPENSE.SUMMARY')}>\r\n                        <ExpenseSummaryPage incoming={incomingItems} outcoming={outcomingItems} />\r\n                    </Tab>\r\n                    <Tab eventKey=\"incoming\" title={t('EXPENSE.INCOMING')}>\r\n                        <ExpenseItemsPage\r\n                            items={incomingItems}\r\n                            onEdit={handleOnEdit}\r\n                            onDuplicate={handleOnDuplicate}\r\n                            onDelete={handleOnDelete}\r\n                        />\r\n                    </Tab>\r\n                    <Tab eventKey=\"outcoming\" title={t('EXPENSE.OUTCOMING')}>\r\n                        <ExpenseItemsPage\r\n                            items={outcomingItems}\r\n                            onEdit={handleOnEdit}\r\n                            onDuplicate={handleOnDuplicate}\r\n                            onDelete={handleOnDelete}\r\n                        />\r\n                    </Tab>\r\n                </Tabs>\r\n            </LoadingComponent>\r\n            <ExpenseModalPage\r\n                show={showModal}\r\n                type={modalType}\r\n                expense={expense}\r\n                onHide={handleOnHide}\r\n                onAction={handleOnAction}\r\n            />\r\n        </>\r\n    );\r\n});\r\n","import { groupsFullMockData, groupsMockData } from '../mockData/group';\r\nimport { ApiType, ConfigModel } from '../models/config';\r\nimport { GroupFullModel, GroupModel } from '../models/group';\r\nimport { ServiceBase } from './base';\r\n\r\nexport class GroupService extends ServiceBase {\r\n    private baseUrl = '/api/group';\r\n\r\n    constructor(protected config: ConfigModel) {\r\n        super(config);\r\n    }\r\n\r\n    async getAllFull(user: string): Promise<GroupFullModel[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(groupsFullMockData);\r\n            //return this.rejectMockData();\r\n        }\r\n        return await this.get<GroupFullModel[]>(this.baseUrl + '/full', { user: user });\r\n    }\r\n\r\n    async getAll(): Promise<GroupModel[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(groupsMockData);\r\n        }\r\n        return await this.get<GroupModel[]>(this.baseUrl);\r\n    }\r\n\r\n    async add(obj: Partial<GroupModel>): Promise<GroupModel> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(groupsMockData[0]);\r\n        }\r\n        return await this.post<GroupModel>(\r\n            this.baseUrl,\r\n            {},\r\n            {\r\n                ...obj,\r\n                // TODO refactor back end to use array of strings\r\n                users: obj.users?.map(x => {\r\n                    return {\r\n                        id: x\r\n                    };\r\n                })\r\n            }\r\n        );\r\n    }\r\n\r\n    async update(obj: GroupModel): Promise<void> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<void>(undefined);\r\n        }\r\n        return await this.put<void>(\r\n            this.baseUrl,\r\n            {},\r\n            {\r\n                // TODO refactor back end to use array of strings\r\n                ...obj,\r\n                users: obj.users?.map(x => {\r\n                    return {\r\n                        id: x\r\n                    };\r\n                })\r\n            }\r\n        );\r\n    }\r\n\r\n    async remove(id: number): Promise<void> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<void>(undefined);\r\n        }\r\n        return await this.delete<void>(this.baseUrl + '/' + id);\r\n    }\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { ConfigModel } from '../../models/config';\r\nimport { ConfigManager } from '../../configurations/configManager';\r\nimport { userContext } from '../../contexts/user';\r\nimport { UserService } from '../../services/user';\r\nimport { UserModel } from '../../models/user';\r\nimport { hasValue } from '../../helpers/util';\r\nimport { GroupFullModel } from '../../models/group';\r\nimport { GroupService } from '../../services/group';\r\nimport { AlertComponent } from '../../components/alert/alert';\r\nimport { ModalComponent } from '../../components/modal/modal';\r\n\r\nexport type GroupModalProps = {\r\n    show: boolean;\r\n    group?: GroupFullModel;\r\n    onHide: () => void;\r\n    onAction: () => void;\r\n};\r\n\r\nexport const GroupModalPage: React.FC<GroupModalProps> = React.memo((props: GroupModalProps) => {\r\n    const [t] = useTranslation();\r\n\r\n    const { user } = useContext(userContext);\r\n\r\n    const [error, setError] = React.useState('');\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n    const [name, setName] = React.useState<string>('');\r\n    const [selectedUsers, setSelectedUsers] = React.useState<string[]>([]);\r\n    const [users, setUsers] = React.useState<UserModel[]>([]);\r\n    const [isLoadingUsers, setLoadingUsers] = React.useState(false);\r\n    const [isLoadingAction, setLoadingAction] = React.useState(false);\r\n\r\n    const handleOnChangeName = React.useCallback(event => {\r\n        setName(event.target.value);\r\n    }, []);\r\n\r\n    const handleOnChangeUsers = React.useCallback(event => {\r\n        setSelectedUsers(Array.from(event.target.selectedOptions, (option: any) => option.value));\r\n    }, []);\r\n\r\n    const handleOnAction = React.useCallback(async () => {\r\n        setLoadingAction(true);\r\n\r\n        setError('');\r\n        if (hasValue(props.group)) {\r\n            try {\r\n                await new GroupService(config).update({\r\n                    id: props.group?.id as number,\r\n                    name: name,\r\n                    users: selectedUsers\r\n                });\r\n                props.onAction();\r\n            } catch {\r\n                setError(t('GROUP.ERROR'));\r\n            } finally {\r\n                setLoadingAction(false);\r\n            }\r\n        } else {\r\n            setLoadingAction(true);\r\n            try {\r\n                await new GroupService(config).add({ name: name, users: selectedUsers });\r\n                props.onAction();\r\n            } catch {\r\n                setError(t('GROUP.ERROR'));\r\n            } finally {\r\n                setLoadingAction(false);\r\n            }\r\n        }\r\n    }, [name, selectedUsers, t, config, props]);\r\n\r\n    React.useEffect(() => {\r\n        if (!props.show) {\r\n            return;\r\n        }\r\n\r\n        if (props.group) {\r\n            setName(props.group?.name);\r\n            setSelectedUsers(props.group?.users.map(x => x.id));\r\n        } else {\r\n            setName('');\r\n            user && setSelectedUsers([user.uid]);\r\n        }\r\n    }, [props, user]);\r\n\r\n    React.useEffect(() => {\r\n        const runAsync = async () => {\r\n            setLoadingUsers(true);\r\n            setError('');\r\n            try {\r\n                const data = await new UserService(config).getAll();\r\n                setUsers(data);\r\n            } catch {\r\n                setError(t('GROUP.ERROR'));\r\n            } finally {\r\n                setLoadingUsers(false);\r\n            }\r\n        };\r\n        runAsync();\r\n    }, [t, config]);\r\n\r\n    const disabledAction = React.useMemo(() => {\r\n        if (isLoadingAction) {\r\n            return true;\r\n        }\r\n\r\n        if (hasValue(error)) {\r\n            return true;\r\n        }\r\n\r\n        if (!hasValue(name) || !hasValue(selectedUsers)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }, [error, name, selectedUsers, isLoadingAction]);\r\n\r\n    const usersOption = React.useMemo(\r\n        () =>\r\n            users.map(u =>\r\n                user?.uid === u.id ? (\r\n                    <option key={u.id} value={u.id}>\r\n                        {t('GROUP.YOU')}\r\n                    </option>\r\n                ) : (\r\n                    <option key={u.id} value={u.id}>{`${u.displayName} (${u.email})`}</option>\r\n                )\r\n            ),\r\n        [users, user, t]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <ModalComponent\r\n                show={props.show}\r\n                size={'lg'}\r\n                title={hasValue(props.group) ? t('GROUP.MODAL.EDIT_TITLE') : t('GROUP.MODAL.ADD_TITLE')}\r\n                onHide={props.onHide}\r\n                onAction={handleOnAction}\r\n                actionText={hasValue(props.group) ? t('GROUP.MODAL.EDIT_ACTION') : t('GROUP.MODAL.ADD_ACTION')}\r\n                actionDisable={disabledAction}\r\n            >\r\n                <AlertComponent message={error} type=\"danger\" />\r\n                <Form>\r\n                    <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>{t('GROUP.MODAL.NAME')}</Form.Label>\r\n                        <Form.Control\r\n                            data-testid=\"group-name-field\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            placeholder={t('GROUP.MODAL.NAME_PLACEHOLDER')}\r\n                            onChange={handleOnChangeName}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                        <Form.Label>{t('GROUP.MODAL.USERS')}</Form.Label>\r\n                        <Form.Control\r\n                            data-testid=\"group-users-field\"\r\n                            as=\"select\"\r\n                            multiple\r\n                            value={selectedUsers}\r\n                            readOnly={isLoadingUsers && hasValue(error)}\r\n                            onChange={handleOnChangeUsers}\r\n                        >\r\n                            {usersOption}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Form>\r\n            </ModalComponent>\r\n        </>\r\n    );\r\n});\r\n","import React, { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport { ConfigManager } from '../../configurations/configManager';\r\nimport { userContext } from '../../contexts/user';\r\nimport { ConfigModel } from '../../models/config';\r\nimport { GroupFullModel } from '../../models/group';\r\nimport { GroupService } from '../../services/group';\r\nimport { getUserDisplayName } from '../../helpers/user';\r\nimport { GroupModalPage } from '../groupModal/groupModal';\r\nimport { ItemComponent } from '../../components/item/item';\r\nimport { LoadingComponent } from '../../components/loading/loading';\r\nimport { ItemsHeaderComponent } from '../../components/itemsHeader/itemsHeader';\r\nimport { AlertComponent } from '../../components/alert/alert';\r\nimport { globalContext } from '../../contexts/global';\r\nimport { hasValue } from '../../helpers/util';\r\n\r\nconst GroupStyle = createGlobalStyle``;\r\n\r\nexport type GroupProps = {};\r\n\r\nexport const GroupPage: React.FC<GroupProps> = React.memo((props: GroupProps) => {\r\n    const [t] = useTranslation();\r\n    const { user, isReady } = useContext(userContext);\r\n    const { reloadGroups } = useContext(globalContext);\r\n\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [group, setGroup] = React.useState<GroupFullModel>();\r\n    const [groups, setGroups] = React.useState<GroupFullModel[]>([]);\r\n    const [error, setError] = React.useState<string>('');\r\n    const [showModal, setShowModal] = React.useState<boolean>(false);\r\n    const [refresh, setRefresh] = React.useState<boolean>(false);\r\n\r\n    const handleOnAdd = React.useCallback(() => {\r\n        setGroup(undefined);\r\n        setShowModal(true);\r\n    }, []);\r\n\r\n    const handleOnEdit = React.useCallback(\r\n        (id: number) => {\r\n            setGroup(groups.find(g => g.id === id));\r\n            setShowModal(true);\r\n        },\r\n        [groups]\r\n    );\r\n\r\n    const handleOnDelete = React.useCallback(\r\n        async (id: number) => {\r\n            setError('');\r\n            try {\r\n                await new GroupService(config).remove(id);\r\n                setTimeout(() => {\r\n                    reloadGroups();\r\n                    setRefresh(!refresh);\r\n                }, config.requestDelay);\r\n            } catch {\r\n                setError(t('GROUP.ERROR'));\r\n            }\r\n        },\r\n        [config, refresh, t, reloadGroups]\r\n    );\r\n\r\n    const handleOnHide = React.useCallback(() => {\r\n        setShowModal(false);\r\n    }, []);\r\n\r\n    const handleOnAction = React.useCallback(() => {\r\n        setShowModal(false);\r\n\r\n        setTimeout(() => {\r\n            reloadGroups();\r\n            setRefresh(!refresh);\r\n        }, config.requestDelay);\r\n    }, [config, refresh, reloadGroups]);\r\n\r\n    React.useEffect(() => {\r\n        if (!isReady) {\r\n            return;\r\n        }\r\n\r\n        setError('');\r\n        const setup = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const data = await new GroupService(config).getAllFull(user?.uid ?? '');\r\n                setGroups(data);\r\n            } catch {\r\n                setGroups([]);\r\n                setError(t('GROUP.ERROR'));\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        setup();\r\n    }, [isReady, config, user, refresh, t]);\r\n\r\n    const groupElements = React.useMemo(() => {\r\n        if (!isLoading && groups.length === 0 && !hasValue(error)) {\r\n            return <AlertComponent message={t('GROUP.EMPTY')} type=\"warning\" />;\r\n        }\r\n        if (hasValue(error)) {\r\n            return <AlertComponent message={error} type=\"danger\" />;\r\n        }\r\n\r\n        return groups.map((group, index) => (\r\n            <ItemComponent\r\n                key={group.id}\r\n                id={group.id}\r\n                name={group.name}\r\n                onEdit={handleOnEdit}\r\n                onDelete={handleOnDelete}\r\n            >\r\n                <div key={`GROUP_USERS_${index}`} className=\"d-flex flex-wrap justify-content-start\">\r\n                    {group.users.map((u, indexUser) => (\r\n                        <small key={`GROUP_SMALL_${index}_${indexUser}`} className=\"mr-2\">\r\n                            {user && user.uid === u.id ? t('GROUP.YOU') : getUserDisplayName(u)}\r\n                        </small>\r\n                    ))}\r\n                </div>\r\n            </ItemComponent>\r\n        ));\r\n    }, [user, isLoading, error, groups, handleOnEdit, handleOnDelete, t]);\r\n\r\n    return (\r\n        <>\r\n            <GroupStyle />\r\n            <ItemsHeaderComponent\r\n                title={t('GROUP.TITLE')}\r\n                action={t('GROUP.ADD')}\r\n                onAction={handleOnAdd}\r\n                disableAction={isLoading}\r\n            />\r\n            <LoadingComponent isLoading={isLoading}>{groupElements}</LoadingComponent>\r\n            <GroupModalPage show={showModal} group={group} onHide={handleOnHide} onAction={handleOnAction} />\r\n        </>\r\n    );\r\n});\r\n","import React, { useContext } from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport 'chartjs-plugin-colorschemes';\r\n\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\n\r\nimport { SearchComponent } from '../../components/search/search';\r\nimport { ConfigManager } from '../../configurations/configManager';\r\nimport { defaultGlobalContext, globalContext } from '../../contexts/global';\r\nimport { ConfigModel } from '../../models/config';\r\nimport { LabelFullModel } from '../../models/label';\r\nimport { LabelService } from '../../services/label';\r\nimport { ItemComponent } from '../../components/item/item';\r\nimport { LabelModalPage } from '../labelModal/labelModal';\r\nimport { LoadingComponent } from '../../components/loading/loading';\r\nimport { AlertComponent } from '../../components/alert/alert';\r\nimport { ItemsHeaderComponent } from '../../components/itemsHeader/itemsHeader';\r\nimport { hasValue } from '../../helpers/util';\r\n\r\nexport type LabelProps = {};\r\n\r\nenum LabelGrapyType {\r\n    CURRENT_MONTH = 1,\r\n    LAST_MONTH,\r\n    AVERAGE\r\n}\r\n\r\nconst LabelStyle = createGlobalStyle`\r\n    .no-margin {\r\n        margin: 0px;\r\n    };\r\n    canvas {\r\n        max-width: 500px;\r\n    };\r\n`;\r\n\r\nexport const LabelPage: React.FC<LabelProps> = React.memo((_props: LabelProps) => {\r\n    const [t] = useTranslation();\r\n\r\n    const { isLoading: isLoadingGlobal, group, groups, month, year, reloadLabels } = useContext(globalContext);\r\n\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n    const [error, setError] = React.useState<string>('');\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [labels, setLabels] = React.useState<LabelFullModel[]>([]);\r\n    const [label, setLabel] = React.useState<LabelFullModel>();\r\n    const [showModal, setShowModal] = React.useState<boolean>(false);\r\n    const [refresh, setRefresh] = React.useState<boolean>(false);\r\n    const [graphType, setGrahType] = React.useState(LabelGrapyType.CURRENT_MONTH);\r\n\r\n    // #region main\r\n    React.useEffect(() => {\r\n        if (isLoadingGlobal) {\r\n            return;\r\n        }\r\n\r\n        const runAsync = async () => {\r\n            setLoading(true);\r\n            setError('');\r\n            try {\r\n                const data = await new LabelService(config).getAllFull(group, month, year);\r\n                setLabels(data);\r\n            } catch {\r\n                setLabels([]);\r\n                setError(t('LABEL.ERROR'));\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        runAsync();\r\n    }, [isLoadingGlobal, group, month, year, config, t, refresh]);\r\n    // #endregion\r\n\r\n    // #region handles\r\n    const handleOnAdd = React.useCallback(() => {\r\n        setLabel(undefined);\r\n        setShowModal(true);\r\n    }, []);\r\n\r\n    const handleOnEdit = React.useCallback(\r\n        (id: number) => {\r\n            setLabel(labels.find(g => g.id === id));\r\n            setShowModal(true);\r\n        },\r\n        [labels]\r\n    );\r\n\r\n    const handleOnDelete = React.useCallback(\r\n        async (id: number) => {\r\n            setError('');\r\n            try {\r\n                await new LabelService(config).remove(id);\r\n                setTimeout(() => {\r\n                    reloadLabels();\r\n                    setRefresh(!refresh);\r\n                }, config.requestDelay);\r\n            } catch {\r\n                setError(t('LABEL.ERROR'));\r\n            }\r\n        },\r\n        [config, t, refresh, reloadLabels]\r\n    );\r\n\r\n    const handleOnHide = React.useCallback(() => {\r\n        setShowModal(false);\r\n    }, []);\r\n\r\n    const handleOnAction = React.useCallback(() => {\r\n        setShowModal(false);\r\n        setTimeout(() => {\r\n            reloadLabels();\r\n            setRefresh(!refresh);\r\n        }, config.requestDelay);\r\n    }, [config, refresh, reloadLabels]);\r\n\r\n    const handleOnGraphType = React.useCallback((value: number) => {\r\n        setGrahType(value);\r\n    }, []);\r\n    // #endregion\r\n\r\n    // #region items\r\n    const itemsElements = React.useMemo(() => {\r\n        return labels.map(label => {\r\n            const currValueClass =\r\n                label.currValue > label.lastValue || label.currValue > label.avgValue ? 'text-danger' : '';\r\n            const lastValueClass = label.lastValue > label.avgValue ? 'text-danger' : '';\r\n\r\n            return (\r\n                <ItemComponent\r\n                    key={label.id}\r\n                    id={label.id}\r\n                    name={label.name}\r\n                    onEdit={handleOnEdit}\r\n                    onDelete={handleOnDelete}\r\n                >\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <h6 className={`no-margin ${currValueClass}`}>\r\n                            <small>\r\n                                <small>{t('LABEL.CURRENT_MONTH')}</small>\r\n                            </small>\r\n                            <br></br>\r\n                            <small>{label.currValue.toFixed(2)}</small>\r\n                        </h6>\r\n                        <h6 className={`no-margin ${lastValueClass}`}>\r\n                            <small>\r\n                                <small>{t('LABEL.LAST_MONTH')}</small>\r\n                            </small>\r\n                            <br></br>\r\n                            <small>{label.lastValue.toFixed(2)}</small>\r\n                        </h6>\r\n                        <h6 className=\"no-margin\">\r\n                            <small>\r\n                                <small>{t('LABEL.AVERAGE')}</small>\r\n                            </small>\r\n                            <br></br>\r\n                            <small>{label.avgValue.toFixed(2)}</small>\r\n                        </h6>\r\n                    </div>\r\n                </ItemComponent>\r\n            );\r\n        });\r\n    }, [labels, handleOnEdit, handleOnDelete, t]);\r\n    // #endregion\r\n\r\n    // #region graph\r\n    const graphElement = React.useMemo(() => {\r\n        return (\r\n            <Pie\r\n                key={graphType}\r\n                data={\r\n                    labels.length > 0\r\n                        ? {\r\n                              labels: labels.map(label => label.name),\r\n                              datasets: [\r\n                                  {\r\n                                      data: labels.map(label =>\r\n                                          graphType === LabelGrapyType.CURRENT_MONTH\r\n                                              ? label.currValue\r\n                                              : graphType === LabelGrapyType.LAST_MONTH\r\n                                              ? label.lastValue\r\n                                              : label.avgValue\r\n                                      ),\r\n                                      borderWidth: 0\r\n                                  }\r\n                              ]\r\n                          }\r\n                        : {\r\n                              labels: ['Empty'],\r\n                              datasets: [\r\n                                  {\r\n                                      data: [1],\r\n                                      borderWidth: 0\r\n                                  }\r\n                              ]\r\n                          }\r\n                }\r\n                options={{\r\n                    plugins: {\r\n                        colorschemes: {\r\n                            scheme: 'office.Excel16'\r\n                        }\r\n                    }\r\n                }}\r\n                width={100}\r\n                height={100}\r\n            />\r\n        );\r\n    }, [labels, graphType]);\r\n    // #endregion\r\n\r\n    const alertElements = React.useMemo(() => {\r\n        if (group === defaultGlobalContext.group) {\r\n            return <AlertComponent message={t('LABEL.EMPTY_GROUP')} type=\"warning\" />;\r\n        }\r\n        if (!isLoading && !isLoadingGlobal && labels.length === 0 && !hasValue(error)) {\r\n            return <AlertComponent message={t('LABEL.EMPTY')} type=\"warning\" />;\r\n        }\r\n        return <AlertComponent message={error} type=\"danger\" />;\r\n    }, [error, group, isLoading, isLoadingGlobal, labels, t]);\r\n\r\n    return (\r\n        <>\r\n            <LabelStyle />\r\n            <SearchComponent />\r\n            <ItemsHeaderComponent\r\n                title={t('LABEL.TITLE')}\r\n                action={t('LABEL.ADD')}\r\n                onAction={handleOnAdd}\r\n                disableAction={isLoading || isLoadingGlobal || !hasValue(groups)}\r\n            />\r\n            {alertElements}\r\n            <LoadingComponent isLoading={isLoading || isLoadingGlobal}>\r\n                <Tabs defaultActiveKey=\"items\">\r\n                    <Tab eventKey=\"items\" title={t('LABEL.TAB_ITEMS')}>\r\n                        {itemsElements}\r\n                    </Tab>\r\n                    <Tab eventKey=\"graph\" title={t('LABEL.TAB_GRAPH')}>\r\n                        <div className=\"m-2 d-flex justify-content-center\">\r\n                            <ToggleButtonGroup\r\n                                type=\"radio\"\r\n                                name=\"options\"\r\n                                value={graphType}\r\n                                onChange={handleOnGraphType}\r\n                            >\r\n                                <ToggleButton value={LabelGrapyType.CURRENT_MONTH}>\r\n                                    {t('LABEL.CURRENT_MONTH')}\r\n                                </ToggleButton>\r\n                                <ToggleButton value={LabelGrapyType.LAST_MONTH}>{t('LABEL.LAST_MONTH')}</ToggleButton>\r\n                                <ToggleButton value={LabelGrapyType.AVERAGE}>{t('LABEL.AVERAGE')}</ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            {/* ignore chart.js on testing */}\r\n                            {process.env.NODE_ENV !== 'test' && graphElement}\r\n                        </div>\r\n                    </Tab>\r\n                </Tabs>\r\n            </LoadingComponent>\r\n            <LabelModalPage show={showModal} label={label} onHide={handleOnHide} onAction={handleOnAction} />\r\n        </>\r\n    );\r\n});\r\n","import { labelsFullMockData, labelsMockData } from '../mockData/label';\r\nimport { ApiType, ConfigModel } from '../models/config';\r\nimport { LabelFullModel, LabelModel } from '../models/label';\r\nimport { ServiceBase } from './base';\r\n\r\nexport class LabelService extends ServiceBase {\r\n    private baseUrl = '/api/label';\r\n\r\n    constructor(protected config: ConfigModel) {\r\n        super(config);\r\n    }\r\n\r\n    async getAllFull(group: number, month: number, year: number): Promise<LabelFullModel[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(labelsFullMockData);\r\n        }\r\n        return await this.get<LabelFullModel[]>(this.baseUrl + '/full', {\r\n            group: group,\r\n            month: month,\r\n            year: year\r\n        });\r\n    }\r\n\r\n    async getAll(group: number): Promise<LabelModel[]> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(labelsMockData);\r\n        }\r\n        return await this.get<LabelModel[]>(this.baseUrl, { group: group });\r\n    }\r\n\r\n    async add(obj: Partial<LabelModel>): Promise<LabelModel> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData(labelsMockData[0]);\r\n        }\r\n        return await this.post<LabelModel>(this.baseUrl, { group: obj.groupId }, obj);\r\n    }\r\n\r\n    async update(obj: LabelModel): Promise<void> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<void>(undefined);\r\n        }\r\n        return await this.put<void>(this.baseUrl, {}, obj);\r\n    }\r\n\r\n    async remove(id: number): Promise<void> {\r\n        if (this.config.apiUrl === ApiType.FIREBASE) {\r\n        } else if (this.config.apiUrl === ApiType.LOCAL_STORAGE) {\r\n        } else if (this.config.apiUrl === ApiType.TOTAL_FAKE) {\r\n            return this.resolveMockData<void>(undefined);\r\n        }\r\n        return await this.delete<void>(this.baseUrl + '/' + id);\r\n    }\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { ConfigModel } from '../../models/config';\r\nimport { ConfigManager } from '../../configurations/configManager';\r\nimport { hasValue } from '../../helpers/util';\r\nimport { LabelFullModel } from '../../models/label';\r\nimport { LabelService } from '../../services/label';\r\nimport { globalContext } from '../../contexts/global';\r\nimport { AlertComponent } from '../../components/alert/alert';\r\nimport { ModalComponent } from '../../components/modal/modal';\r\n\r\nexport type LabelModalProps = {\r\n    show: boolean;\r\n    label?: LabelFullModel;\r\n    onHide: () => void;\r\n    onAction: () => void;\r\n};\r\n\r\nexport const LabelModalPage: React.FC<LabelModalProps> = React.memo((props: LabelModalProps) => {\r\n    const [t] = useTranslation();\r\n\r\n    const { show, label } = props;\r\n\r\n    const { group } = useContext(globalContext);\r\n\r\n    const [error, setError] = React.useState('');\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n    const [name, setName] = React.useState<string>('');\r\n    const [isLoadingAction, setLoadingAction] = React.useState(false);\r\n\r\n    const handleOnChangeName = React.useCallback(event => {\r\n        setName(event.target.value);\r\n    }, []);\r\n\r\n    const handleOnAction = React.useCallback(async () => {\r\n        setLoadingAction(true);\r\n\r\n        setError('');\r\n        if (hasValue(props.label)) {\r\n            try {\r\n                await new LabelService(config).update({\r\n                    ...(props.label as LabelFullModel),\r\n                    name: name\r\n                });\r\n                props.onAction();\r\n            } catch {\r\n                setError(t('LABEL.ERROR'));\r\n            } finally {\r\n                setLoadingAction(false);\r\n            }\r\n        } else {\r\n            setLoadingAction(true);\r\n            try {\r\n                await new LabelService(config).add({ name: name, groupId: group });\r\n                props.onAction();\r\n            } catch {\r\n                setError(t('LABEL.ERROR'));\r\n            } finally {\r\n                setLoadingAction(false);\r\n            }\r\n        }\r\n    }, [name, t, config, props, group]);\r\n\r\n    React.useEffect(() => {\r\n        if (!show) {\r\n            return;\r\n        }\r\n\r\n        if (label) {\r\n            setName(label?.name ?? '');\r\n        } else {\r\n            setName('');\r\n        }\r\n    }, [show, label]);\r\n\r\n    const disabledAction = React.useMemo(() => {\r\n        if (isLoadingAction || hasValue(error) || !hasValue(name)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }, [error, name, isLoadingAction]);\r\n\r\n    return (\r\n        <>\r\n            <ModalComponent\r\n                show={props.show}\r\n                size={'lg'}\r\n                title={hasValue(props.label) ? t('LABEL.MODAL.EDIT_TITLE') : t('LABEL.MODAL.ADD_TITLE')}\r\n                onHide={props.onHide}\r\n                onAction={handleOnAction}\r\n                actionText={hasValue(props.label) ? t('LABEL.MODAL.EDIT_ACTION') : t('LABEL.MODAL.ADD_ACTION')}\r\n                actionDisable={disabledAction}\r\n            >\r\n                <AlertComponent message={error} type=\"danger\" />\r\n                <Form>\r\n                    <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>{t('LABEL.MODAL.NAME')}</Form.Label>\r\n                        <Form.Control\r\n                            data-testid=\"label-name-field\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            placeholder={t('LABEL.MODAL.NAME_PLACEHOLDER')}\r\n                            onChange={handleOnChangeName}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </ModalComponent>\r\n\r\n            {/* <Modal show={props.show} onHide={props.onHide} size=\"lg\" centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        {hasValue(props.label) ? t('LABEL.MODAL.EDIT_TITLE') : t('LABEL.MODAL.ADD_TITLE')}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ErrorComponent message={error} />\r\n                    <Form>\r\n                        <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                            <Form.Label>{t('LABEL.MODAL.NAME')}</Form.Label>\r\n                            <Form.Control\r\n                                data-testid=\"label-name-field\"\r\n                                type=\"text\"\r\n                                value={name}\r\n                                placeholder={t('LABEL.MODAL.NAME_PLACEHOLDER')}\r\n                                onChange={handleOnChangeName}\r\n                            />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={handleOnAction} disabled={disabledAction}>\r\n                        {hasValue(props.label) ? t('LABEL.MODAL.EDIT_ACTION') : t('LABEL.MODAL.ADD_ACTION')}\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal> */}\r\n        </>\r\n    );\r\n});\r\n","export const getFirebaseConfig = (projectId: string, apiKey: string) => ({\r\n    apiKey: apiKey,\r\n    authDomain: `${projectId}.firebaseapp.com`,\r\n    databaseURL: `https://${projectId}.firebaseio.com`,\r\n    projectId: projectId,\r\n    storageBucket: projectId,\r\n    messagingSenderId: 'my-sender-id'\r\n});\r\n","import React, { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { User } from 'firebase';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { userContext } from '../../contexts/user';\r\nimport { ItemsHeaderComponent } from '../../components/itemsHeader/itemsHeader';\r\nimport { ConfigModel } from '../../models/config';\r\nimport { ConfigManager } from '../../configurations/configManager';\r\nimport { updateUser } from '../../services/auth';\r\nimport { AlertComponent } from '../../components/alert/alert';\r\n\r\nexport type SettingsProps = {};\r\n\r\nexport const SettingsPage: React.FC<SettingsProps> = React.memo((props: SettingsProps) => {\r\n    const user = useContext(userContext);\r\n    const [t] = useTranslation();\r\n\r\n    const [displayName, setDisplayName] = React.useState<string>('');\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n    const [error, setError] = React.useState<string>('');\r\n\r\n    const handleOnChangeDarkTheme = React.useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            user.setDarkTheme(event.target.checked);\r\n        },\r\n        [user]\r\n    );\r\n\r\n    const handleOnChangeDisplayName = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDisplayName(event.target.value);\r\n    }, []);\r\n\r\n    const handleOnUpdate = React.useCallback(async () => {\r\n        setLoading(true);\r\n        setError('');\r\n        try {\r\n            await updateUser(config, user.user as User, displayName);\r\n        } catch {\r\n            setError(t('SETTINGS.ERROR'));\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [displayName, config, user.user, t]);\r\n\r\n    React.useEffect(() => {\r\n        setDisplayName(user.user?.displayName ?? '');\r\n    }, [user.user]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"m-2 d-flex justify-content-center\">\r\n                <div className=\"col-xs-12 col-sm-8 col-md-6\">\r\n                    <ItemsHeaderComponent\r\n                        title={t('SETTINGS.TITLE')}\r\n                        action={t('SETTINGS.UPDATE')}\r\n                        onAction={handleOnUpdate}\r\n                        disableAction={isLoading}\r\n                    />\r\n                    <AlertComponent message={error} type=\"danger\" />\r\n                    <Form>\r\n                        <Form.Check\r\n                            className=\"mb-2\"\r\n                            type=\"switch\"\r\n                            id=\"custom-switch\"\r\n                            label={t('SETTINGS.DARK_THEME')}\r\n                            checked={user.isDarkTheme}\r\n                            onChange={handleOnChangeDarkTheme}\r\n                        />\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>{t('SETTINGS.DISPLAY_NAME')}</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder={t('SETTINGS.DISPLAY_NAME_PLACEHOLDER')}\r\n                                value={displayName}\r\n                                onChange={handleOnChangeDisplayName}\r\n                            />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n","import React, { useContext } from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { userContext } from '../contexts/user';\r\n\r\ninterface PrivateRouteProps {\r\n    component: any;\r\n    path?: string;\r\n}\r\n\r\nexport const PrivateRoute = ({ component: Component, path, ...other }: PrivateRouteProps) => {\r\n    const { user } = useContext(userContext);\r\n    return user ? <Component /> : <Redirect to=\"/auth\" />;\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { format, isValid } from 'date-fns';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { globalContext } from '../../contexts/global';\r\nimport { AlertComponent } from '../../components/alert/alert';\r\nimport { ItemsHeaderComponent } from '../../components/itemsHeader/itemsHeader';\r\nimport { ExpenseFullModel, ExpenseType } from '../../models/expense';\r\nimport { hasValue } from '../../helpers/util';\r\nimport { LabelService } from '../../services/label';\r\nimport { ExpenseService } from '../../services/expense';\r\nimport { ConfigModel } from '../../models/config';\r\nimport { ConfigManager } from '../../configurations/configManager';\r\nimport { csvToExpenses } from '../../helpers/csvToExpenses';\r\n\r\nexport type ImportProps = {};\r\n\r\nconst defaultSeparator = ';';\r\n\r\nexport const ImportPage: React.FC<ImportProps> = React.memo((props: ImportProps) => {\r\n    const [t] = useTranslation();\r\n    const { isLoading: isLoadingGlobal, groups, group: groupGlobal, labels } = useContext(globalContext);\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n\r\n    enum StatusType {\r\n        NOT_PROCESSED = 'to do',\r\n        PROCESSING = 'doing',\r\n        PROCESSED = 'done',\r\n        ERROR = 'error'\r\n    }\r\n\r\n    const [isLoading, setLoading] = React.useState(false);\r\n    const [group, setGroup] = React.useState(groupGlobal);\r\n    const [data, setData] = React.useState('');\r\n    const [expenses, setExpenses] = React.useState<ExpenseFullModel[]>([]);\r\n    const [status, setStatus] = React.useState<StatusType[]>([]);\r\n    const [separator, setSeparator] = React.useState<string>(defaultSeparator);\r\n    const [error, setError] = React.useState('');\r\n    const [total, setTotal] = React.useState(0);\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const groupsOptions = React.useMemo(\r\n        () =>\r\n            groups.map(x => (\r\n                <option key={'GROUP_' + x.id} value={x.id}>\r\n                    {x.name}\r\n                </option>\r\n            )),\r\n        [groups]\r\n    );\r\n\r\n    const disabledAction = React.useMemo(() => {\r\n        if (!hasValue(separator) || isLoading || isLoadingGlobal) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [separator, isLoading, isLoadingGlobal]);\r\n\r\n    const handleOnAction = React.useCallback(async () => {\r\n        setLoading(true);\r\n        setTotal(expenses.length);\r\n        setValue(0);\r\n        for (let index = 0; index < expenses.length; index++) {\r\n            const expense = expenses[index];\r\n\r\n            status[index] = StatusType.PROCESSING;\r\n            setStatus({ ...status });\r\n\r\n            if (!isValid(expense.date)) {\r\n                status[index] = StatusType.ERROR;\r\n                setStatus({ ...status });\r\n                continue;\r\n            }\r\n\r\n            // for debug propuse\r\n            // await new Promise((resolve, _reject) => {\r\n            //     setTimeout(() => {\r\n            //         resolve(data);\r\n            //     }, 5000);\r\n            // });\r\n\r\n            // check if the label already exist\r\n            let label = labels.find(l => l.name.trim().toLowerCase() === expense.label.name.trim().toLowerCase());\r\n            if (!hasValue(label)) {\r\n                try {\r\n                    // create if not\r\n                    label = await new LabelService(config).add({ name: expense.label.name.trim(), groupId: group });\r\n                    labels.push(label);\r\n                } catch {\r\n                    status[index] = StatusType.ERROR;\r\n                    setStatus({ ...status });\r\n                    setValue(index + 1);\r\n                    setError(t('IMPORT.ERROR'));\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            try {\r\n                await new ExpenseService(config).add({ ...expense, labelId: label?.id });\r\n            } catch {\r\n                status[index] = StatusType.ERROR;\r\n                setStatus({ ...status });\r\n                setValue(index + 1);\r\n                setError(t('IMPORT.ERROR'));\r\n                continue;\r\n            }\r\n\r\n            status[index] = StatusType.PROCESSED;\r\n            setStatus({ ...status });\r\n            setValue(index + 1);\r\n        }\r\n        setLoading(false);\r\n    }, [t, group, labels, expenses, config, status, StatusType.ERROR, StatusType.PROCESSING, StatusType.PROCESSED]);\r\n\r\n    const handleOnChangeGroup = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setGroup(+event.target.value);\r\n    }, []);\r\n\r\n    const handleOnChangeSeparator = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSeparator(event.target.value);\r\n    }, []);\r\n\r\n    const handleOnChangeData = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setData(event.target.value);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!hasValue(separator)) {\r\n            setExpenses([]);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const tmpExpenses = csvToExpenses(group, data, '\\n', separator, t('EXPENSE.DATE_FORMAT'));\r\n            setStatus(tmpExpenses.map(_ => StatusType.NOT_PROCESSED));\r\n            setExpenses(tmpExpenses);\r\n        } catch {\r\n            setExpenses([]);\r\n        }\r\n    }, [separator, data, group, t, StatusType.NOT_PROCESSED]);\r\n\r\n    const progressElement = React.useMemo(() => {\r\n        if (!isLoading) {\r\n            return <></>;\r\n        }\r\n\r\n        const tmp = total === 0 || value === 0 ? 0 : (value / total) * 100;\r\n\r\n        const styles = {\r\n            width: `${tmp.toFixed(0)}%`\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div className=\"card mb-2\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"progress\">\r\n                        <div\r\n                            className={`progress-bar progress-bar-striped ${\r\n                                hasValue(error) ? 'bg-danger' : 'bg-success'\r\n                            }`}\r\n                            role=\"progressbar\"\r\n                            style={styles}\r\n                            aria-valuenow={tmp}\r\n                            aria-valuemin={0}\r\n                            aria-valuemax={100}\r\n                        >\r\n                            {`${value}/${total}`}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* <button type=\"button\" className=\"btn btn-danger\" onClick={() => setCancel(true)}>\r\n                    {t('IMPORT.CANCEL')}\r\n                </button> */}\r\n            </div>\r\n        );\r\n    }, [isLoading, error, value, total]);\r\n\r\n    const expensesRows = React.useMemo(() => {\r\n        return expenses.map((expense, index) => {\r\n            return (\r\n                <tr key={index}>\r\n                    <th scope=\"row\">{index + 1}</th>\r\n                    <td\r\n                        className={\r\n                            status[index] === StatusType.ERROR\r\n                                ? 'text-danger'\r\n                                : status[index] === StatusType.PROCESSED\r\n                                ? 'text-success'\r\n                                : ''\r\n                        }\r\n                    >\r\n                        {status[index].toString()}\r\n                    </td>\r\n                    <td>{expense.type === ExpenseType.INCOMING ? t('EXPENSE.INCOMING') : t('EXPENSE.OUTCOMING')}</td>\r\n                    <td>{expense.name}</td>\r\n                    <td>{expense.value.toFixed(2)}</td>\r\n                    <td>\r\n                        {isValid(expense.date)\r\n                            ? format(new Date(expense.date), t('IMPORT.TABLE.DATE_FORMAT'))\r\n                            : t('IMPORT.TABLE.INVALID_DATE')}\r\n                    </td>\r\n                    <td>{expense.label.name}</td>\r\n                    <td>{expense.comments}</td>\r\n                </tr>\r\n            );\r\n        });\r\n    }, [expenses, status, t, StatusType.ERROR, StatusType.PROCESSED]);\r\n\r\n    return (\r\n        <>\r\n            <ItemsHeaderComponent\r\n                title={t('IMPORT.TITLE')}\r\n                action={t('IMPORT.ACTION')}\r\n                onAction={handleOnAction}\r\n                disableAction={disabledAction}\r\n            />\r\n            <AlertComponent message={error} type=\"danger\" />\r\n            <AlertComponent\r\n                message={!isLoadingGlobal && groups.length === 0 ? t('EXPORT.EMPTY_GROUP') : ''}\r\n                type=\"warning\"\r\n            />\r\n            <Form>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12 col-md-6 col-lg-4\">\r\n                        <Form.Group>\r\n                            <Form.Label>{t('IMPORT.GROUP')}</Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                value={group}\r\n                                onChange={handleOnChangeGroup}\r\n                                data-testid=\"import-group-field\"\r\n                            >\r\n                                {groupsOptions}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-sm-12 col-md-6 col-lg-4\">\r\n                        <Form.Group>\r\n                            <Form.Label>{t('IMPORT.SEPARATOR')}</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={separator}\r\n                                onChange={handleOnChangeSeparator}\r\n                                data-testid=\"import-separator-field\"\r\n                            />\r\n                        </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-sm-12\">\r\n                        <Form.Group controlId=\"formImportData\">\r\n                            <Form.Label>{t('IMPORT.DATA')}</Form.Label>\r\n                            <Form.Text className=\"text-muted\">{t('IMPORT.DATA_TEXT')}</Form.Text>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                rows={10}\r\n                                placeholder={t('IMPORT.DATA_PLACEHOLDER')}\r\n                                value={data}\r\n                                onChange={handleOnChangeData}\r\n                                data-testid=\"import-data-field\"\r\n                            />\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n            </Form>\r\n            {progressElement}\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">{t('IMPORT.TABLE.NUMBER')}</th>\r\n                            <th scope=\"col\">{t('IMPORT.TABLE.STATUS')}</th>\r\n                            <th scope=\"col\">{t('IMPORT.TABLE.TYPE')}</th>\r\n                            <th scope=\"col\">{t('IMPORT.TABLE.NAME')}</th>\r\n                            <th scope=\"col\">{t('IMPORT.TABLE.VALUE')}</th>\r\n                            <th scope=\"col\">{t('IMPORT.TABLE.DATE')}</th>\r\n                            <th scope=\"col\">{t('IMPORT.TABLE.LABEL')}</th>\r\n                            <th scope=\"col\">{t('IMPORT.TABLE.COMMENTS')}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>{expensesRows}</tbody>\r\n                </table>\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n","import { parse } from 'date-fns';\r\nimport { ExpenseFullModel, ExpenseType } from '../models/expense';\r\n\r\nexport const csvToExpenses = (\r\n    group: number,\r\n    data: string,\r\n    splitByRow: string,\r\n    splitByCol: string,\r\n    dateFormat: string\r\n): ExpenseFullModel[] => {\r\n    let tmpExpenses: ExpenseFullModel[] = [];\r\n\r\n    try {\r\n        data.split(splitByRow).forEach(row => {\r\n            const col = row.split(splitByCol);\r\n\r\n            if (col.length < 5) {\r\n                return;\r\n            }\r\n\r\n            tmpExpenses.push({\r\n                id: 0,\r\n                type: +col[0] as ExpenseType,\r\n                name: col[1],\r\n                value: +col[2],\r\n                date: parse(col[3], dateFormat, new Date()),\r\n                label: {\r\n                    id: 0,\r\n                    name: col[4],\r\n                    groupId: group\r\n                },\r\n                groupId: group,\r\n                comments: col[5]\r\n            });\r\n        });\r\n    } catch {\r\n        return [];\r\n    }\r\n\r\n    return tmpExpenses;\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { AlertComponent } from '../../components/alert/alert';\r\nimport { ItemsHeaderComponent } from '../../components/itemsHeader/itemsHeader';\r\nimport { ConfigManager } from '../../configurations/configManager';\r\nimport { globalContext } from '../../contexts/global';\r\nimport { hasValue } from '../../helpers/util';\r\nimport { ConfigModel } from '../../models/config';\r\nimport { ExpenseService } from '../../services/expense';\r\nimport { LoadingComponent } from '../../components/loading/loading';\r\nimport { format } from 'date-fns';\r\n\r\nexport type ExportProps = {};\r\n\r\nconst defaultSeparator = ';';\r\n\r\nexport const ExportPage: React.FC<ExportProps> = React.memo((props: ExportProps) => {\r\n    const [t] = useTranslation();\r\n    const { group: groupGlobal, groups, labels, isLoading: isLoadingGlobal } = useContext(globalContext);\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n\r\n    const [isLoading, setLoading] = React.useState(false);\r\n    const [group, setGroup] = React.useState(groupGlobal);\r\n    const [separator, setSeparator] = React.useState<string>(defaultSeparator);\r\n    const [error, setError] = React.useState('');\r\n    const [data, setData] = React.useState('');\r\n    const [empty, setEmpty] = React.useState('');\r\n\r\n    const groupsOptions = React.useMemo(\r\n        () =>\r\n            groups.map(x => (\r\n                <option key={'GROUP_' + x.id} value={x.id}>\r\n                    {x.name}\r\n                </option>\r\n            )),\r\n        [groups]\r\n    );\r\n\r\n    const disabledAction = React.useMemo(() => {\r\n        if (!hasValue(separator) || isLoading || isLoadingGlobal) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [separator, isLoading, isLoadingGlobal]);\r\n\r\n    const handleOnAction = React.useCallback(async () => {\r\n        setLoading(true);\r\n        setEmpty('');\r\n        setError('');\r\n        setData('');\r\n        try {\r\n            // get all expenses\r\n            const values = await new ExpenseService(config).getAll(group);\r\n\r\n            if (values.length === 0) {\r\n                // does not exist any expenses\r\n                setEmpty(t('EXPORT.EMPTY'));\r\n            } else {\r\n                // process all expenses\r\n                setData(\r\n                    values\r\n                        .map(value => {\r\n                            const formatDate = format(new Date(value.date), t('EXPENSE.DATE_FORMAT'));\r\n                            const labelName = labels.find(l => l.id === value.labelId)?.name.trim() ?? value.labelId;\r\n                            const line = [value.type, value.name.trim(), value.value, formatDate, labelName].join(\r\n                                separator\r\n                            );\r\n                            if (hasValue(value.comments)) {\r\n                                return `${line}${separator}${value.comments.trim()}`;\r\n                            }\r\n                            return line;\r\n                        })\r\n                        .join('\\n')\r\n                );\r\n            }\r\n        } catch {\r\n            setError(t('EXPORT.ERROR'));\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [separator, group, config, labels, t]);\r\n\r\n    const handleOnChangeGroup = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setGroup(+event.target.value);\r\n    }, []);\r\n\r\n    const handleOnChangeSeparator = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSeparator(event.target.value);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        setGroup(groupGlobal);\r\n    }, [groupGlobal]);\r\n\r\n    return (\r\n        <>\r\n            <ItemsHeaderComponent\r\n                title={t('EXPORT.TITLE')}\r\n                action={t('EXPORT.ACTION')}\r\n                onAction={handleOnAction}\r\n                disableAction={disabledAction}\r\n            />\r\n            <AlertComponent\r\n                message={!isLoadingGlobal && groups.length === 0 ? t('EXPORT.EMPTY_GROUP') : ''}\r\n                type=\"warning\"\r\n            />\r\n            <AlertComponent message={empty} type=\"warning\" />\r\n            <AlertComponent message={error} type=\"danger\" />\r\n            <LoadingComponent isLoading={isLoading} text={t('EXPORT.EXPORTING')}>\r\n                <Form>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12 col-md-6 col-lg-4\">\r\n                            <Form.Group>\r\n                                <Form.Label>{t('EXPORT.GROUP')}</Form.Label>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    value={group}\r\n                                    onChange={handleOnChangeGroup}\r\n                                    data-testid=\"export-group-field\"\r\n                                >\r\n                                    {groupsOptions}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-sm-12 col-md-6 col-lg-4\">\r\n                            <Form.Group>\r\n                                <Form.Label>{t('EXPORT.SEPARATOR')}</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    value={separator}\r\n                                    onChange={handleOnChangeSeparator}\r\n                                    data-testid=\"export-separator-field\"\r\n                                />\r\n                            </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-sm-12\">\r\n                            <Form.Group controlId=\"formExportData\">\r\n                                <Form.Label>{t('EXPORT.DATA')}</Form.Label>\r\n                                <Form.Text className=\"text-muted\">{t('EXPORT.DATA_TEXT')}</Form.Text>\r\n                                <Form.Control\r\n                                    className=\"text-dark\"\r\n                                    as=\"textarea\"\r\n                                    aria-label=\"data-input\"\r\n                                    rows={10}\r\n                                    placeholder={t('EXPORT.DATA_PLACEHOLDER')}\r\n                                    value={data}\r\n                                    readOnly\r\n                                    data-testid=\"export-data-field\"\r\n                                />\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </LoadingComponent>\r\n        </>\r\n    );\r\n});\r\n","import React, { useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\n\r\nimport { ConfigManager } from '../configurations/configManager';\r\nimport { ConfigModel } from '../models/config';\r\nimport { AuthPage } from './auth/auth';\r\nimport { ExpensePage } from './expense/expense';\r\nimport { GroupPage } from './group/group';\r\nimport { LabelPage } from './label/label';\r\nimport { Routes } from './routes';\r\nimport { SettingsPage } from './settings/settings';\r\n\r\nimport { userContext } from '../contexts/user';\r\nimport { PrivateRoute } from '../helpers/privateRouter';\r\nimport { GroupModel } from '../models/group';\r\nimport { GroupService } from '../services/group';\r\nimport { ExpenseService } from '../services/expense';\r\nimport { globalContext } from '../contexts/global';\r\nimport { SearchModel } from '../models/search';\r\nimport { hasValue } from '../helpers/util';\r\nimport { ImportPage } from './import/import';\r\nimport { LabelModel } from '../models/label';\r\nimport { LabelService } from '../services/label';\r\nimport { ExportPage } from './export/export';\r\n\r\nexport type MainProps = {};\r\n\r\nconst consoleLog = false;\r\n\r\nexport const MainPage: React.FC<MainProps> = React.memo((_props: MainProps) => {\r\n    const { isReady } = useContext(userContext);\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\r\n\r\n    const [isLoadingGroups, setLoadingGroups] = React.useState<boolean>(true);\r\n    const [isLoadingLabels, setLoadingLabels] = React.useState<boolean>(true);\r\n    const [isLoadingYears, setLoadingYears] = React.useState<boolean>(true);\r\n    const [isSelectingGroup, setSelectingGroup] = React.useState<boolean>(true);\r\n    const [isSelectingMonth, setSelectingMonth] = React.useState<boolean>(true);\r\n    const [isSelectingYear, setSelectingYear] = React.useState<boolean>(true);\r\n    const [isPushing, setPushing] = React.useState<boolean>(true);\r\n    const isLoading = React.useMemo(\r\n        () =>\r\n            isLoadingGroups ||\r\n            isLoadingLabels ||\r\n            isLoadingYears ||\r\n            isSelectingGroup ||\r\n            isSelectingMonth ||\r\n            isSelectingYear ||\r\n            isPushing,\r\n        [\r\n            isLoadingGroups,\r\n            isLoadingLabels,\r\n            isLoadingYears,\r\n            isSelectingGroup,\r\n            isSelectingMonth,\r\n            isSelectingYear,\r\n            isPushing\r\n        ]\r\n    );\r\n\r\n    const [labels, setLabels] = React.useState<LabelModel[]>([]);\r\n    const [groups, setGroups] = React.useState<GroupModel[]>([]);\r\n    const [years, setYears] = React.useState<number[]>([]);\r\n\r\n    const [loadGroups, setLoadGroups] = React.useState<boolean>(true);\r\n    const [loadLabels, setLoadLabels] = React.useState<boolean>(true);\r\n\r\n    const [group, setGroup] = React.useState<GroupModel>();\r\n    const [month, setMonth] = React.useState<number>();\r\n    const [year, setYear] = React.useState<number>();\r\n\r\n    const searchParams = React.useMemo(() => {\r\n        const jsonString = JSON.stringify(queryString.parse(location.search));\r\n        return JSON.parse(jsonString) as SearchModel;\r\n    }, [location]);\r\n\r\n    // #region load groups\r\n    React.useEffect(() => {\r\n        if (!loadGroups) {\r\n            return;\r\n        }\r\n\r\n        const runAsync = async () => {\r\n            let results: GroupModel[] = [];\r\n\r\n            if (!isReady) {\r\n                setGroups(results);\r\n                return;\r\n            }\r\n\r\n            setLoadingGroups(true);\r\n            try {\r\n                results = await new GroupService(config).getAll();\r\n            } catch {\r\n                results = [];\r\n            }\r\n\r\n            consoleLog && console.log('load Groups', results);\r\n            setGroups(results);\r\n            setLoadingGroups(false);\r\n            setLoadGroups(!loadGroups);\r\n        };\r\n        runAsync();\r\n    }, [isReady, config, loadGroups]);\r\n    // #endregion\r\n\r\n    // #region select group\r\n    React.useEffect(() => {\r\n        if (!isReady || !hasValue(groups)) {\r\n            setGroup(undefined);\r\n            setSelectingGroup(false);\r\n            return;\r\n        }\r\n\r\n        setSelectingGroup(true);\r\n\r\n        let selected: GroupModel | undefined;\r\n        const lastGroup = localStorage.getItem('group') as string;\r\n        if (hasValue(searchParams.group) && groups.some(x => x.id === +searchParams.group)) {\r\n            selected = groups.find(x => x.id === +searchParams.group) as GroupModel;\r\n        } else if (hasValue(lastGroup) && groups.some(x => x.id === +lastGroup)) {\r\n            selected = groups.find(x => x.id === +lastGroup) as GroupModel;\r\n        } else if (hasValue(groups)) {\r\n            selected = groups[0];\r\n        } else {\r\n            // groupResults = {} as Partial<GroupModel>;\r\n            // show error - does not have groups loaded\r\n            // setLoading(false);\r\n            // return undefined;\r\n        }\r\n\r\n        consoleLog && console.log('setGroup', selected, searchParams.group);\r\n        setGroup(selected);\r\n        if (selected) {\r\n            localStorage.setItem('group', selected.id.toString());\r\n        }\r\n        setSelectingGroup(false);\r\n    }, [groups, isReady, searchParams.group]);\r\n    // #endregion\r\n\r\n    // #region load labels\r\n    React.useEffect(() => {\r\n        if (!loadLabels) {\r\n            return;\r\n        }\r\n\r\n        const runAsync = async () => {\r\n            let results: LabelModel[] = [];\r\n\r\n            if (!isReady || !hasValue(group)) {\r\n                setLabels(results);\r\n                setLoadingLabels(false);\r\n                return;\r\n            }\r\n\r\n            setLoadingLabels(true);\r\n\r\n            try {\r\n                results = await new LabelService(config).getAll(group?.id ?? 0);\r\n            } catch {\r\n                results = [];\r\n            }\r\n\r\n            consoleLog && console.log('load Labels', results);\r\n            setLabels(results);\r\n            setLoadingLabels(false);\r\n            setLoadLabels(!loadLabels);\r\n        };\r\n        runAsync();\r\n    }, [isReady, config, group, loadLabels]);\r\n    // #endregion\r\n\r\n    // #region load years\r\n    React.useEffect(() => {\r\n        const runAsync = async () => {\r\n            let results: number[] = [];\r\n\r\n            if (!isReady || !hasValue(group)) {\r\n                setYears(results);\r\n                setLoadingYears(false);\r\n                return;\r\n            }\r\n\r\n            setLoadingYears(true);\r\n            try {\r\n                results = await new ExpenseService(config).getYears(group?.id ?? 0);\r\n            } catch {\r\n                results = [];\r\n            }\r\n\r\n            if (!hasValue(results)) {\r\n                results = [new Date().getFullYear()];\r\n            }\r\n\r\n            consoleLog && console.log('load Years', results, group);\r\n            setYears(results);\r\n            setLoadingYears(false);\r\n        };\r\n        runAsync();\r\n    }, [isReady, config, group]);\r\n    // #endregion\r\n\r\n    // #region select year\r\n    React.useEffect(() => {\r\n        if (!isReady || !hasValue(years)) {\r\n            setSelectingYear(false);\r\n            return;\r\n        }\r\n\r\n        setSelectingYear(true);\r\n\r\n        let selected = new Date().getFullYear();\r\n\r\n        const lastYear = localStorage.getItem('year') as string;\r\n        if (hasValue(searchParams.year) && years.some(x => x === +searchParams.year)) {\r\n            selected = +searchParams.year;\r\n        } else if (hasValue(lastYear) && years.some(x => x === +lastYear)) {\r\n            selected = +lastYear;\r\n        }\r\n\r\n        consoleLog && console.log('setYear', selected, +searchParams.year);\r\n        setYear(selected);\r\n        localStorage.setItem('year', selected.toString());\r\n        setSelectingYear(false);\r\n    }, [years, isReady, searchParams.year]);\r\n    // #endregion\r\n\r\n    // #region select month\r\n    React.useEffect(() => {\r\n        if (!isReady) {\r\n            return;\r\n        }\r\n\r\n        setSelectingMonth(true);\r\n\r\n        let selected = new Date().getMonth();\r\n        const lastMonth = localStorage.getItem('month') as string;\r\n        if (hasValue(searchParams.month) && searchParams.month >= 1 && searchParams.month <= 12) {\r\n            selected = searchParams.month;\r\n        } else if (hasValue(lastMonth) && +lastMonth >= 1 && +lastMonth <= 12) {\r\n            selected = +lastMonth;\r\n        }\r\n\r\n        consoleLog && console.log('setMonth', selected, searchParams.month);\r\n        setMonth(selected);\r\n        localStorage.setItem('month', selected.toString());\r\n        setSelectingMonth(false);\r\n    }, [isReady, searchParams.month]);\r\n    // #endregion\r\n\r\n    // #region push changes\r\n    React.useEffect(() => {\r\n        if (\r\n            !isReady ||\r\n            !hasValue(group) ||\r\n            !hasValue(year) ||\r\n            !hasValue(month) ||\r\n            isSelectingGroup ||\r\n            isSelectingMonth ||\r\n            isSelectingYear\r\n        ) {\r\n            setPushing(false);\r\n            return;\r\n        }\r\n\r\n        setPushing(true);\r\n        consoleLog && console.log('history.push', group, month, year);\r\n        history.push({\r\n            pathname: location.pathname,\r\n            search: queryString.stringify({\r\n                group: group?.id,\r\n                month: month,\r\n                year: year\r\n            })\r\n        });\r\n        setPushing(false);\r\n    }, [isReady, group, month, year, history, location.pathname, isSelectingGroup, isSelectingMonth, isSelectingYear]);\r\n    // #endregion\r\n\r\n    const handleToReloadLabels = React.useCallback(() => {\r\n        setLoadLabels(!loadLabels);\r\n    }, [loadLabels]);\r\n\r\n    const handleToReloadGroups = React.useCallback(() => {\r\n        setLoadGroups(!loadGroups);\r\n        setLoadLabels(!loadLabels);\r\n    }, [loadGroups, loadLabels]);\r\n\r\n    const enablePrivateRoute = React.useMemo(() => {\r\n        return isReady;\r\n    }, [isReady]);\r\n\r\n    return (\r\n        <>\r\n            <globalContext.Provider\r\n                value={{\r\n                    isLoading: isLoading,\r\n\r\n                    labels: labels,\r\n\r\n                    groups: groups,\r\n                    years: years,\r\n\r\n                    group: group?.id ?? 0,\r\n                    month: month ?? 0,\r\n                    year: year ?? 0,\r\n\r\n                    reloadLabels: handleToReloadLabels,\r\n                    reloadGroups: handleToReloadGroups\r\n                }}\r\n            >\r\n                <Container className=\"mt-2 pl-1 pr-1\">\r\n                    <Switch>\r\n                        {enablePrivateRoute && (\r\n                            <PrivateRoute key={Routes.group} path={Routes.group} component={GroupPage} />\r\n                        )}\r\n                        {enablePrivateRoute && (\r\n                            <PrivateRoute key={Routes.label} path={Routes.label} component={LabelPage} />\r\n                        )}\r\n                        {enablePrivateRoute && (\r\n                            <PrivateRoute key={Routes.expense} path={Routes.expense} component={ExpensePage} />\r\n                        )}\r\n                        {enablePrivateRoute && (\r\n                            <PrivateRoute key={Routes.settings} path={Routes.settings} component={SettingsPage} />\r\n                        )}\r\n                        {enablePrivateRoute && (\r\n                            <PrivateRoute key={Routes.import} path={Routes.import} component={ImportPage} />\r\n                        )}\r\n                        {enablePrivateRoute && (\r\n                            <PrivateRoute key={Routes.export} path={Routes.export} component={ExportPage} />\r\n                        )}\r\n\r\n                        <Route key={Routes.auth} path={Routes.auth} component={AuthPage} />\r\n                        <Route key={Routes.home} exact path={Routes.home}>\r\n                            <>\r\n                                <h3>HOME</h3>\r\n                                <h6>Build Version: {config.buildVersion}</h6>\r\n                            </>\r\n                        </Route>\r\n\r\n                        {isReady && (\r\n                            <Route key={'*'} path=\"*\">\r\n                                <h1> 404 </h1>\r\n                            </Route>\r\n                        )}\r\n                    </Switch>\r\n                </Container>\r\n            </globalContext.Provider>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\nimport { HashRouter, BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider } from 'styled-components';\nimport axios from 'axios';\nimport useMedia from 'use-media/lib/useMedia';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { auth } from 'firebase';\n\nimport { HeaderComponent } from '../components/header/header';\nimport { ConfigManager } from '../configurations/configManager';\nimport { ConfigModel } from '../models/config';\n\nimport { GlobalStyles } from './globalSyles';\nimport { darkTheme, lightTheme } from './theme';\nimport { hasValue } from '../helpers/util';\nimport { userContext } from '../contexts/user';\nimport { MainPage } from './main';\nimport { UserService } from '../services/user';\nimport { UserModel } from '../models/user';\n\nexport type AppProps = {};\n\nexport const AppPage: React.FC<AppProps> = React.memo((_props: AppProps) => {\n    const [user, initialising] = useAuthState(auth());\n    const colorScheme = useMedia('(prefers-color-scheme: dark)');\n\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\n    const [isDarkTheme, setDarkTheme] = React.useState<boolean>();\n    const [isReady, setReady] = React.useState<boolean>(false);\n\n    const handleDarkTheme = React.useCallback((dark: boolean) => {\n        setDarkTheme(dark);\n    }, []);\n\n    const theme = React.useMemo(() => {\n        let theme = colorScheme;\n\n        if (hasValue(localStorage.getItem('darkTheme'))) {\n            theme = JSON.parse(localStorage.getItem('darkTheme') as string);\n            setDarkTheme(theme);\n        }\n\n        if (hasValue(isDarkTheme) && isDarkTheme !== theme) {\n            theme = isDarkTheme as boolean;\n            setDarkTheme(theme);\n            localStorage.setItem('darkTheme', theme.toString());\n        }\n\n        return theme ? darkTheme : lightTheme;\n    }, [isDarkTheme, colorScheme]);\n\n    React.useEffect(() => {\n        if (initialising || !user) {\n            return;\n        }\n\n        if (hasValue(user)) {\n            user.getIdTokenResult().then((value: any) => {\n                axios.defaults.headers.common.Authorization = value.token;\n                new UserService(config).addOrUpdate({\n                    id: user.uid,\n                    email: user.email,\n                    displayName: user.displayName,\n                    photoUrl: user.photoURL\n                } as UserModel);\n                setReady(true);\n            });\n        }\n    }, [user, initialising, config]);\n\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <>\n                    <GlobalStyles />\n                    <userContext.Provider\n                        value={{\n                            user: user,\n                            initialising: initialising,\n                            isReady: isReady,\n                            isDarkTheme: isDarkTheme ?? true,\n                            setDarkTheme: handleDarkTheme\n                        }}\n                    >\n                        {config.useHashRouter && (\n                            <HashRouter basename=\"/\">\n                                <HeaderComponent />\n                                <MainPage />\n                            </HashRouter>\n                        )}\n                        {!config.useHashRouter && (\n                            <BrowserRouter basename=\"/\">\n                                <HeaderComponent />\n                                <MainPage />\n                            </BrowserRouter>\n                        )}\n                    </userContext.Provider>\n                </>\n            </ThemeProvider>\n        </>\n    );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initializeApp } from 'firebase';\nimport * as serviceWorker from './serviceWorker';\n\nimport './configurations/i18n';\nimport './index.scss';\n\nimport { setConfiguration } from './configurations/configManager';\nimport { AppPage } from './pages/app';\nimport { getFirebaseConfig } from './configurations/firebase';\nimport { getValueOrDefault } from './helpers/util';\n\nconst config = setConfiguration();\n\n// initialize firebase\ninitializeApp({\n    ...getFirebaseConfig(\n        getValueOrDefault(process.env.REACT_APP_FIREBASE_PROJECT, config.firebaseProject),\n        getValueOrDefault(process.env.REACT_APP_FIREBASE_API_KEY, config.firebaseApiKey)\n    )\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppPage />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}