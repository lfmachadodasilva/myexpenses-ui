{"version":3,"sources":["configurations/i18n.ts","services/serviceBase.ts","contexts/userContext.ts","helpers/utilHelper.ts","services/userService.ts","configurations/appConfig.ts","configurations/configurationManager.ts","services/authService.ts","pages/routes.ts","components/header/header.tsx","components/loading/loading.tsx","components/item/item.tsx","services/groupService.ts","helpers/privateRouter.tsx","pages/labels/labels.tsx","components/dialog/dialog.tsx","components/avatar/avatar.tsx","pages/groups/groupsManage.tsx","pages/groups/groups.tsx","contexts/globalContext.ts","components/search/search.tsx","services/labelService.ts","pages/labels/labelsManage.tsx","components/tabPanel/tabPanel.tsx","models/expense.ts","services/expenseService.ts","pages/auth/loginPage.tsx","pages/expenses/expensesManage.tsx","pages/expenses/expenses.tsx","pages/auth/facebookPage.tsx","pages/auth/authPage.tsx","pages/settings/settings.tsx","pages/main.tsx","pages/App.tsx","serviceWorker.ts","configurations/firebase.ts","index.tsx"],"names":["resources","en","translation","i18n","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","StatusCodes","userContext","React","createContext","user","initialising","isReady","isDarkTheme","setDarkTheme","_dark","hasValue","value","undefined","Array","isArray","length","getValueOrDefault","values","find","x","handleError","error","a","response","status","OK","console","config","data","headers","Promise","reject","ServiceBase","url","params","axios","get","baseURL","this","apiUrl","withCredentials","process","Accept","Authorization","defaults","common","post","put","delete","UserService","AppConfig","buildVersion","ConfigurationManager","configurationObject","configurationSettings","Object","assign","set","ApplicationConfiguration","freeze","facebook","auth","FacebookAuthProvider","loginWithFacebook","firebase","signInWithPopup","loginWithEmail","email","password","signInWithEmailAndPassword","createUserWithEmail","createUserWithEmailAndPassword","resetPassword","sendPasswordResetEmail","updateUser","displayName","updateProfile","userObj","addOrUpdate","id","uid","photoUrl","photoURL","Routes","home","settings","groups","labels","expenses","LoadingType","useStyles","makeStyles","theme","root","flexGrow","display","appBar","zIndex","drawer","breakpoints","up","title","cursor","buttons","color","menu","paper","width","sectionMobile","sectionDesktop","flexShrink","drawerPaper","drawerContainer","overflow","container","padding","small","spacing","height","Header","memo","useContext","history","useHistory","location","useLocation","useTranslation","t","useState","open","setOpen","classes","anchorEl","setAnchorEl","handleClose","useCallback","handleOpen","handleGoToHome","push","handleGoToGroups","handleGoToLabels","search","pathname","handleGoToExpenses","handleGoToSettings","handleGoToAuth","handleLogout","signOut","setTimeout","userEmail","userDisplayName","userPhotoURL","avatarIcon","useMemo","Avatar","alt","src","className","split","AppBar","Container","maxWidth","Toolbar","IconButton","edge","aria-label","onClick","Typography","variant","Button","size","startIcon","data-testid","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","Boolean","onClose","MenuItem","ListItemIcon","ListItemText","primary","fontSize","Divider","SwipeableDrawer","concat","onOpen","List","ListItem","button","key","ItemType","createStyles","linear","marginTop","LoadingComponent","props","Grid","justify","alignItems","Alert","severity","AlertTitle","info","showLoading","type","circular","CircularProgress","LinearProgress","children","GroupService","baseUrl","group","groupId","PrivateRoute","Component","component","path","to","cards","flex","header","paddingBottom","content","deleteButton","marginLeft","moreButton","menuButton","LabelValueType","ItemComponent","isLoadingEdit","setLoadingEdit","isLoadingDelete","setLoadingDelete","handleEdit","onEdit","action","then","finally","handleDelete","onDelete","divider","dense","disableGutters","secondary","ListItemSecondaryAction","disableRipple","direction","Row","item","disabled","DialogTitle","withStyles","closeButton","palette","grey","other","disableTypography","DialogContent","MuiDialogContent","DialogActions","margin","MuiDialogActions","DialogComponent","useTheme","fullScreen","useMediaQuery","down","isLoading","setLoading","setError","handleAction","onAction","catch","useEffect","show","Dialog","aria-labelledby","autoFocus","endIcon","disableAction","actionText","getDisplayName","currentUserId","youText","chip","AvatarChipComponent","Chip","label","avatar","AvatarMenuComponent","formControl","minWidth","chips","flexWrap","noLabel","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","GroupsManageDialog","setTitle","setButton","name","setName","selectedUsers","setSelectedUsers","isLoadingUsers","setLoadingUsers","users","setUsers","errorUsers","setErrorUsers","selectedUsersId","map","handleChangeName","target","handleChange","us","userId","u","update","add","usersElement","renderValues","selected","getAll","g","xs","FormControl","fullWidth","InputLabel","htmlFor","Input","required","onChange","Select","labelId","multiple","input","renderValue","list","GroupsPage","setData","setShow","setGroup","reload","setReload","setInfo","resolve","remove","handleAdd","getFullAll","globalContext","years","Date","getFullYear","month","getMonth","year","details","SearchComponent","isExpanded","setExpanded","setGroups","months","setYears","selectedGroup","setSelectedGroup","selectedGroupName","selectedMonth","setSelectedMonth","selectedYear","setSelectedYear","groupsMenuItems","monthsMenuItems","yearsMenuItems","handleChangeGroup","handleChangeMonth","handleChangeYear","handleChangeAccordion","_event","expanded","queryString","stringify","Accordion","loading","AccordionSummary","expandIcon","noWrap","orientation","flexItem","AccordionDetails","sm","NativeSelect","defaultValue","AccordionActions","LabelService","LabelsManagePage","global","TabPanel","index","role","hidden","ExpenseType","listValues","gridItem","badge","tab","tabs","graphButtons","marginBottom","LabelsPage","dataSize","setDataSize","setLabel","setTab","CURRENT_VALUE","graphType","setGraphType","dataElements","Tooltip","icon","currValue","toFixed","clickable","lastValue","avgValue","dataChart","datasets","borderWidth","LAST_VALUE","Paper","Tabs","newValue","centered","Tab","Badge","badgeContent","ToggleButtonGroup","exclusive","ToggleButton","AVERAGE_VALUE","md","options","plugins","colorschemes","scheme","LoginPageType","ExpenseService","obj","ExpensesManagePage","Outcoming","setType","setValue","date","setDate","comments","setComments","labelsMenuItems","lastLabel","localStorage","getItem","expense","some","toString","handleChangeLabel","setItem","handleChangeValue","handleChangeComments","e","FormLabel","RadioGroup","FormControlLabel","Incoming","control","Radio","utils","DateFnsUtils","DatePicker","autoOk","format","multiline","separatorTitle","ExpensesPage","setExpense","calculateTotal","filter","reduce","sum","current","calculateSize","totalIncoming","totalLeft","totalLeftValue","totalLeftPerc","listOfExpenses","i","elevation","LoginPage","setEmail","setPassword","RESET","handleChangeEmail","handleChangePassword","LOGIN","REGISTER","promise","message","Card","CardHeader","CardContent","noValidate","autoComplete","TextField","CardActions","FacebookPage","hasError","handleFacebook","center","textAlign","AuthPage","SettingsPage","setDisplayName","handleChangeDisplayName","handleUpdate","handleDarkTheme","log","anchorOrigin","vertical","horizontal","Switch","checked","Main","setLabels","setMonth","setYear","jsonString","JSON","parse","searchParams","groupsResults","lastGroup","groupResults","labelsResults","lastMonth","monthResults","lastYear","yearResults","setup","Provider","exact","App","prefersDarkMode","currentUser","state","setState","unsubscribe","onAuthStateChanged","useAuth","setReady","dark","getIdTokenResult","token","createMuiTheme","typography","textTransform","ThemeProvider","CssBaseline","basename","window","hostname","match","projectId","overrides","configDefault","setConfiguration","initializeApp","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d61c6a12.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport translationEN from '../locales/en.json';\n\nconst resources = {\n    en: {\n        translation: translationEN\n    }\n};\n\ni18n.use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources,\n        lng: 'en',\n        fallbackLng: 'en', // use en if detected lng is not available\n\n        // keySeparator: false, // we do not use keys in form messages.welcome\n\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        }\n    });\n\nexport default i18n;\n","import axios, { AxiosError } from 'axios';\r\nimport { AppConfig } from '../configurations/appConfig';\r\n\r\nexport enum StatusCodes {\r\n    OK = 200\r\n}\r\n\r\nconst handleError = async (error: AxiosError) => {\r\n    if (error.response && error.response.status >= StatusCodes.OK) {\r\n        if (process.env.NODE_ENV !== 'test') {\r\n            // avoid show this when is running test\r\n            console.error('Request Failed:', error.config);\r\n            console.error('Status:', error.response.status);\r\n            console.error('Data:', error.response.data);\r\n            console.error('Headers:', error.response.headers);\r\n        }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n};\r\n\r\nexport class ServiceBase {\r\n    constructor(protected config: AppConfig) {}\r\n\r\n    protected async get<TResponse>(url: string, params?: { [key: string]: any }): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.get(url, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async post<TResponse>(url: string, params?: { [key: string]: any }, data?: any): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.post(url, data, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async put<TResponse>(url: string, params?: { [key: string]: any }, data?: any): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.put(url, data, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                },\r\n                params\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n\r\n    protected async delete<TResponse>(url: string): Promise<TResponse> {\r\n        try {\r\n            const response = await axios.delete(url, {\r\n                baseURL: this.config.apiUrl,\r\n                withCredentials: process.env.NODE_ENV !== 'test',\r\n                headers: {\r\n                    Accept: 'application/json; charset=utf=8',\r\n                    Authorization: 'Bearer ' + axios.defaults.headers.common.Authorization\r\n                }\r\n            });\r\n            return response.data as Promise<TResponse>;\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\nimport { User } from 'firebase/app';\n\ninterface UserContext {\n    user: User | null;\n    initialising: boolean;\n    isReady: boolean;\n\n    isDarkTheme: boolean;\n    setDarkTheme: (dark: boolean) => void;\n}\n\nexport const userContext = React.createContext<UserContext>({\n    user: null,\n    initialising: false,\n    isReady: false,\n\n    isDarkTheme: true,\n    setDarkTheme: (_dark: boolean) => {}\n});\n","export const hasValue = (value: any): boolean => {\r\n    if (value === null || value === undefined) {\r\n        return false;\r\n    }\r\n\r\n    if (typeof value === 'string' || Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n// export const getValueOrDefault = (value?: string, defaultValue?: string) => {\r\n//     return hasValue(value) ? value : defaultValue;\r\n// };\r\n\r\nexport const getValueOrDefault = (...values: any[]) => {\r\n    return values.find(x => hasValue(x));\r\n};\r\n","import { ServiceBase } from './serviceBase';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { UserModel } from '../models/user';\r\n\r\nexport class UserService extends ServiceBase {\r\n    constructor(protected config: AppConfig) {\r\n        super(config);\r\n    }\r\n\r\n    async getAll(): Promise<UserModel[]> {\r\n        return await this.get<UserModel[]>('/api/user');\r\n    }\r\n\r\n    async addOrUpdate(user: UserModel): Promise<UserModel> {\r\n        return await this.post<UserModel>('/api/user', {}, user);\r\n    }\r\n}\r\n","export class AppConfig {\n    /** api backend url */\n    apiUrl?: string = 'https://myexpenses-backend-dev.herokuapp.com';\n    /** build version */\n    buildVersion?: string = 'local';\n}\n","import { AppConfig } from './appConfig';\nimport config, { Options } from 'react-global-configuration';\n\nimport { getValueOrDefault } from '../helpers/utilHelper';\n\nexport class ConfigurationManager {\n    static set = (configurationSettings: AppConfig) => {\n        config.set({ ApplicationConfiguration: configurationSettings }, { freeze: false } as Options);\n    };\n\n    static get(): AppConfig {\n        const configurationObject = config.get('ApplicationConfiguration');\n\n        const configurationSettings = new AppConfig();\n        Object.assign(configurationSettings, configurationObject);\n\n        return configurationSettings;\n    }\n}\n\nexport const setConfiguration = (overrides: Partial<AppConfig> = {}) => {\n    let configDefault: AppConfig = new AppConfig();\n    // try {\n    //     // read from the config json file\n    //     configDefault = require('../config.json');\n    // } catch {\n    //     // use default configuration\n    //     configDefault = new AppConfig();\n    // }\n\n    configDefault = {\n        ...configDefault,\n        buildVersion: getValueOrDefault(\n            process.env.REACT_APP_BUILD_VERSION,\n            overrides.buildVersion,\n            configDefault.buildVersion\n        ),\n        apiUrl: getValueOrDefault(process.env.REACT_APP_API_URL, overrides.apiUrl, configDefault.apiUrl)\n    };\n\n    ConfigurationManager.set({ ...configDefault, ...overrides });\n};\n","import React, { useState } from 'react';\nimport firebase, { auth } from 'firebase/app';\nimport 'firebase/auth'; // If using Firebase auth\nimport { UserService } from './userService';\nimport { ConfigurationManager } from '../configurations/configurationManager';\nimport { UserModel } from '../models/user';\n\nexport const useAuth = () => {\n    const [state, setState] = useState(() => {\n        const user = auth().currentUser;\n        return { initialising: !user, user };\n    });\n\n    const onChange = (user: firebase.User | null) => {\n        setState({ initialising: false, user });\n    };\n\n    React.useEffect(() => {\n        // listen for auth state changes\n        const unsubscribe = firebase.auth().onAuthStateChanged(onChange);\n        // unsubscribe to the listener when unmounting\n        return () => unsubscribe();\n    }, []);\n\n    return state;\n};\n\nconst facebook = new auth.FacebookAuthProvider();\n\nexport const loginWithFacebook = async () => {\n    try {\n        return await firebase.auth().signInWithPopup(facebook);\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const loginWithEmail = async (email: string, password: string) => {\n    try {\n        await firebase.auth().signInWithEmailAndPassword(email, password);\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const createUserWithEmail = async (email: string, password: string) => {\n    try {\n        await firebase.auth().createUserWithEmailAndPassword(email, password);\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const resetPassword = async (email: string) => {\n    try {\n        return await firebase.auth().sendPasswordResetEmail(email);\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const updateUser = async (user: firebase.User | null, displayName: string) => {\n    try {\n        await user?.updateProfile({ displayName: displayName });\n\n        const config = ConfigurationManager.get();\n        const userObj = user as firebase.User;\n\n        return await new UserService(config).addOrUpdate({\n            id: userObj.uid,\n            email: userObj.email,\n            displayName: userObj.displayName,\n            photoUrl: userObj.photoURL\n        } as UserModel);\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const signOut = () => firebase.auth().signOut();\n","export class Routes {\r\n    static home = '/';\r\n    static auth = '/auth';\r\n    static settings = '/settings';\r\n    static groups = '/groups';\r\n    static labels = '/labels';\r\n    static expenses = '/expenses';\r\n}\r\n","import React, { memo, useState, useContext, useCallback, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { ListItemIcon, ListItemText, Divider, Container, MenuItem, Menu, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport GroupIcon from '@material-ui/icons/Group';\nimport HomeIcon from '@material-ui/icons/Home';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport LabelIcon from '@material-ui/icons/Label';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nimport { userContext } from '../../contexts/userContext';\nimport { hasValue } from '../../helpers/utilHelper';\nimport { signOut } from '../../services/authService';\nimport { Routes } from '../../pages/routes';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex'\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 999,\n        [theme.breakpoints.up('sm')]: {\n            zIndex: theme.zIndex.drawer\n        },\n        position: 'static'\n    },\n    title: {\n        flexGrow: 1,\n        cursor: 'pointer'\n    },\n    buttons: {\n        color: 'inherit'\n    },\n    menu: {\n        paper: {\n            width: drawerWidth\n        }\n    },\n    sectionMobile: {\n        display: 'flex',\n        [theme.breakpoints.up('sm')]: {\n            display: 'none'\n        }\n    },\n    sectionDesktop: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'flex'\n        }\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0\n    },\n    drawerPaper: {\n        width: drawerWidth\n    },\n    drawerContainer: {\n        overflow: 'auto'\n    },\n    container: {\n        padding: 0\n    },\n    small: {\n        width: theme.spacing(3),\n        height: theme.spacing(3)\n    }\n}));\n\nexport interface HeaderProps {}\n\nconst HeaderComponent: React.FC<HeaderProps> = memo(() => {\n    const { user } = useContext(userContext);\n    const history = useHistory();\n    const location = useLocation();\n    const [t] = useTranslation();\n    const [open, setOpen] = useState<boolean>(false);\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n    const handleClose = useCallback(() => {\n        setAnchorEl(null);\n    }, []);\n\n    const handleOpen = useCallback(() => {\n        setOpen(!open);\n    }, [open]);\n\n    const handleGoToHome = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        history.push(Routes.home);\n    }, [history]);\n    const handleGoToGroups = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        history.push(Routes.groups);\n    }, [history]);\n    const handleGoToLabels = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        if (hasValue(location.search)) {\n            history.push({ pathname: Routes.labels, search: location.search });\n        } else {\n            history.push(Routes.labels);\n        }\n    }, [history, location]);\n    const handleGoToExpenses = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        if (hasValue(location.search)) {\n            history.push({ pathname: Routes.expenses, search: location.search });\n        } else {\n            history.push(Routes.expenses);\n        }\n    }, [history, location]);\n    const handleGoToSettings = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        history.push(Routes.settings);\n    }, [history]);\n    const handleGoToAuth = useCallback(() => {\n        setOpen(false);\n        setAnchorEl(null);\n        history.push(Routes.auth);\n    }, [history]);\n    const handleLogout = useCallback(async () => {\n        setAnchorEl(null);\n        setOpen(false);\n        await signOut();\n        setTimeout(() => history.push(Routes.home));\n    }, [history]);\n\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n        if (hasValue(user)) {\n            setAnchorEl(event.currentTarget);\n            return;\n        }\n        setAnchorEl(null);\n        handleGoToAuth();\n    };\n\n    const userEmail = user?.email ?? '';\n    const userDisplayName = user?.displayName ?? '';\n    const userPhotoURL = user?.photoURL ?? '';\n\n    const avatarIcon = useMemo(() => {\n        return hasValue(userPhotoURL) ? (\n            <Avatar alt={userEmail} src={userPhotoURL} className={classes.small} />\n        ) : (\n            <AccountCircle />\n        );\n    }, [classes.small, userEmail, userPhotoURL]);\n\n    const displayName = useMemo(() => {\n        return hasValue(userDisplayName) ? userDisplayName.split(' ')[0] : userEmail;\n    }, [userDisplayName, userEmail]);\n\n    return (\n        <div className={classes.root}>\n            <AppBar className={classes.appBar}>\n                <Container maxWidth=\"md\" className={classes.container}>\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={classes.sectionMobile}\n                            onClick={handleOpen}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title} onClick={handleGoToHome}>\n                            {t('HEADER.TITLE')}\n                        </Typography>\n                        <div className={classes.sectionDesktop}>\n                            <Button\n                                className={classes.buttons}\n                                size=\"small\"\n                                onClick={handleGoToGroups}\n                                startIcon={<GroupIcon />}\n                            >\n                                {t('HEADER.GROUPS')}\n                            </Button>\n                            <Button\n                                className={classes.buttons}\n                                size=\"small\"\n                                onClick={handleGoToLabels}\n                                startIcon={<LabelIcon />}\n                            >\n                                {t('HEADER.LABELS')}\n                            </Button>\n                            <Button\n                                className={classes.buttons}\n                                size=\"small\"\n                                onClick={handleGoToExpenses}\n                                startIcon={<AccountBalanceWalletIcon />}\n                            >\n                                {t('HEADER.EXPENSES')}\n                            </Button>\n                            <IconButton\n                                data-testid=\"avatar-element\"\n                                edge=\"end\"\n                                aria-label=\"account of current user\"\n                                aria-controls=\"primary-search-account-menu\"\n                                aria-haspopup=\"true\"\n                                onClick={handleProfileMenuOpen}\n                                color=\"inherit\"\n                            >\n                                {avatarIcon}\n                            </IconButton>\n                            <Menu\n                                data-testid=\"avatar-menu-element\"\n                                id=\"simple-menu\"\n                                anchorEl={anchorEl}\n                                keepMounted\n                                open={Boolean(anchorEl)}\n                                onClose={handleClose}\n                            >\n                                <MenuItem onClick={handleClose}>\n                                    <ListItemIcon>{avatarIcon}</ListItemIcon>\n                                    <ListItemText primary={displayName} />\n                                </MenuItem>\n                                <MenuItem onClick={handleGoToSettings}>\n                                    <ListItemIcon>\n                                        <SettingsIcon fontSize=\"small\" />\n                                    </ListItemIcon>\n                                    <ListItemText primary={t('HEADER.SETTINGS')} />\n                                </MenuItem>\n                                <Divider />\n                                <MenuItem onClick={handleLogout}>\n                                    <ListItemIcon>\n                                        <ExitToAppIcon fontSize=\"small\" />\n                                    </ListItemIcon>\n                                    <ListItemText primary={t('HEADER.LOGOUT')} />\n                                </MenuItem>\n                            </Menu>\n                        </div>\n                    </Toolbar>\n                </Container>\n            </AppBar>\n            <SwipeableDrawer\n                className={classes.drawer.concat(classes.sectionMobile)}\n                open={open}\n                classes={{\n                    paper: classes.drawerPaper\n                }}\n                onClose={() => setOpen(false)}\n                onOpen={() => setOpen(true)}\n            >\n                <Toolbar />\n                <div className={classes.drawerContainer}>\n                    <List>\n                        <ListItem button key=\"home\">\n                            <ListItemIcon>\n                                <HomeIcon />\n                            </ListItemIcon>\n                            <ListItemText primary={'Home'} onClick={handleGoToHome} />\n                        </ListItem>\n                        <Divider />\n                        <ListItem button key=\"groups\" onClick={handleGoToGroups}>\n                            <ListItemIcon>\n                                <GroupIcon />\n                            </ListItemIcon>\n                            <ListItemText primary={t('HEADER.GROUPS')} />\n                        </ListItem>\n                        <ListItem button key=\"labels\" onClick={handleGoToLabels}>\n                            <ListItemIcon>\n                                <LabelIcon />\n                            </ListItemIcon>\n                            <ListItemText primary={t('HEADER.LABELS')} />\n                        </ListItem>\n                        <ListItem button key=\"expenses\" onClick={handleGoToExpenses}>\n                            <ListItemIcon>\n                                <AccountBalanceWalletIcon />\n                            </ListItemIcon>\n                            <ListItemText primary={t('HEADER.EXPENSES')} />\n                        </ListItem>\n                    </List>\n                    <Divider />\n                    {hasValue(user) && (\n                        <List>\n                            <ListItem button key=\"user\">\n                                <ListItemIcon>{avatarIcon}</ListItemIcon>\n                                <ListItemText primary={displayName} />\n                            </ListItem>\n                            <ListItem button key=\"logout\" onClick={handleGoToSettings}>\n                                <ListItemIcon>\n                                    <SettingsIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={t('HEADER.SETTINGS')} />\n                            </ListItem>\n                            <ListItem button key=\"logout\" onClick={handleLogout}>\n                                <ListItemIcon>\n                                    <ExitToAppIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={t('HEADER.LOGOUT')} />\n                            </ListItem>\n                        </List>\n                    )}\n                    {!hasValue(user) && (\n                        <List>\n                            <ListItem button key=\"login\" onClick={handleGoToAuth}>\n                                <ListItemIcon>\n                                    <AccountCircle />\n                                </ListItemIcon>\n                                <ListItemText primary={t('HEADER.LOGIN_REGISTER')} />\n                            </ListItem>\n                        </List>\n                    )}\n                </div>\n            </SwipeableDrawer>\n        </div>\n    );\n});\n\nexport const Header = HeaderComponent;\n","import React, { memo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\nimport AlertTitle from '@material-ui/lab/AlertTitle';\n\nimport { hasValue } from '../../helpers/utilHelper';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nexport enum LoadingType {\n    circular,\n    linear\n}\n\nexport type LoadingProps = {\n    showLoading: boolean;\n    size?: number;\n    error?: string;\n    info?: string;\n    type?: LoadingType;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        linear: {\n            width: '100%',\n            '& > * + *': {\n                marginTop: theme.spacing(2)\n            }\n        }\n    })\n);\n\nexport const LoadingComponent: React.FC<React.PropsWithChildren<LoadingProps>> = memo(\n    (props: React.PropsWithChildren<LoadingProps>) => {\n        const classes = useStyles();\n        const [t] = useTranslation();\n\n        if (hasValue(props.error)) {\n            return (\n                <Grid container justify=\"center\" alignItems=\"center\">\n                    <Alert severity=\"error\">\n                        <AlertTitle>{t('COMMON.ERROR_TITLE')}</AlertTitle>\n                        {props.error}\n                    </Alert>\n                </Grid>\n            );\n        }\n        if (hasValue(props.info)) {\n            return (\n                <Grid container justify=\"center\" alignItems=\"center\">\n                    <Alert severity=\"info\">\n                        <AlertTitle>{t('COMMON.INFO_TITLE')}</AlertTitle>\n                        {props.info}\n                    </Alert>\n                </Grid>\n            );\n        }\n        return props.showLoading ? (\n            <Grid container justify=\"center\" alignItems=\"center\">\n                {(!hasValue(props.type) || props.type === LoadingType.circular) && (\n                    <CircularProgress size={props.size ?? 40} data-testid=\"loading-element\" />\n                )}\n                {props.type === LoadingType.linear && (\n                    <div className={classes.linear}>\n                        <LinearProgress data-testid=\"loading-element\" />\n                    </div>\n                )}\n            </Grid>\n        ) : (\n            <>{props.children}</>\n        );\n    }\n);\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport { hasValue } from '../../helpers/utilHelper';\r\nimport { LoadingComponent } from '../loading/loading';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport './item.scss';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    cards: {\r\n        flex: 1\r\n    },\r\n    header: {\r\n        padding: theme.spacing(2),\r\n        paddingBottom: 0\r\n    },\r\n    content: {\r\n        padding: theme.spacing(2),\r\n        '&:last-child': {\r\n            paddingBottom: theme.spacing(2)\r\n        }\r\n    },\r\n    deleteButton: {\r\n        marginLeft: theme.spacing(3)\r\n    },\r\n    menu: {\r\n        padding: 0\r\n    },\r\n    moreButton: {\r\n        padding: 0\r\n    },\r\n    menuButton: {\r\n        padding: 0\r\n    }\r\n}));\r\n\r\nexport enum ItemType {\r\n    Row,\r\n    Column,\r\n    Menu\r\n}\r\n\r\nexport type ItemProps = {\r\n    id: number | string;\r\n    type?: ItemType;\r\n    title?: string;\r\n    onEdit?: (id: number | string) => Promise<void>;\r\n    onDelete?: (id: number | string) => Promise<void>;\r\n};\r\n\r\nexport const ItemComponent: React.FC<React.PropsWithChildren<ItemProps>> = React.memo(\r\n    (props: React.PropsWithChildren<ItemProps>) => {\r\n        const classes = useStyles();\r\n        const [isLoadingEdit, setLoadingEdit] = React.useState<boolean>(false);\r\n        const [isLoadingDelete, setLoadingDelete] = React.useState<boolean>(false);\r\n\r\n        const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        const handleEdit = React.useCallback(() => {\r\n            handleClose();\r\n            setLoadingEdit(true);\r\n            if (hasValue(props.onEdit)) {\r\n                const action = props.onEdit as (id: number | string) => Promise<void>;\r\n                action(props.id)\r\n                    .then(() => {})\r\n                    .finally(() => setLoadingEdit(false));\r\n            }\r\n        }, [props]);\r\n\r\n        const handleDelete = React.useCallback(() => {\r\n            handleClose();\r\n            setLoadingDelete(true);\r\n            if (hasValue(props.onDelete)) {\r\n                const action = props.onDelete as (id: number | string) => Promise<void>;\r\n                action(props.id)\r\n                    .then(() => {})\r\n                    .finally(() => setLoadingDelete(false));\r\n            }\r\n        }, [props]);\r\n\r\n        return (\r\n            <>\r\n                <ListItem divider dense disableGutters>\r\n                    <ListItemText key={props.id} primary={props.title} secondary={props.children} />\r\n                    <ListItemSecondaryAction>\r\n                        {(hasValue(props.onEdit) || hasValue(props.onDelete)) && props.type === ItemType.Menu && (\r\n                            <>\r\n                                <IconButton onClick={handleClick} disableRipple className={classes.moreButton}>\r\n                                    <MoreVertIcon fontSize=\"inherit\" className={classes.moreButton} />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    id={'simple-menu-' + props.id}\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleClose}\r\n                                >\r\n                                    {hasValue(props.onEdit) && (\r\n                                        <MenuItem onClick={handleEdit}>\r\n                                            <ListItemIcon>\r\n                                                <EditIcon fontSize=\"small\" />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary=\"Edit\" />\r\n                                        </MenuItem>\r\n                                    )}\r\n                                    {hasValue(props.onDelete) && (\r\n                                        <MenuItem onClick={handleDelete}>\r\n                                            <ListItemIcon>\r\n                                                <DeleteIcon fontSize=\"small\" />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary=\"Delete\" />\r\n                                        </MenuItem>\r\n                                    )}\r\n                                </Menu>\r\n                            </>\r\n                        )}\r\n\r\n                        {hasValue(props.type) && props.type !== ItemType.Menu && (\r\n                            <Grid\r\n                                container\r\n                                direction={props.type === ItemType.Row ? 'row' : 'column'}\r\n                                justify=\"center\"\r\n                                spacing={2}\r\n                            >\r\n                                <Grid item>\r\n                                    {hasValue(props.onEdit) && (\r\n                                        <IconButton size=\"small\" onClick={handleEdit} disabled={isLoadingDelete}>\r\n                                            <LoadingComponent showLoading={isLoadingEdit} size={17}>\r\n                                                <EditIcon fontSize=\"inherit\" data-testid=\"edit-element\" />\r\n                                            </LoadingComponent>\r\n                                        </IconButton>\r\n                                    )}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    {hasValue(props.onDelete) && (\r\n                                        <IconButton size=\"small\" onClick={handleDelete} disabled={isLoadingEdit}>\r\n                                            <LoadingComponent showLoading={isLoadingDelete} size={17}>\r\n                                                <DeleteIcon fontSize=\"inherit\" data-testid=\"delete-element\" />\r\n                                            </LoadingComponent>\r\n                                        </IconButton>\r\n                                    )}\r\n                                </Grid>\r\n                            </Grid>\r\n                        )}\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n            </>\r\n        );\r\n    }\r\n);\r\n","import { ServiceBase } from './serviceBase';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { GroupModel, GroupFullModel } from '../models/group';\r\n\r\nexport class GroupService extends ServiceBase {\r\n    private baseUrl = '/api/group';\r\n\r\n    constructor(protected config: AppConfig) {\r\n        super(config);\r\n    }\r\n\r\n    async getAll(): Promise<GroupModel[]> {\r\n        return await this.get<GroupModel[]>(this.baseUrl);\r\n    }\r\n\r\n    async getFullAll(): Promise<GroupFullModel[]> {\r\n        return await this.get<GroupFullModel[]>(this.baseUrl + '/full');\r\n    }\r\n\r\n    async add(group: GroupFullModel): Promise<GroupFullModel> {\r\n        return await this.post<GroupFullModel>(this.baseUrl, {}, group);\r\n    }\r\n\r\n    async update(group: GroupFullModel): Promise<void> {\r\n        return await this.put<void>(this.baseUrl, {}, group);\r\n    }\r\n\r\n    async remove(groupId: number): Promise<void> {\r\n        return await this.delete<void>(this.baseUrl + '/' + groupId);\r\n    }\r\n}\r\n","import React, { useContext } from 'react';\nimport { Redirect } from 'react-router';\nimport { userContext } from '../contexts/userContext';\n\ninterface PrivateRouteProps {\n    component: any;\n    path?: string;\n}\n\nexport const PrivateRoute = ({ component: Component, path, ...other }: PrivateRouteProps) => {\n    const { user } = useContext(userContext);\n    return user ? <Component /> : <Redirect to=\"/auth\" />;\n};\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport 'chartjs-plugin-colorschemes';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport ExposureIcon from '@material-ui/icons/Exposure';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nimport { SearchComponent } from '../../components/search/search';\r\nimport { globalContext } from '../../contexts/globalContext';\r\nimport { LabelService } from '../../services/labelService';\r\nimport { AppConfig } from '../../configurations/appConfig';\r\nimport { ConfigurationManager } from '../../configurations/configurationManager';\r\nimport { LabelFullModel } from '../../models/label';\r\nimport { LoadingComponent } from '../../components/loading/loading';\r\nimport { ItemComponent, ItemType } from '../../components/item/item';\r\nimport { userContext } from '../../contexts/userContext';\r\nimport { LabelsManagePage } from './labelsManage';\r\nimport { hasValue } from '../../helpers/utilHelper';\r\nimport { TabPanel } from '../../components/tabPanel/tabPanel';\r\n\r\nenum LabelValueType {\r\n    CURRENT_VALUE = 0,\r\n    LAST_VALUE,\r\n    AVERAGE_VALUE\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        '&:last-child': {\r\n            paddingBottom: theme.spacing(2)\r\n        }\r\n    },\r\n    title: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: 0\r\n    },\r\n    list: {\r\n        width: '100%'\r\n    },\r\n    listValues: {\r\n        flexGrow: 1\r\n    },\r\n    gridItem: {\r\n        marginTop: theme.spacing(2)\r\n    },\r\n    badge: {},\r\n    tab: {\r\n        flexGrow: 1\r\n    },\r\n    tabs: {\r\n        flexGrow: 1,\r\n        width: '100%'\r\n    },\r\n    graphButtons: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nexport type LabelsProps = {};\r\n\r\nexport const LabelsPage: React.FC<LabelsProps> = React.memo(() => {\r\n    const { isReady } = React.useContext(userContext);\r\n    const global = React.useContext(globalContext);\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n    const classes = useStyles();\r\n    const [t] = useTranslation();\r\n    const options = {\r\n        plugins: {\r\n            colorschemes: {\r\n                scheme: 'office.Excel16'\r\n            }\r\n        }\r\n    };\r\n\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [data, setData] = React.useState<LabelFullModel[]>([]);\r\n    const [dataSize, setDataSize] = React.useState<number>();\r\n    const [reload, setReload] = React.useState<boolean>(true);\r\n    const [error, setError] = React.useState<string>('');\r\n    const [info, setInfo] = React.useState<string>('');\r\n    const [label, setLabel] = React.useState<LabelFullModel>();\r\n    const [show, setShow] = React.useState<boolean>(false);\r\n    const [tab, setTab] = React.useState(0);\r\n    const [graphType, setGraphType] = React.useState<LabelValueType>(LabelValueType.CURRENT_VALUE);\r\n\r\n    const handleChangeGraphType = (event: React.MouseEvent<HTMLElement>, type: string) => {\r\n        setGraphType(+type);\r\n    };\r\n\r\n    const handleChangeTab = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setTab(newValue);\r\n    };\r\n\r\n    const handleEdit = React.useCallback(\r\n        async (id: number | string) => {\r\n            setLabel(data.find(x => x.id === id));\r\n            setShow(true);\r\n            return Promise.resolve();\r\n        },\r\n        [data]\r\n    );\r\n\r\n    const handleDelete = React.useCallback(\r\n        async (id: number | string) => {\r\n            return new LabelService(config)\r\n                .remove(id as number)\r\n                .then(() => {\r\n                    setReload(!reload);\r\n                })\r\n                .catch(() => setError(t('COMMON.ERROR')));\r\n        },\r\n        [config, reload, t]\r\n    );\r\n\r\n    const handleAdd = React.useCallback(() => {\r\n        setLabel(undefined);\r\n        setShow(true);\r\n    }, []);\r\n\r\n    const handleAction = React.useCallback(() => {\r\n        setReload(!reload);\r\n        setShow(false);\r\n    }, [reload]);\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        setShow(false);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!isReady || global.isLoading || !hasValue(global.group)) {\r\n            // not ready to requet\r\n            return;\r\n        }\r\n\r\n        // if (reload) {\r\n        //     setReload(false);\r\n        // } else {\r\n        //     return;\r\n        // }\r\n\r\n        setError('');\r\n        setInfo('');\r\n        setDataSize(undefined);\r\n        setLoading(true);\r\n        new LabelService(config)\r\n            .getFullAll(global.group?.id as number, global.month, global.year)\r\n            .then(value => {\r\n                setData(value);\r\n                setDataSize(value.length);\r\n                if (value.length === 0) {\r\n                    setInfo(t('COMMON.EMPTY'));\r\n                }\r\n            })\r\n            .catch(() => setError(t('COMMON.ERROR')))\r\n            .finally(() => setLoading(false));\r\n    }, [isReady, config, reload, t, global.isLoading, global.group, global.month, global.year]);\r\n\r\n    const dataElements = React.useMemo(\r\n        () =>\r\n            data.map(label => (\r\n                <>\r\n                    <ItemComponent\r\n                        key={label.id}\r\n                        id={label.id}\r\n                        title={label.name}\r\n                        type={ItemType.Menu}\r\n                        onEdit={handleEdit}\r\n                        onDelete={handleDelete}\r\n                    >\r\n                        <Grid container justify=\"space-around\" alignItems=\"center\" className={classes.gridItem}>\r\n                            <Tooltip title=\"Current value\">\r\n                                <Chip\r\n                                    icon={<PlayArrowIcon />}\r\n                                    size=\"small\"\r\n                                    label={label.currValue.toFixed(2)}\r\n                                    clickable\r\n                                    color={\r\n                                        label.currValue >= label.lastValue || label.currValue >= label.avgValue\r\n                                            ? 'primary'\r\n                                            : 'secondary'\r\n                                    }\r\n                                />\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Last value\" aria-label=\"add\">\r\n                                <Chip\r\n                                    icon={<SkipPreviousIcon />}\r\n                                    size=\"small\"\r\n                                    label={label.lastValue.toFixed(2)}\r\n                                    clickable\r\n                                    color={label.lastValue >= label.avgValue ? 'primary' : 'secondary'}\r\n                                />\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Average value\" aria-label=\"add\">\r\n                                <Chip\r\n                                    icon={<ExposureIcon />}\r\n                                    size=\"small\"\r\n                                    label={label.avgValue.toFixed(2)}\r\n                                    clickable\r\n                                    color=\"primary\"\r\n                                />\r\n                            </Tooltip>\r\n                        </Grid>\r\n                    </ItemComponent>\r\n                </>\r\n            )),\r\n        [data, classes.gridItem, handleEdit, handleDelete]\r\n    );\r\n\r\n    const dataChart = React.useMemo(() => {\r\n        if (data.length === 0) {\r\n            return {\r\n                labels: ['Empty'],\r\n                datasets: [\r\n                    {\r\n                        data: [1],\r\n                        borderWidth: 0\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n\r\n        return {\r\n            labels: data.map(x => x.name),\r\n            datasets: [\r\n                {\r\n                    data: data.map(x =>\r\n                        graphType === LabelValueType.CURRENT_VALUE\r\n                            ? x.currValue\r\n                            : graphType === LabelValueType.LAST_VALUE\r\n                            ? x.lastValue\r\n                            : x.avgValue\r\n                    ),\r\n                    borderWidth: 0\r\n                }\r\n            ]\r\n        };\r\n    }, [data, graphType]);\r\n\r\n    return (\r\n        <div key={'LabelComponent'}>\r\n            <SearchComponent\r\n                loading={global.isLoading}\r\n                groups={global.groups}\r\n                years={global.years}\r\n                group={global.group}\r\n                month={global.month}\r\n                year={global.year}\r\n            />\r\n            <Divider />\r\n            <Grid container justify=\"space-between\" alignItems=\"center\" className={classes.root} spacing={1}>\r\n                <Typography variant=\"h5\" className={classes.title}>\r\n                    {t('LABELS.LIST.TITLE')}\r\n                </Typography>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<AddIcon />}\r\n                    onClick={handleAdd}\r\n                    disabled={isLoading || !isReady || global.isLoading}\r\n                >\r\n                    {t('COMMON.ADD')}\r\n                </Button>\r\n            </Grid>\r\n            <Grid container justify=\"flex-start\" alignItems=\"center\" className={classes.root} spacing={1}>\r\n                <LoadingComponent showLoading={isLoading || !isReady} error={error} info={info}>\r\n                    <div className={classes.tabs}>\r\n                        <Paper className={classes.tab}>\r\n                            <Tabs value={tab} onChange={handleChangeTab} centered variant=\"fullWidth\">\r\n                                <Tab\r\n                                    label={\r\n                                        <Badge badgeContent={dataSize} color=\"primary\">\r\n                                            {t('LABELS.LIST.ITEMS_TAB')}\r\n                                        </Badge>\r\n                                    }\r\n                                />\r\n                                <Tab label={t('LABELS.LIST.GRAPH_TAB')} />\r\n                            </Tabs>\r\n                        </Paper>\r\n                        <TabPanel value={tab} index={0}>\r\n                            <List className={classes.list}>\r\n                                <ItemComponent key={0} id={0}>\r\n                                    <Grid\r\n                                        container\r\n                                        justify=\"space-around\"\r\n                                        alignItems=\"center\"\r\n                                        className={classes.gridItem}\r\n                                    >\r\n                                        <Typography variant=\"subtitle1\">{t('LABELS.LIST.CURRENT_VALUE')}</Typography>\r\n                                        <Typography variant=\"subtitle1\">{t('LABELS.LIST.LAST_VALUE')}</Typography>\r\n                                        <Typography variant=\"subtitle1\">{t('LABELS.LIST.AVERAGE_VALUE')}</Typography>\r\n                                    </Grid>\r\n                                </ItemComponent>\r\n                                {dataElements}\r\n                            </List>\r\n                        </TabPanel>\r\n                        <TabPanel value={tab} index={1}>\r\n                            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                                <ToggleButtonGroup\r\n                                    size=\"small\"\r\n                                    value={graphType}\r\n                                    exclusive\r\n                                    onChange={handleChangeGraphType}\r\n                                    className={classes.graphButtons}\r\n                                >\r\n                                    <ToggleButton value={LabelValueType.CURRENT_VALUE}>\r\n                                        <PlayArrowIcon /> {t('LABELS.LIST.CURRENT_VALUE')}\r\n                                    </ToggleButton>\r\n                                    <ToggleButton value={LabelValueType.LAST_VALUE}>\r\n                                        <SkipPreviousIcon /> {t('LABELS.LIST.LAST_VALUE')}\r\n                                    </ToggleButton>\r\n                                    <ToggleButton value={LabelValueType.AVERAGE_VALUE}>\r\n                                        <ExposureIcon /> {t('LABELS.LIST.AVERAGE_VALUE')}\r\n                                    </ToggleButton>\r\n                                </ToggleButtonGroup>\r\n                                <Grid item xs={12} sm={8} md={6}>\r\n                                    <Pie data={dataChart} options={options} width={200} height={200} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </TabPanel>\r\n                    </div>\r\n                </LoadingComponent>\r\n            </Grid>\r\n            <LabelsManagePage label={label} show={show} onAction={handleAction} onClose={handleClose} />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { useTheme, WithStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport { hasValue } from '../../helpers/utilHelper';\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        root: {\n            marginTop: 50,\n            [theme.breakpoints.up('sm')]: {\n                marginTop: 0\n            },\n            padding: theme.spacing(2)\n        },\n        closeButton: {\n            marginTop: 50,\n            [theme.breakpoints.up('sm')]: {\n                marginTop: 0\n            },\n            position: 'absolute',\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n            color: theme.palette.grey[500]\n        }\n    });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n    id: string;\n    children: React.ReactNode;\n    onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(2)\n    }\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1)\n    }\n}))(MuiDialogActions);\n\nexport type DialogProps = {\n    show: boolean;\n    title: string;\n    actionText: string;\n    disableAction: boolean;\n    onAction: () => Promise<void>;\n    onClose: () => void;\n};\n\nexport const DialogComponent: React.FC<React.PropsWithChildren<DialogProps>> = React.memo(\n    (props: React.PropsWithChildren<DialogProps>) => {\n        const theme = useTheme();\n        const [t] = useTranslation();\n        const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n        const [isLoading, setLoading] = React.useState<boolean>(false);\n        const [error, setError] = React.useState<string>('');\n\n        const handleClose = React.useCallback(() => {\n            props.onClose();\n        }, [props]);\n\n        const handleAction = React.useCallback(() => {\n            setLoading(true);\n            props\n                .onAction()\n                .catch(() => setError(t('COMMON.ERROR')))\n                .finally(() => setLoading(false));\n        }, [props, t]);\n\n        React.useEffect(() => {\n            setError('');\n        }, [props.show]);\n\n        return (\n            <>\n                <Dialog\n                    fullScreen={fullScreen}\n                    open={props.show}\n                    onClose={handleClose}\n                    aria-labelledby=\"responsive-dialog-title\"\n                >\n                    <DialogTitle id=\"responsive-dialog-title\" onClose={handleClose}>\n                        {props.title}\n                    </DialogTitle>\n                    <DialogContent>\n                        <>\n                            {hasValue(error) && <Alert severity=\"error\">{error}</Alert>}\n                            {props.children}\n                        </>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            variant=\"contained\"\n                            autoFocus\n                            color=\"primary\"\n                            onClick={handleAction}\n                            endIcon={isLoading && <CircularProgress size={12} />}\n                            startIcon={hasValue(error) && <CloseIcon color=\"secondary\" />}\n                            disabled={props.disableAction || isLoading}\n                        >\n                            {props.actionText}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n);\n","import React, { memo, useContext } from 'react';\n\nimport Chip from '@material-ui/core/Chip';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { UserModel } from '../../models/user';\nimport { hasValue } from '../../helpers/utilHelper';\nimport { userContext } from '../../contexts/userContext';\nimport { useTranslation } from 'react-i18next';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nexport const getDisplayName = (user: UserModel, currentUserId: string = '', youText: string = '') => {\n    if (user.id === currentUserId) {\n        return youText;\n    }\n    if (hasValue(user.displayName)) {\n        return user.displayName.split(' ')[0];\n    }\n    return user.email.split('@')[0];\n};\n\nconst useStyles = makeStyles(() => ({\n    chip: {\n        margin: 2\n    }\n}));\n\nexport type AvatarChipProps = {\n    user: UserModel;\n};\n\nexport const AvatarChipComponent: React.FC<AvatarChipProps> = memo((props: AvatarChipProps) => {\n    const classes = useStyles();\n    const { user } = useContext(userContext);\n    const [t] = useTranslation();\n\n    return (\n        <Chip\n            label={getDisplayName(props.user, user?.uid, t('COMMON.YOU'))}\n            className={classes.chip}\n            avatar={\n                <Avatar alt={props.user.email} src={props.user.photoUrl}>\n                    {getDisplayName(props.user)[0]}\n                </Avatar>\n            }\n        />\n    );\n});\n\nexport interface AvatarMenuProps {\n    user: UserModel;\n}\n\nexport const AvatarMenuComponent: React.FC<AvatarMenuProps> = memo((props: AvatarMenuProps) => {\n    const { user } = useContext(userContext);\n    const [t] = useTranslation();\n\n    return (\n        <>\n            <ListItemIcon>\n                <Avatar alt={props.user.email} src={props.user.photoUrl}>\n                    {getDisplayName(props.user)[0]}\n                </Avatar>\n            </ListItemIcon>\n            <ListItemText\n                primary={getDisplayName(props.user, user?.uid, t('COMMON.YOU'))}\n                secondary={props.user.email}\n            />\n        </>\n    );\n});\n","import React from 'react';\n\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\n\nimport { DialogComponent } from '../../components/dialog/dialog';\nimport { LoadingComponent } from '../../components/loading/loading';\nimport { GroupFullModel } from '../../models/group';\nimport { hasValue } from '../../helpers/utilHelper';\nimport { UserModel } from '../../models/user';\nimport { UserService } from '../../services/userService';\nimport { AppConfig } from '../../configurations/appConfig';\nimport { ConfigurationManager } from '../../configurations/configurationManager';\nimport { AvatarChipComponent, AvatarMenuComponent } from '../../components/avatar/avatar';\nimport { userContext } from '../../contexts/userContext';\nimport { GroupService } from '../../services/groupService';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n            maxWidth: 300\n        },\n        chips: {\n            display: 'flex',\n            flexWrap: 'wrap'\n        },\n        chip: {\n            margin: 2\n        },\n        noLabel: {\n            marginTop: theme.spacing(3)\n        }\n    })\n);\n\nconst ITEM_HEIGHT = 30;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250\n        }\n    }\n};\n\nexport type GroupsManageProps = {\n    show: boolean;\n    group?: GroupFullModel;\n    onAction: () => void;\n    onClose: () => void;\n};\n\nexport const GroupsManageDialog: React.FC<GroupsManageProps> = React.memo((props: GroupsManageProps) => {\n    const { user } = React.useContext(userContext);\n    const classes = useStyles();\n    const [t] = useTranslation();\n\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\n    const [title, setTitle] = React.useState<string>('');\n    const [button, setButton] = React.useState<string>('');\n    const [open, setOpen] = React.useState(false);\n    const [name, setName] = React.useState<string>('');\n    const [selectedUsers, setSelectedUsers] = React.useState<UserModel[]>([]);\n    const [isLoadingUsers, setLoadingUsers] = React.useState<boolean>(false);\n    const [users, setUsers] = React.useState<UserModel[]>([]);\n    const [errorUsers, setErrorUsers] = React.useState<string>('');\n    const selectedUsersId = React.useMemo(() => selectedUsers.map(x => x.id), [selectedUsers]);\n\n    const handleChangeName = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\n        setName(value.target.value);\n    }, []);\n\n    const handleClose = React.useCallback(() => {\n        setOpen(false);\n        props.onClose();\n    }, [props]);\n\n    const handleChange = React.useCallback(\n        (event: React.ChangeEvent<{ value: unknown }>) => {\n            const usersId = event.target.value as string[];\n            const us = usersId.map(userId => users.find(u => u.id === userId));\n            setSelectedUsers(us as UserModel[]);\n        },\n        [users]\n    );\n\n    const handleAction = React.useCallback(async () => {\n        if (hasValue(props.group)) {\n            return new GroupService(config)\n                .update({\n                    id: props.group?.id as number,\n                    name: name,\n                    users: selectedUsers\n                })\n                .then(() => {\n                    props.onAction();\n                    handleClose();\n                });\n        } else {\n            return new GroupService(config)\n                .add({\n                    id: 0,\n                    name: name,\n                    users: selectedUsers\n                })\n                .then(() => {\n                    props.onAction();\n                    handleClose();\n                });\n        }\n    }, [props, name, selectedUsers, config, handleClose]);\n\n    const usersElement = React.useMemo(\n        () =>\n            users.map(u => (\n                <MenuItem key={`menu-${u.id}`} value={u.id} disabled={u.id === user?.uid}>\n                    <AvatarMenuComponent user={u} />\n                </MenuItem>\n            )),\n        [user, users]\n    );\n\n    const renderValues = React.useCallback(\n        (selected: string[]) => (\n            <div className={classes.chips}>\n                {selected.map(userId => (\n                    <AvatarChipComponent\n                        key={`multiple-${userId}`}\n                        user={users.find(u => u.id === userId) as UserModel}\n                    />\n                ))}\n            </div>\n        ),\n        [users, classes.chips]\n    );\n\n    React.useEffect(() => {\n        setOpen(props.show);\n\n        if (!props.show) {\n            // does not need to update anything\n            return;\n        }\n\n        if (props.show && users.length === 0) {\n            setLoadingUsers(true);\n            new UserService(config)\n                .getAll()\n                .then(value => setUsers(value))\n                .catch(() => setErrorUsers(t('COMMON.ERROR')))\n                .finally(() => setLoadingUsers(false));\n        }\n\n        if (hasValue(props.group)) {\n            const g = props.group as GroupFullModel;\n            setName(g.name);\n            setSelectedUsers(g.users);\n\n            setTitle(t('GROUPS.MANAGE.EDIT.TITLE'));\n            setButton(t('COMMON.EDIT'));\n        } else {\n            setName('');\n            if (hasValue(users)) {\n                setSelectedUsers([users.find(x => x.id === user?.uid)] as UserModel[]);\n            }\n\n            setTitle(t('GROUPS.MANAGE.ADD.TITLE'));\n            setButton(t('COMMON.ADD'));\n        }\n    }, [props, config, users, user, t]);\n\n    return (\n        <>\n            <DialogComponent\n                show={open}\n                title={title}\n                actionText={button}\n                disableAction={!hasValue(name) || !hasValue(selectedUsers) || isLoadingUsers}\n                onAction={handleAction}\n                onClose={handleClose}\n            >\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <FormControl fullWidth>\n                            <InputLabel htmlFor=\"name\">{t('COMMON.NAME')}</InputLabel>\n                            <Input required id=\"name\" onChange={handleChangeName} value={name} />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"mutiple-users-label\">{t('GROUPS.MANAGE.USERS')}</InputLabel>\n                            <LoadingComponent showLoading={isLoadingUsers} error={errorUsers}>\n                                <Select\n                                    labelId=\"mutiple-users-label\"\n                                    id=\"users-mutiple-chip\"\n                                    multiple\n                                    value={selectedUsersId}\n                                    onChange={handleChange}\n                                    input={<Input id=\"select-multiple-chip\" />}\n                                    renderValue={selected => renderValues(selected as string[])}\n                                    MenuProps={MenuProps}\n                                >\n                                    {usersElement}\n                                </Select>\n                            </LoadingComponent>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </DialogComponent>\n        </>\n    );\n});\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { userContext } from '../../contexts/userContext';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { AppConfig } from '../../configurations/appConfig';\r\nimport { ConfigurationManager } from '../../configurations/configurationManager';\r\nimport { GroupService } from '../../services/groupService';\r\nimport { GroupFullModel } from '../../models/group';\r\nimport { ItemComponent, ItemType } from '../../components/item/item';\r\nimport { LoadingComponent } from '../../components/loading/loading';\r\nimport { GroupsManageDialog } from './groupsManage';\r\nimport { AvatarChipComponent } from '../../components/avatar/avatar';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        '&:last-child': {\r\n            paddingBottom: theme.spacing(2)\r\n        }\r\n    },\r\n    title: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: 0\r\n    },\r\n    list: {\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nexport type GroupsProps = {};\r\n\r\nexport const GroupsPage: React.FC<GroupsProps> = React.memo(() => {\r\n    const { isReady } = React.useContext(userContext);\r\n\r\n    const classes = useStyles();\r\n    const [t] = useTranslation();\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n    const [data, setData] = React.useState<GroupFullModel[]>([]);\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [show, setShow] = React.useState<boolean>(false);\r\n    const [group, setGroup] = React.useState<GroupFullModel>();\r\n    const [reload, setReload] = React.useState<boolean>(true);\r\n    const [error, setError] = React.useState<string>('');\r\n    const [info, setInfo] = React.useState<string>('');\r\n\r\n    const handleEdit = React.useCallback(\r\n        async (id: number | string) => {\r\n            setGroup(data.find(x => x.id === id));\r\n            setShow(true);\r\n            return Promise.resolve();\r\n        },\r\n        [data]\r\n    );\r\n\r\n    const handleDelete = React.useCallback(\r\n        async (id: number | string) => {\r\n            return new GroupService(config)\r\n                .remove(id as number)\r\n                .then(() => {\r\n                    setReload(true);\r\n                })\r\n                .catch(() => setError(t('COMMON.ERROR')));\r\n        },\r\n        [config, t]\r\n    );\r\n\r\n    const handleAdd = React.useCallback(() => {\r\n        setGroup(undefined);\r\n        setShow(true);\r\n    }, []);\r\n\r\n    const handleAction = React.useCallback(() => {\r\n        setReload(true);\r\n        setShow(false);\r\n    }, []);\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        setShow(false);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!isReady) {\r\n            // not ready to requet\r\n            return;\r\n        }\r\n\r\n        if (reload) {\r\n            setReload(false);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        setError('');\r\n        setInfo('');\r\n        setLoading(true);\r\n        new GroupService(config)\r\n            .getFullAll()\r\n            .then(value => {\r\n                setData(value);\r\n                if (value.length === 0) {\r\n                    setInfo(t('COMMON.EMPTY'));\r\n                }\r\n            })\r\n            .catch(() => setError(t('COMMON.ERROR')))\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    }, [config, isReady, reload, t]);\r\n\r\n    return (\r\n        <div key={'GroupComponent'}>\r\n            <Grid container justify=\"space-between\" alignItems=\"center\" className={classes.root} spacing={1}>\r\n                <Typography variant=\"h5\" className={classes.title}>\r\n                    {t('GROUPS.LIST.TITLE')}\r\n                </Typography>\r\n                <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={handleAdd}>\r\n                    {t('COMMON.ADD')}\r\n                </Button>\r\n            </Grid>\r\n            <Grid container justify=\"flex-start\" alignItems=\"center\" className={classes.root} spacing={1}>\r\n                <LoadingComponent showLoading={isLoading || !isReady} error={error} info={info}>\r\n                    <List className={classes.list}>\r\n                        {data.map(group => (\r\n                            <>\r\n                                <ItemComponent\r\n                                    key={group.id}\r\n                                    id={group.id}\r\n                                    title={group.name}\r\n                                    type={ItemType.Menu}\r\n                                    onEdit={handleEdit}\r\n                                    onDelete={handleDelete}\r\n                                >\r\n                                    <Grid container justify=\"flex-start\" alignItems=\"center\">\r\n                                        {group.users.map(u => (\r\n                                            <AvatarChipComponent key={`groups-page-${u.id}`} user={u} />\r\n                                        ))}\r\n                                    </Grid>\r\n                                </ItemComponent>\r\n                                <Divider />\r\n                            </>\r\n                        ))}\r\n                    </List>\r\n                </LoadingComponent>\r\n            </Grid>\r\n            <GroupsManageDialog group={group} show={show} onAction={handleAction} onClose={handleClose} />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { GroupModel } from '../models/group';\r\nimport { LabelModel } from '../models/label';\r\n\r\ninterface GlobalContext {\r\n    isLoading: boolean;\r\n\r\n    groups: GroupModel[];\r\n    labels: LabelModel[];\r\n    years: number[];\r\n\r\n    group?: GroupModel;\r\n    month: number;\r\n    year: number;\r\n}\r\n\r\nexport const globalContext = React.createContext<GlobalContext>({\r\n    isLoading: false,\r\n\r\n    groups: [],\r\n    labels: [],\r\n    years: [new Date().getFullYear()],\r\n\r\n    month: new Date().getMonth(),\r\n    year: new Date().getFullYear()\r\n});\r\n","import React, { memo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport queryString from 'query-string';\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionActions from '@material-ui/core/AccordionActions';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { GroupModel } from '../../models/group';\r\nimport { LoadingComponent, LoadingType } from '../loading/loading';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        title: {\r\n            maxWidth: 180\r\n        },\r\n        formControl: {\r\n            width: '100%'\r\n        },\r\n        details: {\r\n            alignItems: 'center'\r\n        }\r\n    })\r\n);\r\n\r\nexport type SearchProps = {\r\n    loading: boolean;\r\n\r\n    // data to fill\r\n    groups: GroupModel[];\r\n    years: number[];\r\n\r\n    // selected items\r\n    group?: GroupModel;\r\n    month: number;\r\n    year: number;\r\n};\r\n\r\nexport const SearchComponent: React.FC<SearchProps> = memo((props: SearchProps) => {\r\n    const classes = useStyles();\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const [t] = useTranslation();\r\n\r\n    const [isExpanded, setExpanded] = React.useState<boolean>(false);\r\n\r\n    const [groups, setGroups] = React.useState<GroupModel[]>(props.groups ?? []);\r\n    const [months] = React.useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\r\n    const [years, setYears] = React.useState<number[]>(props.years);\r\n\r\n    const [selectedGroup, setSelectedGroup] = React.useState<number | string>(props.group?.id ?? '');\r\n    const selectedGroupName = React.useMemo<string>(() => groups.find(x => x.id === selectedGroup)?.name ?? '', [\r\n        groups,\r\n        selectedGroup\r\n    ]);\r\n    const [selectedMonth, setSelectedMonth] = React.useState<number>(props.month);\r\n    const [selectedYear, setSelectedYear] = React.useState<number>(props.year);\r\n\r\n    const groupsMenuItems = React.useMemo(\r\n        () =>\r\n            groups.map(group => (\r\n                <option key={group.id} value={group.id}>\r\n                    {group.name}\r\n                </option>\r\n            )),\r\n        [groups]\r\n    );\r\n\r\n    const monthsMenuItems = React.useMemo(\r\n        () =>\r\n            months.map(month => (\r\n                <option key={month} value={month}>\r\n                    {t('SEARCH.MONTHS.' + month)}\r\n                </option>\r\n            )),\r\n        [months, t]\r\n    );\r\n\r\n    const yearsMenuItems = React.useMemo(\r\n        () =>\r\n            years.map(year => (\r\n                <option key={year} value={year}>\r\n                    {year}\r\n                </option>\r\n            )),\r\n        [years]\r\n    );\r\n\r\n    const handleChangeGroup = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setSelectedGroup(event.target.value as number);\r\n    }, []);\r\n\r\n    const handleChangeMonth = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setSelectedMonth(event.target.value as number);\r\n    }, []);\r\n\r\n    const handleChangeYear = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setSelectedYear(event.target.value as number);\r\n    }, []);\r\n\r\n    const handleChangeAccordion = React.useCallback((_event: object, expanded: boolean) => {\r\n        setExpanded(expanded);\r\n    }, []);\r\n\r\n    const handleAction = React.useCallback(() => {\r\n        setExpanded(false);\r\n\r\n        history.push({\r\n            pathname: location.pathname,\r\n            search: queryString.stringify({\r\n                group: selectedGroup,\r\n                month: selectedMonth,\r\n                year: selectedYear\r\n            })\r\n        });\r\n    }, [history, location, selectedGroup, selectedMonth, selectedYear]);\r\n\r\n    React.useEffect(() => {\r\n        // update internal stuff\r\n        setGroups(props.groups);\r\n        setYears(props.years);\r\n        setSelectedGroup(props.group?.id ?? '');\r\n        setSelectedMonth(props.month);\r\n        setSelectedYear(props.year);\r\n    }, [props.groups, props.years, props.group, props.month, props.year]);\r\n\r\n    return (\r\n        <>\r\n            <Accordion onChange={handleChangeAccordion} disabled={props.loading} expanded={isExpanded}>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon data-testid=\"expand-element\" />}\r\n                    aria-controls=\"panel1c-content\"\r\n                    id=\"panel1c-header\"\r\n                >\r\n                    <LoadingComponent showLoading={props.loading} size={25} type={LoadingType.linear}>\r\n                        {isExpanded && (\r\n                            <Typography variant=\"h6\">\r\n                                <strong>{t('SEARCH.TITLE')}</strong>\r\n                            </Typography>\r\n                        )}\r\n                        {!isExpanded && (\r\n                            <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"center\">\r\n                                <Typography variant=\"body1\" noWrap={true} className={classes.title}>\r\n                                    {selectedGroupName}\r\n                                </Typography>\r\n                                <Divider orientation=\"vertical\" flexItem />\r\n                                <Typography variant=\"body1\">{t('SEARCH.MONTHS.' + selectedMonth)}</Typography>\r\n                                <Divider orientation=\"vertical\" flexItem />\r\n                                <Typography variant=\"body1\">{selectedYear}</Typography>\r\n                            </Grid>\r\n                        )}\r\n                    </LoadingComponent>\r\n                </AccordionSummary>\r\n                <AccordionDetails className={classes.details}>\r\n                    <Grid container justify=\"center\" spacing={2}>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"group-select\">{t('SEARCH.GROUP')}</InputLabel>\r\n                                <NativeSelect\r\n                                    id=\"group-select\"\r\n                                    defaultValue=\"\"\r\n                                    value={selectedGroup}\r\n                                    onChange={handleChangeGroup}\r\n                                >\r\n                                    {groupsMenuItems}\r\n                                </NativeSelect>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"month-label\">{t('SEARCH.MONTH')}</InputLabel>\r\n                                <NativeSelect\r\n                                    id=\"month-select\"\r\n                                    defaultValue=\"\"\r\n                                    value={selectedMonth}\r\n                                    onChange={handleChangeMonth}\r\n                                >\r\n                                    {monthsMenuItems}\r\n                                </NativeSelect>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"year-select\">{t('SEARCH.YEAR')}</InputLabel>\r\n                                <NativeSelect\r\n                                    id=\"year-select\"\r\n                                    defaultValue=\"\"\r\n                                    value={selectedYear}\r\n                                    onChange={handleChangeYear}\r\n                                >\r\n                                    {yearsMenuItems}\r\n                                </NativeSelect>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                </AccordionDetails>\r\n                <Divider />\r\n                <AccordionActions>\r\n                    <Button variant=\"contained\" color=\"primary\" startIcon={<SearchIcon />} onClick={handleAction}>\r\n                        {t('SEARCH.BUTTON')}\r\n                    </Button>\r\n                </AccordionActions>\r\n            </Accordion>\r\n        </>\r\n    );\r\n});\r\n","import { ServiceBase } from './serviceBase';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { LabelModel, LabelFullModel } from '../models/label';\r\n\r\nexport class LabelService extends ServiceBase {\r\n    private baseUrl = '/api/label';\r\n\r\n    constructor(protected config: AppConfig) {\r\n        super(config);\r\n    }\r\n\r\n    async getAll(group: number): Promise<LabelModel[]> {\r\n        return await this.get<LabelModel[]>(this.baseUrl, { group });\r\n    }\r\n\r\n    async getFullAll(group: number, month: number, year: number): Promise<LabelFullModel[]> {\r\n        return await this.get<LabelFullModel[]>(this.baseUrl + '/full', {\r\n            group,\r\n            month,\r\n            year\r\n        });\r\n    }\r\n\r\n    async add(group: number, label: LabelModel): Promise<LabelModel> {\r\n        return await this.post<LabelModel>(this.baseUrl, { group }, label);\r\n    }\r\n\r\n    async update(label: LabelModel): Promise<void> {\r\n        return await this.put<void>(this.baseUrl, {}, label);\r\n    }\r\n\r\n    async remove(id: number): Promise<void> {\r\n        return await this.delete<void>(this.baseUrl + '/' + id);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ConfigurationManager } from '../../configurations/configurationManager';\r\nimport { AppConfig } from '../../configurations/appConfig';\r\nimport { LabelFullModel } from '../../models/label';\r\nimport { DialogComponent } from '../../components/dialog/dialog';\r\nimport { hasValue } from '../../helpers/utilHelper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport { LabelService } from '../../services/labelService';\r\nimport { globalContext } from '../../contexts/globalContext';\r\n\r\nexport type LabelsManageProps = {\r\n    show: boolean;\r\n    label?: LabelFullModel;\r\n    onAction: () => void;\r\n    onClose: () => void;\r\n};\r\n\r\nexport const LabelsManagePage: React.FC<LabelsManageProps> = React.memo((props: LabelsManageProps) => {\r\n    const [t] = useTranslation();\r\n    const global = React.useContext(globalContext);\r\n\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n    const [title, setTitle] = React.useState<string>('');\r\n    const [button, setButton] = React.useState<string>('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [name, setName] = React.useState<string>('');\r\n\r\n    const handleChangeName = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\r\n        setName(value.target.value);\r\n    }, []);\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        setOpen(false);\r\n        props.onClose();\r\n    }, [props]);\r\n\r\n    const handleAction = React.useCallback(async () => {\r\n        if (hasValue(props.label)) {\r\n            return new LabelService(config)\r\n                .update({\r\n                    id: props.label?.id as number,\r\n                    name: name\r\n                })\r\n                .then(() => {\r\n                    props.onAction();\r\n                    handleClose();\r\n                });\r\n        } else {\r\n            return new LabelService(config)\r\n                .add(global.group?.id as number, {\r\n                    id: 0,\r\n                    name: name\r\n                })\r\n                .then(() => {\r\n                    props.onAction();\r\n                    handleClose();\r\n                });\r\n        }\r\n    }, [props, name, config, global.group, handleClose]);\r\n\r\n    React.useEffect(() => {\r\n        setOpen(props.show);\r\n\r\n        if (!props.show) {\r\n            // does not need to update anything\r\n            return;\r\n        }\r\n        if (hasValue(props.label)) {\r\n            const g = props.label as LabelFullModel;\r\n            setName(g.name);\r\n\r\n            setTitle(t('LABELS.MANAGE.EDIT.TITLE'));\r\n            setButton(t('COMMON.EDIT'));\r\n        } else {\r\n            setName('');\r\n\r\n            setTitle(t('LABELS.MANAGE.ADD.TITLE'));\r\n            setButton(t('COMMON.ADD'));\r\n        }\r\n    }, [props, config, t]);\r\n\r\n    return (\r\n        <>\r\n            <DialogComponent\r\n                show={open}\r\n                title={title}\r\n                actionText={button}\r\n                disableAction={!hasValue(name)}\r\n                onAction={handleAction}\r\n                onClose={handleClose}\r\n            >\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel htmlFor=\"name\">{t('COMMON.NAME')}</InputLabel>\r\n                            <Input required id=\"name\" onChange={handleChangeName} value={name} />\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogComponent>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nexport function TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <>{children}</>}\r\n        </div>\r\n    );\r\n}\r\n","import { GroupModel } from './group';\r\nimport { LabelModel } from './label';\r\n\r\nexport enum ExpenseType {\r\n    Incoming,\r\n    Outcoming\r\n}\r\n\r\nexport interface ExpenseModel {\r\n    id: number;\r\n    name: string;\r\n\r\n    type: ExpenseType;\r\n    value: number;\r\n    date: Date;\r\n    comments: string;\r\n\r\n    labelId: number;\r\n    groupId: number;\r\n}\r\n\r\nexport interface ExpenseFullModel {\r\n    id: number;\r\n    name: string;\r\n\r\n    type: ExpenseType;\r\n    value: number;\r\n    date: Date;\r\n    comments: string;\r\n\r\n    label: LabelModel;\r\n    group: GroupModel;\r\n}\r\n","import { ServiceBase } from './serviceBase';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { ExpenseModel, ExpenseFullModel } from '../models/expense';\r\n\r\nexport class ExpenseService extends ServiceBase {\r\n    private baseUrl = '/api/expense';\r\n\r\n    constructor(protected config: AppConfig) {\r\n        super(config);\r\n    }\r\n\r\n    async getAll(): Promise<ExpenseModel[]> {\r\n        return await this.get<ExpenseModel[]>(this.baseUrl);\r\n    }\r\n\r\n    async getFullAll(group: number, month: number, year: number): Promise<ExpenseFullModel[]> {\r\n        return await this.get<ExpenseFullModel[]>(this.baseUrl + '/full', {\r\n            group,\r\n            month,\r\n            year\r\n        });\r\n    }\r\n\r\n    async add(obj: Partial<ExpenseModel>): Promise<ExpenseModel> {\r\n        return await this.post<ExpenseModel>(this.baseUrl, {}, obj);\r\n    }\r\n\r\n    async update(obj: ExpenseModel): Promise<void> {\r\n        return await this.put<void>(this.baseUrl, {}, obj);\r\n    }\r\n\r\n    async remove(id: number): Promise<void> {\r\n        return await this.delete<void>(this.baseUrl + '/' + id);\r\n    }\r\n}\r\n","import React, { memo, useState, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router';\n\nimport TextField from '@material-ui/core/TextField';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\n\nimport { loginWithEmail, createUserWithEmail, resetPassword } from '../../services/authService';\nimport { Routes } from '../routes';\nimport { hasValue } from '../../helpers/utilHelper';\n\nexport enum LoginPageType {\n    LOGIN = 'LOGIN',\n    REGISTER = 'REGISTER',\n    RESET = 'RESET'\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '& .MuiTextField-root': {\n                margin: theme.spacing(1),\n                width: '25ch'\n            }\n        }\n    })\n);\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport interface LoginProps {\n    type: LoginPageType;\n}\n\nexport const LoginPage: React.FC<LoginProps> = memo((props: LoginProps) => {\n    const classes = useStyles();\n    const [t] = useTranslation();\n    const history = useHistory();\n\n    const [error, setError] = useState<string>();\n    const [email, setEmail] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n    const disableAction = useMemo(\n        () => (props.type === LoginPageType.RESET ? !hasValue(email) : !(hasValue(email) && hasValue(password))),\n        [email, password, props.type]\n    );\n\n    const handleChangeEmail = useCallback((value: any) => {\n        setEmail(value.target.value);\n    }, []);\n    const handleChangePassword = useCallback((value: any) => {\n        setPassword(value.target.value);\n    }, []);\n\n    const [isLoading, setLoading] = useState<boolean>(false);\n\n    const handleAction = useCallback(async () => {\n        setLoading(true);\n        setError(undefined);\n\n        let promise: Promise<void>;\n        switch (props.type) {\n            case LoginPageType.LOGIN:\n                promise = loginWithEmail(email, password);\n                break;\n            case LoginPageType.REGISTER:\n                promise = createUserWithEmail(email, password);\n                break;\n            case LoginPageType.RESET:\n                promise = resetPassword(email);\n                break;\n        }\n        promise\n            .then(() => {\n                setTimeout(() => history.push(Routes.home));\n            })\n            .catch(error => {\n                setError(error.message);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [email, password, history, props.type]);\n\n    const [title, button] = useMemo(() => {\n        return [t(`AUTH.${props.type}.TITLE`), t(`AUTH.${props.type}.BUTTON`)];\n    }, [props.type, t]);\n\n    return (\n        <>\n            <Card>\n                <CardHeader title={title} />\n                <CardContent>\n                    {hasValue(error) && <Alert severity=\"error\">{error}</Alert>}\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <Grid container>\n                            <Grid container item xs={12}>\n                                <TextField\n                                    required\n                                    id={`${props.type}-email-required`}\n                                    label={t('AUTH.EMAIL')}\n                                    disabled={isLoading}\n                                    value={email}\n                                    onChange={handleChangeEmail}\n                                />\n                            </Grid>\n                            {props.type !== LoginPageType.RESET && (\n                                <Grid container item xs={12}>\n                                    <TextField\n                                        required\n                                        id={`${props.type}-password-required`}\n                                        label={t('AUTH.PASSWORD')}\n                                        type=\"password\"\n                                        disabled={isLoading}\n                                        value={password}\n                                        onChange={handleChangePassword}\n                                    />\n                                </Grid>\n                            )}\n                        </Grid>\n                    </form>\n                </CardContent>\n                <CardActions>\n                    <Button\n                        id={`${props.type}-action`}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"small\"\n                        endIcon={isLoading && <CircularProgress size={12} />}\n                        disabled={isLoading || disableAction}\n                        onClick={handleAction}\n                    >\n                        {button}\n                    </Button>\n                </CardActions>\n            </Card>\n        </>\n    );\n});\n","import React from 'react';\r\nimport { DateType } from '@date-io/type';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Input from '@material-ui/core/Input';\r\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nimport { ExpenseFullModel, ExpenseType } from '../../models/expense';\r\nimport { globalContext } from '../../contexts/globalContext';\r\nimport { ConfigurationManager } from '../../configurations/configurationManager';\r\nimport { AppConfig } from '../../configurations/appConfig';\r\nimport { DialogComponent } from '../../components/dialog/dialog';\r\nimport { hasValue } from '../../helpers/utilHelper';\r\nimport { ExpenseService } from '../../services/expenseService';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            width: '100%'\r\n        }\r\n    })\r\n);\r\n\r\nexport type ExpensesManageProps = {\r\n    show: boolean;\r\n    expense?: ExpenseFullModel;\r\n    onAction: () => void;\r\n    onClose: () => void;\r\n};\r\n\r\nexport const ExpensesManagePage: React.FC<ExpensesManageProps> = React.memo((props: ExpensesManageProps) => {\r\n    const [t] = useTranslation();\r\n    const global = React.useContext(globalContext);\r\n    const classes = useStyles();\r\n\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n    const [title, setTitle] = React.useState<string>('');\r\n    const [button, setButton] = React.useState<string>('');\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const [name, setName] = React.useState<string>('');\r\n    const [type, setType] = React.useState<ExpenseType>(ExpenseType.Outcoming);\r\n    const [value, setValue] = React.useState<number>();\r\n    const [label, setLabel] = React.useState<string>('');\r\n    const [date, setDate] = React.useState<DateType | null>(new Date());\r\n    const [comments, setComments] = React.useState<string>();\r\n\r\n    const labelsMenuItems = React.useMemo(() => {\r\n        if (!hasValue(label) && global.labels.length > 0) {\r\n            const lastLabel = localStorage.getItem('label') as string;\r\n            if (!hasValue(props.expense) && hasValue(lastLabel) && global.labels.some(x => x.id === +lastLabel)) {\r\n                setLabel(global.labels[+lastLabel]?.id.toString());\r\n            } else {\r\n                setLabel(global.labels[0]?.id.toString());\r\n            }\r\n        }\r\n        return global.labels.map(label => (\r\n            <option key={label.id} value={label.id}>\r\n                {label.name}\r\n            </option>\r\n        ));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [global.labels, props.expense]);\r\n\r\n    const handleChangeType = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setType(+(event.target as HTMLInputElement).value as ExpenseType);\r\n    };\r\n\r\n    const handleChangeLabel = React.useCallback((event: React.ChangeEvent<{ value: string }>) => {\r\n        setLabel(event.target.value);\r\n        localStorage.setItem('label', event.target.value);\r\n    }, []);\r\n\r\n    const handleChangeName = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\r\n        setName(value.target.value);\r\n    }, []);\r\n\r\n    const handleChangeValue = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\r\n        if (+value.target.value === 0) {\r\n            setValue(undefined);\r\n        } else {\r\n            setValue(+value.target.value);\r\n        }\r\n    }, []);\r\n\r\n    const handleChangeDate = (date: DateType | null) => {\r\n        setDate(date);\r\n    };\r\n\r\n    const handleChangeComments = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\r\n        setComments(value.target.value);\r\n    }, []);\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        setOpen(false);\r\n        props.onClose();\r\n    }, [props]);\r\n\r\n    const handleAction = React.useCallback(async () => {\r\n        if (hasValue(props.expense)) {\r\n            return new ExpenseService(config)\r\n                .update({\r\n                    id: props.expense?.id as number,\r\n                    name: name,\r\n                    type: type,\r\n                    comments: comments as string,\r\n                    date: date as Date,\r\n                    groupId: global.group?.id as number,\r\n                    labelId: +label as number,\r\n                    value: value as number\r\n                })\r\n                .then(() => {\r\n                    props.onAction();\r\n                    handleClose();\r\n                });\r\n        } else {\r\n            return new ExpenseService(config)\r\n                .add({\r\n                    name: name,\r\n                    type: type,\r\n                    comments: comments as string,\r\n                    date: date as Date,\r\n                    groupId: global.group?.id as number,\r\n                    labelId: +label as number,\r\n                    value: value as number\r\n                })\r\n                .then(() => {\r\n                    props.onAction();\r\n                    handleClose();\r\n                });\r\n        }\r\n    }, [props, type, date, label, name, value, comments, config, global.group, handleClose]);\r\n\r\n    React.useEffect(() => {\r\n        setOpen(props.show);\r\n\r\n        if (!props.show) {\r\n            // does not need to update anything\r\n            return;\r\n        }\r\n        if (hasValue(props.expense)) {\r\n            const e = props.expense as ExpenseFullModel;\r\n            setType(e.type);\r\n            setDate(e.date);\r\n            setName(e.name);\r\n            setValue(e.value);\r\n            setComments(e.comments);\r\n\r\n            setTitle(t('EXPENSES.MANAGE.EDIT.TITLE'));\r\n            setButton(t('COMMON.EDIT'));\r\n        } else {\r\n            setType(ExpenseType.Outcoming);\r\n            setDate(new Date());\r\n            setName('');\r\n            setValue(undefined);\r\n            setComments('');\r\n\r\n            setTitle(t('EXPENSES.MANAGE.ADD.TITLE'));\r\n            setButton(t('COMMON.ADD'));\r\n        }\r\n    }, [props, config, t]);\r\n    return (\r\n        <>\r\n            <DialogComponent\r\n                show={open}\r\n                title={title}\r\n                actionText={button}\r\n                disableAction={!hasValue(name) || !hasValue(value) || !hasValue(label)}\r\n                onAction={handleAction}\r\n                onClose={handleClose}\r\n            >\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel required component=\"label\">\r\n                                {t('EXPENSES.MANAGE.TYPE')}\r\n                            </FormLabel>\r\n                            <RadioGroup aria-label=\"type\" name=\"type\" value={type} onChange={handleChangeType}>\r\n                                <FormControlLabel\r\n                                    value={ExpenseType.Incoming}\r\n                                    control={<Radio size=\"small\" />}\r\n                                    label={t('EXPENSES.INCOMING')}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value={ExpenseType.Outcoming}\r\n                                    control={<Radio size=\"small\" />}\r\n                                    label={t('EXPENSES.OUTCOMING')}\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <DatePicker\r\n                                required\r\n                                autoOk\r\n                                // showTodayButton\r\n                                format=\"dd/MM/yyyy\"\r\n                                label={t('EXPENSES.MANAGE.DATE')}\r\n                                value={date}\r\n                                onChange={handleChangeDate}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel htmlFor=\"name\" required>\r\n                                {t('COMMON.NAME')}\r\n                            </InputLabel>\r\n                            <Input required id=\"name\" onChange={handleChangeName} value={name} />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel htmlFor=\"value\" required>\r\n                                {t('EXPENSES.MANAGE.VALUE')}\r\n                            </InputLabel>\r\n                            <Input required type=\"number\" id=\"value\" onChange={handleChangeValue} value={value} />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel htmlFor=\"label-select\" required>\r\n                                {t('EXPENSES.MANAGE.LABEL')}\r\n                            </InputLabel>\r\n                            <NativeSelect\r\n                                id=\"label-select\"\r\n                                value={label}\r\n                                onChange={handleChangeLabel}\r\n                                disabled={global.isLoading}\r\n                            >\r\n                                {labelsMenuItems}\r\n                            </NativeSelect>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel htmlFor=\"comments\">{t('EXPENSES.MANAGE.COMMENTS')}</InputLabel>\r\n                            <Input multiline id=\"comments\" onChange={handleChangeComments} value={comments} />\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogComponent>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { format } from 'date-fns';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport LabelIcon from '@material-ui/icons/Label';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport TodayIcon from '@material-ui/icons/Today';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Badge from '@material-ui/core/Badge';\n\nimport { globalContext } from '../../contexts/globalContext';\nimport { SearchComponent } from '../../components/search/search';\nimport { hasValue } from '../../helpers/utilHelper';\nimport { userContext } from '../../contexts/userContext';\nimport { ExpenseFullModel, ExpenseType } from '../../models/expense';\nimport { AppConfig } from '../../configurations/appConfig';\nimport { ConfigurationManager } from '../../configurations/configurationManager';\nimport { ExpenseService } from '../../services/expenseService';\nimport { ExpensesManagePage } from './expensesManage';\nimport { LoadingComponent } from '../../components/loading/loading';\nimport { ItemType, ItemComponent } from '../../components/item/item';\nimport Chip from '@material-ui/core/Chip';\nimport { TabPanel } from '../../components/tabPanel/tabPanel';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        '&:last-child': {\n            paddingBottom: theme.spacing(2)\n        }\n    },\n    tab: {\n        flexGrow: 1\n    },\n    tabs: {\n        flexGrow: 1,\n        width: '100%'\n    },\n    title: {\n        margin: theme.spacing(2),\n        marginLeft: 0\n    },\n    list: {\n        width: '100%'\n    },\n    listValues: {\n        flexGrow: 1\n    },\n    separatorTitle: {\n        margin: theme.spacing(1)\n    }\n}));\n\nexport type ExpensesProps = {};\n\nexport const ExpensesPage: React.FC<ExpensesProps> = React.memo(() => {\n    const global = React.useContext(globalContext);\n    const { isReady } = React.useContext(userContext);\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\n    const classes = useStyles();\n    const [t] = useTranslation();\n\n    const [isLoading, setLoading] = React.useState<boolean>(false);\n    const [data, setData] = React.useState<ExpenseFullModel[]>([]);\n    const [reload, setReload] = React.useState<boolean>(true);\n    const [error, setError] = React.useState<string>('');\n    const [info, setInfo] = React.useState<string>('');\n    const [expense, setExpense] = React.useState<ExpenseFullModel>();\n    const [show, setShow] = React.useState<boolean>(false);\n    const [tab, setTab] = React.useState(0);\n\n    const handleChangeTab = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setTab(newValue);\n    };\n\n    const calculateTotal = React.useCallback(\n        (type: ExpenseType) =>\n            data\n                .filter(expense => expense.type === type)\n                .reduce((sum, current) => sum + current.value, 0)\n                .toFixed(2),\n        [data]\n    );\n\n    const calculateSize = React.useCallback(\n        (type: ExpenseType) => data.filter(expense => expense.type === type).length,\n        [data]\n    );\n\n    const [totalLeftValue, totalLeftPerc] = React.useMemo(() => {\n        const totalIncoming = +calculateTotal(ExpenseType.Incoming);\n        const totalOutcoming = +calculateTotal(ExpenseType.Outcoming);\n        const totalLeft = totalIncoming - totalOutcoming;\n\n        return [totalLeft.toFixed(2), ((totalLeft / totalIncoming) * 100).toFixed(0)];\n    }, [calculateTotal]);\n\n    const handleEdit = React.useCallback(\n        async (id: number | string) => {\n            setExpense(data.find(x => x.id === id));\n            setShow(true);\n            return Promise.resolve();\n        },\n        [data]\n    );\n\n    const handleDelete = React.useCallback(\n        async (id: number | string) => {\n            return new ExpenseService(config)\n                .remove(id as number)\n                .then(() => {\n                    setReload(!reload);\n                })\n                .catch(() => setError(t('COMMON.ERROR')));\n        },\n        [config, reload, t]\n    );\n\n    const handleAdd = React.useCallback(() => {\n        setExpense(undefined);\n        setShow(true);\n    }, []);\n\n    const handleAction = React.useCallback(() => {\n        setReload(!reload);\n        setShow(false);\n    }, [reload]);\n\n    const handleClose = React.useCallback(() => {\n        setShow(false);\n    }, []);\n\n    React.useEffect(() => {\n        if (!isReady || global.isLoading || !hasValue(global.group)) {\n            // not ready to requet\n            return;\n        }\n\n        // if (reload) {\n        //     setReload(false);\n        // } else {\n        //     return;\n        // }\n\n        setError('');\n        setInfo('');\n        setLoading(true);\n        new ExpenseService(config)\n            .getFullAll(global.group?.id as number, global.month, global.year)\n            .then(value => {\n                setData(value);\n                if (value.length === 0) {\n                    setInfo(t('COMMON.EMPTY'));\n                }\n            })\n            .catch(() => setError(t('COMMON.ERROR')))\n            .finally(() => setLoading(false));\n    }, [isReady, config, reload, t, global.isLoading, global.group, global.month, global.year]);\n\n    const listOfExpenses = React.useCallback(\n        (type: ExpenseType) => (\n            <List className={classes.list}>\n                {data\n                    .filter(expense => expense.type === type)\n                    .map((expense, i) => (\n                        <>\n                            <ItemComponent\n                                key={expense.id}\n                                id={expense.id}\n                                title={expense.name}\n                                type={ItemType.Menu}\n                                onEdit={handleEdit}\n                                onDelete={handleDelete}\n                            >\n                                <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"center\">\n                                    <Button startIcon={<TodayIcon />}>\n                                        {format(new Date(expense.date), t('COMMON.DATE_FORMAT'))}\n                                    </Button>\n                                    <Button startIcon={<LabelIcon />}>{expense.label.name}</Button>\n                                    <Button startIcon={<AccountBalanceWalletIcon />}>{expense.value.toFixed(2)}</Button>\n                                </Grid>\n                            </ItemComponent>\n                        </>\n                    ))}\n            </List>\n        ),\n        [t, data, classes.list, handleEdit, handleDelete]\n    );\n\n    return (\n        <div key={'ExpensesComponent'}>\n            <SearchComponent\n                loading={global.isLoading}\n                groups={global.groups}\n                years={global.years}\n                group={global.group}\n                month={global.month}\n                year={global.year}\n            />\n            <Divider />\n            <Grid container justify=\"space-between\" alignItems=\"center\" className={classes.root} spacing={1}>\n                <Typography variant=\"h5\" className={classes.title}>\n                    {t('EXPENSES.LIST.TITLE')}\n                </Typography>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<AddIcon />}\n                    onClick={handleAdd}\n                    disabled={isLoading || global.isLoading || !isReady}\n                >\n                    {t('COMMON.ADD')}\n                </Button>\n            </Grid>\n\n            <Grid container justify=\"flex-start\" alignItems=\"center\" className={classes.root} spacing={1}>\n                <LoadingComponent showLoading={isLoading || !isReady} error={error} info={info}>\n                    <div className={classes.tabs}>\n                        <Paper className={classes.tab}>\n                            <Tabs value={tab} onChange={handleChangeTab} centered variant=\"fullWidth\">\n                                <Tab label={t('COMMON.SUMMARY')} />\n                                <Tab\n                                    label={\n                                        <Badge badgeContent={calculateSize(ExpenseType.Incoming)} color=\"primary\">\n                                            {t('EXPENSES.INCOMING')}\n                                        </Badge>\n                                    }\n                                />\n                                <Tab\n                                    label={\n                                        <Badge badgeContent={calculateSize(ExpenseType.Outcoming)} color=\"primary\">\n                                            {t('EXPENSES.OUTCOMING')}\n                                        </Badge>\n                                    }\n                                />\n                            </Tabs>\n                        </Paper>\n                        <TabPanel value={tab} index={0}>\n                            <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"flex-start\">\n                                <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\n                                    <Typography variant=\"body2\" className={classes.separatorTitle}>\n                                        {t('EXPENSES.LIST.TOTAL_INCOMING')}\n                                    </Typography>\n                                    <Typography variant=\"h6\" className={classes.separatorTitle}>\n                                        {`${calculateTotal(ExpenseType.Incoming)}`}\n                                    </Typography>\n                                </Grid>\n                                <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\n                                    <Typography variant=\"body2\" className={classes.separatorTitle}>\n                                        {t('EXPENSES.LIST.TOTAL_OUTCOMING')}\n                                    </Typography>\n                                    <Typography variant=\"h6\" className={classes.separatorTitle}>\n                                        {`${calculateTotal(ExpenseType.Outcoming)}`}\n                                    </Typography>\n                                </Grid>\n                                <Divider />\n                                <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\n                                    <Typography variant=\"body2\" className={classes.separatorTitle}>\n                                        {t('EXPENSES.LIST.TOTAL_LEFT')}\n                                    </Typography>\n                                    <Chip\n                                        color={+totalLeftValue >= 0 ? 'primary' : 'secondary'}\n                                        label={totalLeftValue}\n                                        className={classes.separatorTitle}\n                                    />\n                                    <Chip\n                                        color={+totalLeftValue >= 0 ? 'primary' : 'secondary'}\n                                        size=\"small\"\n                                        label={`${totalLeftPerc}%`}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={tab} index={1}>\n                            {listOfExpenses(ExpenseType.Incoming)}\n                        </TabPanel>\n                        <TabPanel value={tab} index={2}>\n                            {listOfExpenses(ExpenseType.Outcoming)}\n                        </TabPanel>\n                    </div>\n                </LoadingComponent>\n            </Grid>\n            <ExpensesManagePage expense={expense} show={show} onAction={handleAction} onClose={handleClose} />\n        </div>\n    );\n});\n","import React, { memo, useCallback, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { loginWithFacebook } from '../../services/authService';\r\nimport { Routes } from '../routes';\r\n\r\nexport type FacebookProps = {};\r\n\r\nexport const FacebookPage: React.FC<FacebookProps> = memo(() => {\r\n    const [t] = useTranslation();\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n    const [hasError, setError] = useState<boolean>(false);\r\n\r\n    const handleFacebook = useCallback(async () => {\r\n        setLoading(true);\r\n        setError(false);\r\n        try {\r\n            await loginWithFacebook();\r\n            setTimeout(() => history.push(Routes.home));\r\n        } catch (error) {\r\n            setError(true);\r\n            // console.error(error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [history]);\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<FacebookIcon />}\r\n                onClick={handleFacebook}\r\n                endIcon={\r\n                    <>\r\n                        {isLoading && <CircularProgress size={15} />}\r\n                        {hasError && <CloseIcon color=\"secondary\" data-testid=\"facebook-close-icon\" />}\r\n                    </>\r\n                }\r\n                disabled={isLoading}\r\n            >\r\n                {t('AUTH.FACEBOOK.BUTTON')}\r\n            </Button>\r\n        </>\r\n    );\r\n});\r\n","import React, { memo } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nimport { LoginPage, LoginPageType } from './loginPage';\nimport { FacebookPage } from './facebookPage';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        center: {\n            textAlign: 'center'\n        }\n    })\n);\n\nexport const AuthPage: React.FC = memo(() => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"flex-start\" spacing={3}>\n                <Grid item xs={12} className={classes.center}>\n                    <FacebookPage />\n                </Grid>\n                {Object.values(LoginPageType).map((value: LoginPageType) => (\n                    <Grid item xs={12} sm={6} md={4}>\n                        <LoginPage type={value} />\n                    </Grid>\n                ))}\n            </Grid>\n        </div>\n    );\n});\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport { userContext } from '../../contexts/userContext';\r\nimport { LoadingComponent } from '../../components/loading/loading';\r\nimport { updateUser } from '../../services/authService';\r\nimport { hasValue } from '../../helpers/utilHelper';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    formControl: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    avatar: {\r\n        width: 100,\r\n        height: 100\r\n    }\r\n}));\r\n\r\nexport type SettingsProps = {};\r\n\r\nexport const SettingsPage: React.FC<SettingsProps> = React.memo(() => {\r\n    const classes = useStyles();\r\n    const [t] = useTranslation();\r\n    const user = React.useContext(userContext);\r\n\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [displayName, setDisplayName] = React.useState<string>('');\r\n    const [error, setError] = React.useState<string>('');\r\n\r\n    const handleChangeDisplayName = React.useCallback((value: React.ChangeEvent<{ value: string }>) => {\r\n        setDisplayName(value.target.value);\r\n    }, []);\r\n\r\n    const handleUpdate = React.useCallback(() => {\r\n        setLoading(true);\r\n        setError('');\r\n        updateUser(user.user, displayName)\r\n            .catch(() => setError(t('COMMON.ERROR')))\r\n            .finally(() => setLoading(false));\r\n    }, [displayName, user.user, t]);\r\n\r\n    const handleDarkTheme = React.useCallback(() => {\r\n        console.log(user.isDarkTheme, !user.isDarkTheme);\r\n        user.setDarkTheme(!user.isDarkTheme);\r\n    }, [user]);\r\n\r\n    React.useEffect(() => {\r\n        setDisplayName(user.user?.displayName ?? '');\r\n    }, [user.user]);\r\n\r\n    return (\r\n        <>\r\n            <LoadingComponent showLoading={user.initialising || !user.isReady} error={error}>\r\n                <Grid container justify=\"center\" alignItems=\"center\" className={classes.root}>\r\n                    <Badge\r\n                        badgeContent={<FacebookIcon />}\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right'\r\n                        }}\r\n                    >\r\n                        <Avatar\r\n                            alt={user.user?.displayName as string}\r\n                            src={(user.user?.photoURL as string) + '?type=large'}\r\n                            className={classes.avatar}\r\n                        >\r\n                            {(user.user?.displayName as string)[0]}\r\n                        </Avatar>\r\n                    </Badge>\r\n\r\n                    <FormControl fullWidth className={classes.formControl}>\r\n                        <InputLabel htmlFor=\"email\">{t('SETTINGS.EMAIL')}</InputLabel>\r\n                        <Input required id=\"email\" value={user.user?.email} disabled />\r\n                    </FormControl>\r\n                    <FormControl fullWidth className={classes.formControl}>\r\n                        <InputLabel htmlFor=\"displayName\" required>\r\n                            {t('SETTINGS.DISPLAY_NAME')}\r\n                        </InputLabel>\r\n                        <Input required id=\"displayName\" onChange={handleChangeDisplayName} value={displayName} />\r\n                    </FormControl>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch checked={user.isDarkTheme} onChange={handleDarkTheme} name=\"switch-dark-theme\" />\r\n                        }\r\n                        label={t('SETTINGS.DARK_THEME')}\r\n                    />\r\n                    <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            // size=\"small\"\r\n                            endIcon={isLoading && <CircularProgress size={12} />}\r\n                            disabled={isLoading || !hasValue(displayName)}\r\n                            onClick={handleUpdate}\r\n                        >\r\n                            {t('SETTINGS.BUTTON')}\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </LoadingComponent>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Switch, Route, useHistory, useLocation } from 'react-router';\r\nimport queryString from 'query-string';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { GroupModel } from '../models/group';\r\nimport { SearchModel } from '../models/search';\r\nimport { GroupService } from '../services/groupService';\r\nimport { PrivateRoute } from '../helpers/privateRouter';\r\nimport { Routes } from './routes';\r\nimport { GroupsPage } from './groups/groups';\r\nimport { globalContext } from '../contexts/globalContext';\r\nimport { LabelsPage } from './labels/labels';\r\nimport { ExpensesPage } from './expenses/expenses';\r\nimport { AuthPage } from './auth/authPage';\r\nimport { AppConfig } from '../configurations/appConfig';\r\nimport { ConfigurationManager } from '../configurations/configurationManager';\r\nimport { hasValue } from '../helpers/utilHelper';\r\nimport { userContext } from '../contexts/userContext';\r\nimport { LabelModel } from '../models/label';\r\nimport { LabelService } from '../services/labelService';\r\nimport { SettingsPage } from './settings/settings';\r\n\r\nexport const Main: React.FC = React.memo(() => {\r\n    const { isReady } = React.useContext(userContext);\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\r\n\r\n    const [groups, setGroups] = React.useState<GroupModel[]>([]);\r\n    const [years] = React.useState<number[]>([new Date().getFullYear()]);\r\n    const [labels, setLabels] = React.useState<LabelModel[]>([]);\r\n    const [group, setGroup] = React.useState<GroupModel>();\r\n    const [month, setMonth] = React.useState<number>(new Date().getMonth());\r\n    const [year, setYear] = React.useState<number>(new Date().getFullYear());\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        if (!isReady) {\r\n            return;\r\n        }\r\n\r\n        const jsonString = JSON.stringify(queryString.parse(location.search));\r\n        const searchParams = JSON.parse(jsonString) as SearchModel;\r\n        setLoading(true);\r\n\r\n        const setup = async () => {\r\n            let groupsResults: GroupModel[];\r\n            let labelsResults: LabelModel[];\r\n            let groupResults: GroupModel | undefined;\r\n            let monthResults: number;\r\n            let yearResults: number;\r\n\r\n            if (groups.length > 0) {\r\n                groupsResults = groups;\r\n            } else {\r\n                try {\r\n                    groupsResults = await new GroupService(config).getAll();\r\n                } catch {\r\n                    groupsResults = [];\r\n                }\r\n            }\r\n\r\n            const lastGroup = localStorage.getItem('group') as string;\r\n            setGroups(groupsResults);\r\n            if (hasValue(searchParams.group) && groupsResults.some(x => x.id === +searchParams.group)) {\r\n                groupResults = groupsResults.find(x => x.id === +searchParams.group) as GroupModel;\r\n            } else if (hasValue(lastGroup) && groupsResults.some(x => x.id === +lastGroup)) {\r\n                groupResults = groupsResults.find(x => x.id === +lastGroup) as GroupModel;\r\n            } else if (hasValue(groupsResults)) {\r\n                groupResults = groupsResults[0];\r\n            } else {\r\n                // groupResults = {} as Partial<GroupModel>;\r\n                // show error - does not have groups loaded\r\n            }\r\n\r\n            if (groupResults !== group) {\r\n                // group changes, need o reload labels\r\n                try {\r\n                    labelsResults = await new LabelService(config).getAll(groupResults?.id as number);\r\n                } catch {\r\n                    labelsResults = [];\r\n                }\r\n                setLabels(labelsResults);\r\n            }\r\n\r\n            setGroup(groupResults);\r\n            localStorage.setItem('group', groupResults?.id.toString() as string);\r\n\r\n            const lastMonth = localStorage.getItem('month') as string;\r\n            if (hasValue(searchParams.month) && searchParams.month >= 1 && searchParams.month <= 12) {\r\n                monthResults = searchParams.month;\r\n            } else if (hasValue(lastMonth) && +lastMonth >= 1 && +lastMonth <= 12) {\r\n                monthResults = +lastMonth;\r\n            } else {\r\n                monthResults = new Date().getMonth();\r\n            }\r\n            setMonth(monthResults);\r\n            localStorage.setItem('month', monthResults.toString());\r\n\r\n            // TODO get years from expenses\r\n            const lastYear = localStorage.getItem('year') as string;\r\n            if (hasValue(searchParams.year)) {\r\n                yearResults = searchParams.year;\r\n            } else if (hasValue(lastYear)) {\r\n                yearResults = +lastYear;\r\n            } else {\r\n                yearResults = new Date().getFullYear();\r\n            }\r\n            setYear(yearResults);\r\n            localStorage.setItem('year', yearResults.toString());\r\n\r\n            history.push({\r\n                pathname: location.pathname,\r\n                search: queryString.stringify({\r\n                    group: groupResults?.id,\r\n                    month: monthResults,\r\n                    year: yearResults\r\n                })\r\n            });\r\n\r\n            setLoading(false);\r\n        };\r\n        setup();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [config, location.search, isReady]);\r\n\r\n    return (\r\n        <>\r\n            <globalContext.Provider\r\n                value={{\r\n                    isLoading: isLoading,\r\n                    groups: groups,\r\n                    labels: labels,\r\n                    years: years,\r\n                    group: group,\r\n                    month: month,\r\n                    year: year\r\n                }}\r\n            >\r\n                <Switch>\r\n                    <PrivateRoute key={Routes.groups} path={Routes.groups} component={GroupsPage} />\r\n                    <PrivateRoute key={Routes.labels} path={Routes.labels} component={LabelsPage} />\r\n                    <PrivateRoute key={Routes.expenses} path={Routes.expenses} component={ExpensesPage} />\r\n                    <PrivateRoute key={Routes.settings} path={Routes.settings} component={SettingsPage} />\r\n\r\n                    <Route key={Routes.auth} path={Routes.auth} component={AuthPage} />\r\n                    <Route key={Routes.home} exact path={Routes.home}>\r\n                        <>\r\n                            <Typography variant=\"h3\">HOME</Typography>\r\n                            <Typography variant=\"h6\">Build Version: {config.buildVersion}</Typography>\r\n                        </>\r\n                    </Route>\r\n                    <Route key={'*'} path=\"*\">\r\n                        <h1> 404 </h1>\r\n                    </Route>\r\n                </Switch>\r\n            </globalContext.Provider>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nimport { makeStyles, Theme, createStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Container from '@material-ui/core/Container';\n\nimport { Header } from '../components/header/header';\nimport { ConfigurationManager } from '../configurations/configurationManager';\nimport { AppConfig } from '../configurations/appConfig';\nimport { hasValue } from '../helpers/utilHelper';\nimport { userContext } from '../contexts/userContext';\nimport { useAuth } from '../services/authService';\nimport { UserService } from '../services/userService';\nimport { UserModel } from '../models/user';\nimport { LoadingComponent } from '../components/loading/loading';\nimport { Main } from './main';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        container: {\n            flexGrow: 1,\n            marginTop: 10\n        }\n    })\n);\n\nconst Application: React.FC = React.memo(() => {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n    const classes = useStyles();\n    const [config] = React.useState<AppConfig>(ConfigurationManager.get());\n    const { user, initialising } = useAuth();\n    const [isReady, setReady] = React.useState<boolean>(false);\n    const [isDarkTheme, setDarkTheme] = React.useState<boolean>();\n\n    const handleDarkTheme = React.useCallback(\n        (dark: boolean) => {\n            console.log(isDarkTheme, !isDarkTheme);\n            setDarkTheme(dark);\n        },\n        [isDarkTheme]\n    );\n\n    React.useEffect(() => {\n        if (initialising || !user) {\n            return;\n        }\n\n        if (hasValue(user)) {\n            user.getIdTokenResult().then((value: any) => {\n                axios.defaults.headers.common.Authorization = value.token;\n                new UserService(config).addOrUpdate({\n                    id: user.uid,\n                    email: user.email,\n                    displayName: user.displayName,\n                    photoUrl: user.photoURL\n                } as UserModel);\n                setReady(true);\n            });\n        }\n    }, [user, initialising, config]);\n\n    const theme = React.useMemo(() => {\n        let theme = prefersDarkMode;\n\n        if (hasValue(localStorage.getItem('darkTheme'))) {\n            console.log('localStorage ', hasValue(localStorage.getItem('darkTheme')));\n            theme = JSON.parse(localStorage.getItem('darkTheme') as string);\n            setDarkTheme(theme);\n        }\n\n        if (hasValue(isDarkTheme) && isDarkTheme !== theme) {\n            theme = isDarkTheme as boolean;\n            setDarkTheme(theme);\n            localStorage.setItem('darkTheme', theme.toString());\n        }\n\n        return createMuiTheme({\n            palette: {\n                type: theme ? 'dark' : 'light'\n            },\n            typography: {\n                button: {\n                    textTransform: 'none'\n                }\n            }\n        });\n    }, [prefersDarkMode, isDarkTheme]);\n\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <userContext.Provider\n                    value={{\n                        user: user,\n                        initialising: initialising,\n                        isReady: isReady,\n                        isDarkTheme: isDarkTheme ?? prefersDarkMode,\n                        setDarkTheme: handleDarkTheme\n                    }}\n                >\n                    <BrowserRouter basename={process.env.PUBLIC_URL ?? undefined}>\n                        <Header />\n                        <Container key={'MainContainer'} maxWidth=\"md\" className={classes.container}>\n                            <LoadingComponent showLoading={initialising}>\n                                <Main />\n                            </LoadingComponent>\n                        </Container>\n                    </BrowserRouter>\n                </userContext.Provider>\n            </ThemeProvider>\n        </>\n    );\n});\n\nexport const App = Application;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const getFirebaseConfig = (projectId: string, apiKey: string) => ({\r\n    apiKey: apiKey,\r\n    authDomain: `${projectId}.firebaseapp.com`,\r\n    databaseURL: `https://${projectId}.firebaseio.com`,\r\n    projectId: projectId,\r\n    storageBucket: projectId,\r\n    messagingSenderId: 'my-sender-id'\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initializeApp } from 'firebase/app';\n\nimport './index.scss';\nimport './configurations/i18n';\n\nimport { App } from './pages/App';\nimport * as serviceWorker from './serviceWorker';\nimport { setConfiguration } from './configurations/configurationManager';\nimport { getFirebaseConfig } from './configurations/firebase';\n\nsetConfiguration();\n\n// initialize firebase\ninitializeApp({\n    ...getFirebaseConfig(\n        process.env.REACT_APP_FIREBASE_PROJECT as string,\n        process.env.REACT_APP_FIREBASE_API_KEY as string\n    )\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}