{"version":3,"sources":["serviceWorker.ts","configurations/i18n.ts","models/config.ts","helpers/util.ts","configurations/configManager.ts","pages/routes.ts","contexts/user.ts","services/auth.ts","components/header/header.tsx","helpers/user.ts","pages/auth/auth.tsx","components/search/search.tsx","mockData/group.ts","pages/expense/expense.tsx","pages/globalSyles.js","configurations/firebase.ts","pages/group/group.tsx","pages/label/label.tsx","pages/settings/settings.tsx","pages/theme.ts","pages/app.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","resources","en","translation","i18n","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","ApiType","hasValue","value","undefined","Array","isArray","length","getValueOrDefault","values","find","x","ConfigModel","apiUrl","buildVersion","requestDelay","firebaseApiKey","firebaseProject","ConfigManager","configurationObject","config","get","configurationSettings","Object","assign","set","ApplicationConfiguration","freeze","Routes","home","auth","settings","group","label","expense","userContext","React","createContext","user","initialising","isReady","facebook","FacebookAuthProvider","loginWithFacebook","a","signInWithPopup","console","error","loginWithEmail","email","password","signInWithEmailAndPassword","HeaderStyle","createGlobalStyle","HeaderComponent","memo","props","useContext","history","useHistory","useTranslation","t","handleRedirectTo","useCallback","path","push","handleLogout","firebase","signOut","setTimeout","authElement","useMemo","displayName","split","getUserDisplayName","Nav","NavDropdown","title","id","Item","onClick","Divider","Link","Navbar","bg","variant","expand","Container","Brand","Toggle","aria-controls","Collapse","className","AuthStyle","AuthPage","useState","isLoading","setLoading","hasError","setError","setEmail","setPassword","handleFacebook","handleChangeEmail","target","handleChangePassword","handleLogin","Alert","key","Row","Col","xs","sm","Card","Title","Body","Button","disabled","Form","Group","controlId","Label","Control","type","placeholder","onChange","SearchComponent","months","setGroup","month","setMonth","year","setYear","useEffect","handleOnChangeGroup","event","handleOnChangeMonth","handleOnChangeYear","handleOnSearch","log","groupsOptions","groups","map","name","monthsOptions","yearsOptions","years","defaultValue","groupsMockData","ExpensePage","searchProps","projectId","GlobalStyles","theme","body","text","GroupPage","LabelPage","SettingsPage","lightTheme","toggleBorder","gradient","darkTheme","AppPage","_props","isDarkMode","matchMedia","matches","currentUser","state","setState","unsubscribe","onAuthStateChanged","useAuth","setReady","getIdTokenResult","then","axios","defaults","headers","common","Authorization","token","Provider","basename","component","exact","overrides","configDefault","process","REACT_APP_API_URL","setConfiguration","initializeApp","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ad8b08e5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport translationEN from '../locales/en.json';\r\n\r\nconst resources = {\r\n    en: {\r\n        translation: translationEN\r\n    }\r\n};\r\n\r\ni18n.use(initReactI18next) // passes i18n down to react-i18next\r\n    .init({\r\n        resources,\r\n        lng: 'en',\r\n        fallbackLng: 'en', // use en if detected lng is not available\r\n\r\n        // keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n        interpolation: {\r\n            escapeValue: false // react already safes from xss\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n","export enum ApiType {\r\n    FIREBASE = 'FIREBASE',\r\n    LOCAL_STORAGE = 'LOCAL_STORAGE',\r\n    TOTAL_FAKE = 'TOTAL_FAKE'\r\n}\r\n\r\nexport class ConfigModel {\r\n    /** api backend url */\r\n    apiUrl: string = 'localhost';\r\n\r\n    /** build version */\r\n    buildVersion: string = 'local';\r\n\r\n    /** request delay time */\r\n    requestDelay: number = 2000;\r\n\r\n    /** firebase */\r\n    firebaseApiKey: string = 'AIzaSyDMDE7eTQbjwkQglMJf5KnFtMr48-pAoVM';\r\n    firebaseProject: string = 'lfmachadodasilva-dev';\r\n}\r\n","export const hasValue = (value: any): boolean => {\r\n    if (value === null || value === undefined) {\r\n        return false;\r\n    }\r\n\r\n    if (typeof value === 'string' || Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n// export const getValueOrDefault = (value?: string, defaultValue?: string) => {\r\n//     return hasValue(value) ? value : defaultValue;\r\n// };\r\n\r\nexport const getValueOrDefault = (...values: any[]) => {\r\n    return values.find(x => hasValue(x));\r\n};\r\n","import config, { Options } from 'react-global-configuration';\r\n\r\nimport { getValueOrDefault } from '../helpers/util';\r\nimport { ConfigModel } from '../models/config';\r\n\r\nexport class ConfigManager {\r\n    static set = (configurationSettings: ConfigModel) => {\r\n        config.set({ ApplicationConfiguration: configurationSettings }, { freeze: false } as Options);\r\n    };\r\n\r\n    static get(): ConfigModel {\r\n        const configurationObject = config.get('ApplicationConfiguration');\r\n\r\n        const configurationSettings = new ConfigModel();\r\n        Object.assign(configurationSettings, configurationObject);\r\n\r\n        return configurationSettings;\r\n    }\r\n}\r\n\r\nexport const setConfiguration = (overrides: Partial<ConfigModel> = {}): ConfigModel => {\r\n    let configDefault: ConfigModel = new ConfigModel();\r\n\r\n    configDefault = {\r\n        ...configDefault,\r\n        buildVersion: getValueOrDefault(\r\n            process.env.REACT_APP_BUILD_VERSION,\r\n            overrides.buildVersion,\r\n            configDefault.buildVersion\r\n        ),\r\n        apiUrl: getValueOrDefault(process.env.REACT_APP_API_URL, overrides.apiUrl, configDefault.apiUrl)\r\n    };\r\n\r\n    ConfigManager.set({ ...configDefault, ...overrides });\r\n\r\n    return ConfigManager.get();\r\n};\r\n","export class Routes {\r\n    static home = '/';\r\n    static auth = '/auth';\r\n    static settings = '/settings';\r\n    static group = '/group';\r\n    static label = '/label';\r\n    static expense = '/expense';\r\n}\r\n","import React from 'react';\r\nimport { User } from 'firebase/app';\r\n\r\ninterface UserContext {\r\n    user: User | null;\r\n    initialising: boolean;\r\n    isReady: boolean;\r\n}\r\n\r\nexport const userContext = React.createContext<UserContext>({\r\n    user: null,\r\n    initialising: false,\r\n    isReady: false\r\n});\r\n","import React, { useState } from 'react';\r\nimport firebase, { auth } from 'firebase/app';\r\nimport 'firebase/auth'; // If using Firebase auth\r\n// import { UserService } from './userService';\r\n// import { ConfigurationManager } from '../configurations/configurationManager';\r\n// import { UserModel } from '../models/user';\r\n\r\nexport const useAuth = () => {\r\n    const [state, setState] = useState(() => {\r\n        const user = auth().currentUser;\r\n        return { initialising: !user, user };\r\n    });\r\n\r\n    const onChange = (user: firebase.User | null) => {\r\n        setState({ initialising: false, user });\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // listen for auth state changes\r\n        const unsubscribe = auth().onAuthStateChanged(onChange);\r\n        // unsubscribe to the listener when unmounting\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return state;\r\n};\r\n\r\nconst facebook = new auth.FacebookAuthProvider();\r\n\r\nexport const loginWithFacebook = async () => {\r\n    try {\r\n        return await auth().signInWithPopup(facebook);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const loginWithEmail = async (email: string, password: string) => {\r\n    try {\r\n        await auth().signInWithEmailAndPassword(email, password);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const createUserWithEmail = async (email: string, password: string) => {\r\n    try {\r\n        await auth().createUserWithEmailAndPassword(email, password);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const resetPassword = async (email: string) => {\r\n    try {\r\n        return await auth().sendPasswordResetEmail(email);\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n};\r\n\r\n// export const updateUser = async (user: firebase.User | null, displayName: string) => {\r\n//     try {\r\n//         await user?.updateProfile({ displayName: displayName });\r\n\r\n//         const config = ConfigurationManager.get();\r\n//         const userObj = user as firebase.User;\r\n\r\n//         return await new UserService(config).addOrUpdate({\r\n//             id: userObj.uid,\r\n//             email: userObj.email,\r\n//             displayName: userObj.displayName,\r\n//             photoUrl: userObj.photoURL\r\n//         } as UserModel);\r\n//     } catch (err) {\r\n//         console.error(err);\r\n//         throw err;\r\n//     }\r\n// };\r\n\r\nexport const signOut = () => firebase.auth().signOut();\r\n","import React, { useContext } from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Routes } from '../../pages/routes';\r\nimport { userContext } from '../../contexts/user';\r\nimport { hasValue } from '../../helpers/util';\r\nimport { signOut } from '../../services/auth';\r\nimport { getUserDisplayName } from '../../helpers/user';\r\n\r\nconst HeaderStyle = createGlobalStyle`\r\n        .navbar-brand {\r\n            cursor: pointer;\r\n        };\r\n    `;\r\n\r\nexport type HeaderProps = {};\r\n\r\nexport const HeaderComponent: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\r\n    const { user, initialising } = useContext(userContext);\r\n    const history = useHistory();\r\n    const [t] = useTranslation();\r\n\r\n    const handleRedirectTo = React.useCallback(\r\n        (path: string) => {\r\n            history.push(path);\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const handleLogout = React.useCallback(async () => {\r\n        await signOut();\r\n        setTimeout(() => history.push(Routes.home));\r\n    }, [history]);\r\n\r\n    const authElement = React.useMemo(() => {\r\n        if (hasValue(user)) {\r\n            const displayName = getUserDisplayName(user as firebase.User);\r\n            return (\r\n                <Nav>\r\n                    <NavDropdown title={displayName} id=\"collasible-nav-dropdown\">\r\n                        <NavDropdown.Item onClick={() => handleRedirectTo(Routes.settings)}>\r\n                            {t('HEADER.SETTINGS')}\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick={handleLogout}>{t('HEADER.LOGOUT')}</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Nav>\r\n                <Nav.Link onClick={() => handleRedirectTo(Routes.auth)}>{t('HEADER.LOGIN')}</Nav.Link>\r\n            </Nav>\r\n        );\r\n    }, [user, handleRedirectTo, handleLogout, t]);\r\n\r\n    return (\r\n        <>\r\n            <HeaderStyle />\r\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\r\n                <Container>\r\n                    <Navbar.Brand onClick={() => handleRedirectTo(Routes.home)}>{t('HEADER.TITLE')}</Navbar.Brand>\r\n\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"mr-auto \">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link onClick={() => handleRedirectTo(Routes.group)}>{t('HEADER.GROUP')}</Nav.Link>\r\n                            <Nav.Link onClick={() => handleRedirectTo(Routes.label)}>{t('HEADER.LABEL')}</Nav.Link>\r\n                            <Nav.Link onClick={() => handleRedirectTo(Routes.expense)}>{t('HEADER.EXPENSE')}</Nav.Link>\r\n                        </Nav>\r\n                        {!initialising && authElement}\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </>\r\n    );\r\n});\r\n","import { hasValue } from './util';\r\n\r\nexport const getUserDisplayName = (user: firebase.User) => {\r\n    if (!hasValue(user)) {\r\n        return '';\r\n    }\r\n\r\n    if (hasValue(user.displayName)) {\r\n        return user.displayName?.split(' ')[0];\r\n    }\r\n\r\n    return user.email?.split('@')[0];\r\n};\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport { Routes } from '../routes';\r\nimport { loginWithEmail, loginWithFacebook } from '../../services/auth';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst AuthStyle = createGlobalStyle`\r\n    `;\r\n\r\nexport type AuthProps = {};\r\n\r\nexport const AuthPage: React.FC<AuthProps> = React.memo((props: AuthProps) => {\r\n    const [t] = useTranslation();\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    const [hasError, setError] = React.useState<boolean>(false);\r\n\r\n    const [email, setEmail] = React.useState<string>('');\r\n    const [password, setPassword] = React.useState<string>('');\r\n\r\n    const handleFacebook = React.useCallback(async () => {\r\n        setLoading(true);\r\n        setError(false);\r\n        try {\r\n            await loginWithFacebook();\r\n            setTimeout(() => history.push(Routes.home));\r\n        } catch (error) {\r\n            setError(true);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [history]);\r\n\r\n    const handleChangeEmail = React.useCallback((value: any) => {\r\n        setEmail(value.target.value);\r\n    }, []);\r\n    const handleChangePassword = React.useCallback((value: any) => {\r\n        setPassword(value.target.value);\r\n    }, []);\r\n\r\n    const handleLogin = React.useCallback(async () => {\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        try {\r\n            await loginWithEmail(email, password);\r\n        } catch {\r\n            setError(true);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [email, password]);\r\n\r\n    return (\r\n        <>\r\n            <AuthStyle />\r\n            <Container className=\"p-4\">\r\n                {hasError && (\r\n                    <Alert key=\"AUTH.ERROR\" variant=\"danger\">\r\n                        {t('AUTH.ERROR')}\r\n                    </Alert>\r\n                )}\r\n\r\n                <Row>\r\n                    <Col className=\"p-1\" xs={12} sm={6}>\r\n                        <Card className=\"p-4\">\r\n                            <Card.Title>{t('AUTH.FACEBOOK')}</Card.Title>\r\n                            <Card.Body>\r\n                                <Button onClick={handleFacebook} disabled={isLoading}>\r\n                                    {t('AUTH.FACEBOOK')}\r\n                                </Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col className=\"p-1\" xs={12} sm={6}>\r\n                        <Card className=\"p-4\">\r\n                            <Card.Title>{t('AUTH.BY_EMAIL')}</Card.Title>\r\n                            <Card.Body>\r\n                                <Form>\r\n                                    <Form.Group controlId=\"formBasicEmail\">\r\n                                        <Form.Label>{t('AUTH.EMAIL')}</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            placeholder={t('AUTH.EMAIL_PLACEHOLDER')}\r\n                                            onChange={handleChangeEmail}\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId=\"formBasicPassword\">\r\n                                        <Form.Label>{t('AUTH.PASSWORD')}</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder={t('AUTH.PASSWORD_PLACEHOLDER')}\r\n                                            onChange={handleChangePassword}\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Button variant=\"primary\" onClick={handleLogin} disabled={isLoading}>\r\n                                        {t('AUTH.LOGIN')}\r\n                                    </Button>\r\n                                </Form>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { GroupModel } from '../../models/group';\r\n\r\nexport type SearchProps = {\r\n    groups: GroupModel[];\r\n    group: number;\r\n\r\n    month: number;\r\n\r\n    years: number[];\r\n    year: number;\r\n};\r\n\r\nexport const SearchComponent: React.FC<SearchProps> = React.memo((props: SearchProps) => {\r\n    const [t] = useTranslation();\r\n    const [months] = React.useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\r\n\r\n    const [group, setGroup] = React.useState<number>(props.group);\r\n    const [month, setMonth] = React.useState<number>(props.month);\r\n    const [year, setYear] = React.useState<number>(props.year);\r\n\r\n    React.useEffect(() => {\r\n        setGroup(props.group);\r\n        setMonth(props.month);\r\n        setYear(props.year);\r\n    }, [props.group, props.month, props.year]);\r\n\r\n    const handleOnChangeGroup = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGroup(event.target.value as number);\r\n    }, []);\r\n    const handleOnChangeMonth = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setMonth(event.target.value as number);\r\n    }, []);\r\n    const handleOnChangeYear = React.useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setYear(event.target.value as number);\r\n    }, []);\r\n\r\n    const handleOnSearch = React.useCallback(() => {\r\n        console.log(group, month, year);\r\n    }, [group, month, year]);\r\n\r\n    const groupsOptions = React.useMemo(\r\n        () =>\r\n            props.groups.map(x => (\r\n                <option key={'GROUP_' + x.id} value={x.id}>\r\n                    {x.name}\r\n                </option>\r\n            )),\r\n        [props.groups]\r\n    );\r\n\r\n    const monthsOptions = React.useMemo(\r\n        () =>\r\n            months.map(x => (\r\n                <option key={'MONTH_' + x} value={x}>\r\n                    {t('MONTHS.' + x)}\r\n                </option>\r\n            )),\r\n        [months, t]\r\n    );\r\n\r\n    const yearsOptions = React.useMemo(\r\n        () =>\r\n            props.years.map(x => (\r\n                <option key={'YEAR_' + x} value={x}>\r\n                    {x}\r\n                </option>\r\n            )),\r\n        [props.years]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            Search Component\r\n            <br></br>\r\n            <label>{t('SEARCH.GROUP')}</label>\r\n            <select className=\"group\" id=\"group\" value={group} defaultValue={group} onChange={handleOnChangeGroup}>\r\n                {groupsOptions}\r\n            </select>\r\n            <label>{t('SEARCH.MONTH')}</label>\r\n            <select className=\"month\" id=\"month\" value={month} defaultValue={month} onChange={handleOnChangeMonth}>\r\n                {monthsOptions}\r\n            </select>\r\n            <label>{t('SEARCH.YEAR')}</label>\r\n            <select className=\"year\" id=\"year\" value={year} defaultValue={year} onChange={handleOnChangeYear}>\r\n                {yearsOptions}\r\n            </select>\r\n            <input type=\"date\" id=\"date\" name=\"trip-start\" value=\"2018-07-22\"></input>\r\n            <button onClick={handleOnSearch}>Search</button>\r\n        </>\r\n    );\r\n});\r\n","import { GroupModel } from '../models/group';\r\n\r\nexport const groupsMockData: GroupModel[] = [\r\n    { id: 1, name: 'Group 1' },\r\n    { id: 2, name: 'Group 2' },\r\n    { id: 3, name: 'Group 3' },\r\n    { id: 4, name: 'Group 4' }\r\n];\r\n","import React from 'react';\r\n\r\nimport { SearchComponent, SearchProps } from '../../components/search/search';\r\nimport { groupsMockData } from '../../mockData/group';\r\n\r\nexport type ExpenseProps = {};\r\n\r\nexport const ExpensePage: React.FC<ExpenseProps> = React.memo((props: ExpenseProps) => {\r\n    const searchProps: SearchProps = React.useMemo(() => {\r\n        return {\r\n            groups: groupsMockData,\r\n            group: 2,\r\n            month: 10,\r\n            years: [2019, 2020],\r\n            year: 2020\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            Expense page\r\n            <br></br>\r\n            <SearchComponent {...searchProps} />\r\n        </>\r\n    );\r\n});\r\n","import { createGlobalStyle} from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n  };\r\n  .card {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n  };\r\n  .form-control {\r\n    background-color: ${({ theme }) => theme.body};\r\n  };\r\n  `","export const getFirebaseConfig = (projectId: string, apiKey: string) => ({\r\n    apiKey: apiKey,\r\n    authDomain: `${projectId}.firebaseapp.com`,\r\n    databaseURL: `https://${projectId}.firebaseio.com`,\r\n    projectId: projectId,\r\n    storageBucket: projectId,\r\n    messagingSenderId: 'my-sender-id'\r\n});\r\n","import React from 'react';\r\n\r\nexport type GroupProps = {};\r\n\r\nexport const GroupPage: React.FC<GroupProps> = React.memo((props: GroupProps) => {\r\n    return <>Group page</>;\r\n});\r\n","import React from 'react';\r\n\r\nimport { SearchComponent, SearchProps } from '../../components/search/search';\r\n\r\nexport type LabelProps = {};\r\n\r\nexport const LabelPage: React.FC<LabelProps> = React.memo((props: LabelProps) => {\r\n    const searchProps: SearchProps = {\r\n        groups: [\r\n            { id: 1, name: 'Group 1' },\r\n            { id: 2, name: 'Group 2' }\r\n        ],\r\n        group: 2,\r\n        month: 10,\r\n        years: [2019, 2020],\r\n        year: 2020\r\n    };\r\n    return (\r\n        <>\r\n            Label page\r\n            <br></br>\r\n            <SearchComponent {...searchProps} />\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\n\r\nexport type SettingsProps = {};\r\n\r\nexport const SettingsPage: React.FC<SettingsProps> = React.memo((props: SettingsProps) => {\r\n    return <>Settings page</>;\r\n});\r\n","export const lightTheme = {\r\n    body: '#E2E2E2',\r\n    text: '#363537',\r\n    toggleBorder: '#FFF',\r\n    gradient: 'linear-gradient(#39598A, #79D7ED)'\r\n};\r\n\r\nexport const darkTheme = {\r\n    body: '#363537',\r\n    text: '#FAFAFA',\r\n    toggleBorder: '#6B8096',\r\n    gradient: 'linear-gradient(#091236, #1E215D)'\r\n};\r\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider } from 'styled-components';\nimport axios from 'axios';\n\nimport { HeaderComponent } from '../components/header/header';\nimport { ConfigManager } from '../configurations/configManager';\nimport { ConfigModel } from '../models/config';\nimport { useAuth } from '../services/auth';\nimport { AuthPage } from './auth/auth';\nimport { ExpensePage } from './expense/expense';\nimport { GlobalStyles } from './globalSyles';\nimport { GroupPage } from './group/group';\nimport { LabelPage } from './label/label';\nimport { Routes } from './routes';\nimport { SettingsPage } from './settings/settings';\nimport { darkTheme, lightTheme } from './theme';\nimport { hasValue } from '../helpers/util';\nimport { userContext } from '../contexts/user';\n\nexport type AppProps = {};\n\nexport const AppPage: React.FC<AppProps> = React.memo((_props: AppProps) => {\n    const [config] = React.useState<ConfigModel>(ConfigManager.get());\n    const isDarkMode = React.useMemo(\n        () => window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches,\n        []\n    );\n    const { user, initialising } = useAuth();\n    const [isReady, setReady] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        if (initialising || !user) {\n            return;\n        }\n\n        if (hasValue(user)) {\n            user.getIdTokenResult().then((value: any) => {\n                axios.defaults.headers.common.Authorization = value.token;\n                // new UserService(config).addOrUpdate({\n                //     id: user.uid,\n                //     email: user.email,\n                //     displayName: user.displayName,\n                //     photoUrl: user.photoURL\n                // } as UserModel);\n                setReady(true);\n            });\n        }\n    }, [user, initialising, config]);\n\n    return (\n        <>\n            <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n                <>\n                    <GlobalStyles />\n                    <userContext.Provider\n                        value={{\n                            user: user,\n                            initialising: initialising,\n                            isReady: isReady\n                        }}\n                    >\n                        <HashRouter basename=\"/\">\n                            <HeaderComponent />\n                            <Container>\n                                <Switch>\n                                    <Route key={Routes.group} path={Routes.group} component={GroupPage} />\n                                    <Route key={Routes.label} path={Routes.label} component={LabelPage} />\n                                    <Route key={Routes.expense} path={Routes.expense} component={ExpensePage} />\n                                    <Route key={Routes.settings} path={Routes.settings} component={SettingsPage} />\n                                    <Route key={Routes.auth} path={Routes.auth} component={AuthPage} />\n                                    <Route key={Routes.home} exact path={Routes.home}>\n                                        <>\n                                            <h3>HOME</h3>\n                                            <h6>Build Version: {config.buildVersion}</h6>\n                                        </>\n                                    </Route>\n                                    <Route key={'*'} path=\"*\">\n                                        <h1> 404 </h1>\n                                    </Route>\n                                </Switch>\n                            </Container>\n                        </HashRouter>\n                    </userContext.Provider>\n                </>\n            </ThemeProvider>\n        </>\n    );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initializeApp } from 'firebase';\nimport * as serviceWorker from './serviceWorker';\n\nimport './configurations/i18n';\nimport './index.scss';\n\nimport { setConfiguration } from './configurations/configManager';\nimport { AppPage } from './pages/app';\nimport { getFirebaseConfig } from './configurations/firebase';\nimport { getValueOrDefault } from './helpers/util';\n\nconst config = setConfiguration();\n\n// initialize firebase\ninitializeApp({\n    ...getFirebaseConfig(\n        getValueOrDefault(process.env.REACT_APP_FIREBASE_PROJECT, config.firebaseProject),\n        getValueOrDefault(process.env.REACT_APP_FIREBASE_API_KEY, config.firebaseApiKey)\n    )\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppPage />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}